tests/test_waveform_hash.py

python
Copy
Edit
import sys, pathlib, os
_ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(_ROOT) not in sys.path:
    sys.path.insert(0, str(_ROOT))
_QOS = _ROOT / "quantoniumos"
if _QOS.exists() and str(_QOS) not in sys.path:
    sys.path.insert(0, str(_QOS))

from quantoniumos.encryption.geometric_waveform_hash import (
    wave_hash,
    extract_wave_parameters,
)

def _rand_bytes(n: int = 256) -> bytes:
    return os.urandom(n)

def test_wave_hash_length_and_extract():
    payload = _rand_bytes()
    h = wave_hash(payload)

    # basic structural checks
    assert isinstance(h, str), "hash should be str"
    assert len(h) == 64, "hash must be 64 hex‐chars"

    # deterministic for same input
    assert h == wave_hash(payload), "hash not deterministic"

    # parameter extraction
    waves, thresh = extract_wave_parameters(h)
    assert waves, "no waves extracted"
    assert 0.6 <= thresh <= 0.8, "coherence threshold out of range"
tests/test_geometric_vault.py

python
Copy
Edit
import sys, pathlib, os, tempfile
_ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(_ROOT) not in sys.path:
    sys.path.insert(0, str(_ROOT))
_QOS = _ROOT / "quantoniumos"
if _QOS.exists() and str(_QOS) not in sys.path:
    sys.path.insert(0, str(_QOS))

from quantoniumos.orchestration.symbolic_container import SymbolicContainer, hash_file

def test_symbolic_container_seal_unlock():
    # create temporary validation file
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(os.urandom(128))
        validation_path = tmp.name

    key_id, A, phi = hash_file(validation_path)
    payload = "TEST_PAYLOAD_12345"

    c = SymbolicContainer(payload, (key_id, A, phi), validation_file=validation_path)
    assert c.seal(), "seal failed"

    recovered = c.unlock(A, phi)
    assert recovered == payload, "payload mismatch after unlock"

    os.unlink(validation_path)
tests/test_xor_avalanche.py

python
Copy
Edit
import sys, pathlib, os
_ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(_ROOT) not in sys.path:
    sys.path.insert(0, str(_ROOT))
_QOS = _ROOT / "quantoniumos"
if _QOS.exists() and str(_QOS) not in sys.path:
    sys.path.insert(0, str(_QOS))

from quantoniumos.encryption.resonance_encrypt import encrypt_symbolic

def _hex32() -> str:
    return os.urandom(16).hex()

def _bit_flip(hex_str: str, bit_index: int) -> str:
    b = bytearray.fromhex(hex_str)
    b[bit_index // 8] ^= 1 << (bit_index % 8)
    return b.hex()

def test_xor_avalanche_effect():
    pt = _hex32()
    key = _hex32()
    baseline = encrypt_symbolic(pt, key)["ciphertext"]

    changed = 0
    for bit in range(16):          # flip first 16 bits
        pt_mut = _bit_flip(pt, bit)
        ct = encrypt_symbolic(pt_mut, key)["ciphertext"]
        if ct != baseline:
            changed += 1

    # Require at least half of the flips to alter the ciphertext
    assert changed >= 8, f"weak avalanche: {changed}/16 flips changed output"







