{
  "call_graph": {
    "crypto_core": {
      "enhanced_rft_crypto_v2.py": {
        "classes": [
          {
            "name": "EnhancedRFTCryptoV2",
            "methods": [
              {
                "name": "__init__",
                "visibility": "public",
                "calls": ["_derive_phase_locks", "_derive_round_keys"],
                "complexity": "O(1)"
              },
              {
                "name": "encrypt_aead",
                "visibility": "public", 
                "calls": ["_feistel_encrypt", "_authenticate", "secrets.token_bytes"],
                "complexity": "O(n)",
                "entry_point": true
              },
              {
                "name": "decrypt_aead",
                "visibility": "public",
                "calls": ["_feistel_decrypt", "_verify_auth"],
                "complexity": "O(n)",
                "entry_point": true
              },
              {
                "name": "_feistel_encrypt", 
                "visibility": "private",
                "calls": ["_round_function", "_derive_round_keys"],
                "complexity": "O(48 * n)",
                "rounds": 48
              },
              {
                "name": "_round_function",
                "visibility": "private",
                "calls": ["_sbox_layer", "_keyed_mds_layer", "_arx_operations"],
                "complexity": "O(n)"
              },
              {
                "name": "_derive_round_keys",
                "visibility": "private",
                "calls": ["hkdf_derive"],
                "complexity": "O(48)"
              },
              {
                "name": "_keyed_mds_layer",
                "visibility": "private",
                "calls": ["_gf_multiply"],
                "complexity": "O(n)"
              }
            ]
          }
        ]
      },
      "canonical_true_rft.py": {
        "classes": [
          {
            "name": "CanonicalTrueRFT",
            "methods": [
              {
                "name": "forward_transform",
                "visibility": "public",
                "calls": ["qr_decomposition", "eigenvalue_decomposition"],
                "complexity": "O(n^3)",
                "entry_point": true
              },
              {
                "name": "inverse_transform", 
                "visibility": "public",
                "calls": ["forward_transform"],
                "complexity": "O(n^3)"
              },
              {
                "name": "verify_unitarity",
                "visibility": "public",
                "calls": ["matrix_multiply", "frobenius_norm"],
                "complexity": "O(n^2)"
              }
            ]
          }
        ]
      }
    },
    "assembly_bindings": {
      "unitary_rft.py": {
        "classes": [
          {
            "name": "UnitaryRFT",
            "methods": [
              {
                "name": "__init__",
                "visibility": "public",
                "calls": ["_load_library", "_init_engine"],
                "complexity": "O(1)"
              },
              {
                "name": "forward",
                "visibility": "public",
                "calls": ["lib.rft_forward"],
                "complexity": "O(n log n)",
                "entry_point": true,
                "assembly_optimized": true
              },
              {
                "name": "inverse",
                "visibility": "public", 
                "calls": ["lib.rft_inverse"],
                "complexity": "O(n log n)",
                "assembly_optimized": true
              },
              {
                "name": "_load_library",
                "visibility": "private",
                "calls": ["cdll.LoadLibrary"],
                "complexity": "O(1)"
              }
            ]
          }
        ]
      },
      "vertex_quantum_rft.py": {
        "classes": [
          {
            "name": "EnhancedVertexQuantumRFT",
            "methods": [
              {
                "name": "process_million_qubits",
                "visibility": "public",
                "calls": ["symbolic_compression", "rft_transform"],
                "complexity": "O(n)",
                "scaling": "linear",
                "entry_point": true
              }
            ]
          }
        ]
      }
    },
    "applications": {
      "quantum_simulator.py": {
        "classes": [
          {
            "name": "RFTQuantumSimulator",
            "methods": [
              {
                "name": "__init__",
                "visibility": "public",
                "calls": ["create_ui", "init_quantum_engine"],
                "complexity": "O(1)"
              },
              {
                "name": "run_simulation",
                "visibility": "public",
                "calls": ["UnitaryRFT.forward", "visualize_results"],
                "complexity": "O(n log n)",
                "entry_point": true
              },
              {
                "name": "create_ui",
                "visibility": "private", 
                "calls": ["PyQt5.QtWidgets"],
                "complexity": "O(1)"
              }
            ]
          }
        ]
      },
      "enhanced_rft_crypto.py": {
        "classes": [
          {
            "name": "EnhancedRFTCrypto",
            "methods": [
              {
                "name": "encrypt",
                "visibility": "public",
                "calls": ["_rft_hash", "secrets.token_bytes"],
                "complexity": "O(n)",
                "entry_point": true
              },
              {
                "name": "decrypt",
                "visibility": "public",
                "calls": ["_rft_hash"],
                "complexity": "O(n)"
              },
              {
                "name": "_rft_hash",
                "visibility": "private",
                "calls": ["UnitaryRFT.forward"],
                "complexity": "O(n log n)"
              }
            ]
          }
        ]
      }
    },
    "validation": {
      "crypto_performance_test.py": {
        "functions": [
          {
            "name": "run_differential_analysis",
            "visibility": "public",
            "calls": ["EnhancedRFTCryptoV2.encrypt_aead", "statistical_analysis"],
            "complexity": "O(n * samples)",
            "entry_point": true
          },
          {
            "name": "benchmark_assembly_performance",
            "visibility": "public",
            "calls": ["UnitaryRFT.forward", "measure_throughput"],
            "complexity": "O(n * iterations)",
            "entry_point": true
          }
        ]
      }
    }
  },
  "entry_points": {
    "main_launchers": [
      "quantonium_boot.py",
      "frontend/launch_quantonium_os.py"
    ],
    "crypto_validation": [
      "validation/tests/crypto_performance_test.py",
      "validation/tests/final_comprehensive_validation.py"
    ],
    "applications": [
      "apps/quantum_simulator.py",
      "apps/launch_q_notes.py",
      "apps/launch_q_vault.py"
    ],
    "benchmarks": [
      "validation/benchmarks/QUANTONIUM_BENCHMARK_SUITE.py"
    ]
  },
  "critical_paths": {
    "crypto_encryption_path": [
      "EnhancedRFTCryptoV2.encrypt_aead",
      "EnhancedRFTCryptoV2._feistel_encrypt", 
      "EnhancedRFTCryptoV2._round_function",
      "EnhancedRFTCryptoV2._sbox_layer",
      "EnhancedRFTCryptoV2._keyed_mds_layer"
    ],
    "quantum_simulation_path": [
      "RFTQuantumSimulator.run_simulation",
      "UnitaryRFT.forward",
      "lib.rft_forward",
      "assembly_optimized_transform"
    ],
    "validation_path": [
      "crypto_performance_test.run_differential_analysis",
      "EnhancedRFTCryptoV2.encrypt_aead",
      "statistical_analysis",
      "report_generation"
    ]
  },
  "performance_hotspots": [
    {
      "function": "EnhancedRFTCryptoV2._feistel_encrypt",
      "complexity": "O(48 * n)",
      "optimization": "Assembly implementation available",
      "bottleneck": "48 rounds of Feistel operations"
    },
    {
      "function": "UnitaryRFT.forward",
      "complexity": "O(n log n)",
      "optimization": "AVX2 SIMD, assembly optimized",
      "bottleneck": "Matrix operations"
    },
    {
      "function": "CanonicalTrueRFT.forward_transform",
      "complexity": "O(n^3)",
      "optimization": "BLAS/LAPACK integration",
      "bottleneck": "QR decomposition"
    }
  ],
  "assembly_integration_points": [
    {
      "python_module": "unitary_rft.py",
      "c_library": "ASSEMBLY/compiled/librftkernel.so",
      "interface": "ctypes",
      "performance_gain": "~100x"
    },
    {
      "python_module": "enhanced_rft_crypto.py",
      "c_library": "ASSEMBLY/engines/crypto_engine/feistel_48.c",
      "interface": "python_bindings.cpp",
      "performance_gain": "~50x"
    }
  ],
  "external_dependencies": {
    "numpy": {
      "used_by": ["core/*", "apps/*", "validation/*"],
      "critical_functions": ["matrix operations", "FFT", "linear algebra"]
    },
    "PyQt5": {
      "used_by": ["apps/*", "frontend/*"],
      "critical_functions": ["GUI", "event handling", "visualization"]
    },
    "ctypes": {
      "used_by": ["ASSEMBLY/python_bindings/*"],
      "critical_functions": ["C library interface", "memory management"]
    }
  }
}
