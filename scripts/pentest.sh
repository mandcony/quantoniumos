#!/bin/bash
# Quantonium OS - Container Security Penetration Test Script
# This script attempts to perform various container escape techniques
# All attempts should fail if the security hardening is properly configured

set -e

CONTAINER_NAME="quantonium-runtime"
PASSED=0
FAILED=0
TESTS=0

echo "üîí Quantonium OS Container Security Penetration Tests"
echo "===================================================="
echo "Running tests against container: $CONTAINER_NAME"
echo

# Helper function to run tests
run_test() {
    local TEST_NAME="$1"
    local TEST_CMD="$2"
    local EXPECTED_RESULT="$3"  # 0 for success, non-zero for failure
    local INVERT="$4"           # If true, invert the results (we expect failure)
    
    echo "üß™ Test: $TEST_NAME"
    echo "Command: $TEST_CMD"
    
    # Run the command in the container
    RESULT=$(docker exec -i "$CONTAINER_NAME" bash -c "$TEST_CMD" 2>&1 || true)
    EXIT_CODE=$?
    
    if [[ "$INVERT" == "true" ]]; then
        # For security tests, we want the command to fail (non-zero exit)
        if [[ $EXIT_CODE -ne 0 ]]; then
            echo "‚úÖ PASSED: Command failed as expected"
            echo "Output: $RESULT"
            PASSED=$((PASSED+1))
        else
            echo "‚ùå FAILED: Command succeeded when it should have failed"
            echo "Output: $RESULT"
            FAILED=$((FAILED+1))
        fi
    else
        # For verification tests, we want the command to succeed (zero exit)
        if [[ $EXIT_CODE -eq 0 ]]; then
            echo "‚úÖ PASSED: Command succeeded as expected"
            echo "Output: $RESULT"
            PASSED=$((PASSED+1))
        else
            echo "‚ùå FAILED: Command failed when it should have succeeded"
            echo "Output: $RESULT"
            FAILED=$((FAILED+1))
        fi
    fi
    
    TESTS=$((TESTS+1))
    echo
}

# Make sure the container is running
if ! docker ps | grep -q "$CONTAINER_NAME"; then
    echo "Container $CONTAINER_NAME is not running"
    echo "Please start it with 'docker-compose up -d'"
    exit 1
fi

# Test 1: Verify we're running as non-root
run_test "Non-root User Check" "id" 0 false

# Test 2: Attempt to install packages (should fail)
run_test "Package Install Attempt" "apt-get update" 0 true

# Test 3: Attempt to modify filesystem (should fail due to read-only)
run_test "Filesystem Modification" "touch /tmp/test_file" 0 true

# Test 4: Verify tmpfs volumes are writable (should succeed)
run_test "Tmpfs Write Test" "touch /app/logs/test_file && rm /app/logs/test_file" 0 false

# Test 5: Check if we can run ptrace (should fail due to seccomp)
run_test "Ptrace Syscall Block" "python3 -c 'import ctypes; ctypes.CDLL(None).ptrace(0, 0, 0, 0)'" 0 true

# Test 6: Attempt to mount filesystems (should fail due to seccomp)
run_test "Mount Syscall Block" "mount -t tmpfs none /tmp" 0 true

# Test 7: Check Linux capabilities (should show none)
run_test "No Linux Capabilities" "capsh --print | grep -q 'Current Capabilities: ='" 0 false

# Test 8: Attempt to change system time (should fail)
run_test "Change System Time Block" "date -s '2099-12-31 23:59:59'" 0 true

# Test 9: Check that /proc is restricted
run_test "Proc Filesystem Restriction" "ls -la /proc/1/root 2>&1 | grep -q 'Permission denied'" 0 false

# Test 10: Check the PID namespace isolation
run_test "PID Namespace Isolation" "ps aux | grep -q '1 root'" 0 true

# Print summary
echo "===================================================="
echo "üß™ Test Summary:"
echo "Total tests: $TESTS"
echo "Passed: $PASSED"
echo "Failed: $FAILED"

if [[ $FAILED -eq 0 ]]; then
    echo "‚úÖ All penetration tests PASSED!"
    exit 0
else
    echo "‚ùå Some penetration tests FAILED!"
    exit 1
fi