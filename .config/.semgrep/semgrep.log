2025-07-08 18:38:12,923 - semgrep.run_scan - DEBUG - semgrep version 1.4.0
2025-07-08 18:38:12,935 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-07-08 18:38:12,937 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-07-08 18:38:12,957 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-07-08 18:38:12,961 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-pc1d9u_j.rules
2025-07-08 18:38:13,636 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-07-08 18:38:13,636 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-07-08 18:38:13,636 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-07-08 18:38:13,637 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.7000231742858887
2025-07-08 18:38:13,732 - semgrep.run_scan - VERBOSE - running 715 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-07-08 18:38:13,732 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-07-08 18:38:13,734 - semgrep.run_scan - VERBOSE - Rules:
2025-07-08 18:38:13,734 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-07-08 18:38:14,085 - semgrep.ignores - VERBOSE - Ignoring due to .semgrepignore:
2025-07-08 18:38:14,085 - semgrep.ignores - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-07-08 18:38:14,422 - semgrep.ignores - VERBOSE - Ignoring due to .semgrepignore:
2025-07-08 18:38:14,422 - semgrep.ignores - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-07-08 18:38:14,534 - semgrep.ignores - VERBOSE - Ignoring due to .semgrepignore:
2025-07-08 18:38:14,535 - semgrep.ignores - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-07-08 18:38:15,856 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:15,939 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,205 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/AnnoyingScalar.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/MovableScalar.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/SafeScalar.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/bug1213.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/evaluator_common.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/gpu_common.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/main.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/packetmath_test_shared.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/product.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/random_without_cast_overflow.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/solverbase.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/sparse.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/sparse_solver.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/split_test_helper.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/svd_common.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/test/svd_fill.h due to .semgrepignore
2025-07-08 18:38:16,206 - semgrep.ignores - VERBOSE - Ignoring Eigen/eigen-3.4.0/unsupported/test/matrix_functions.h due to .semgrepignore
2025-07-08 18:38:16,211 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,225 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,240 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,255 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,269 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,281 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,294 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,306 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,317 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,328 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/__init__.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/benchmark_sanity_test.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/conftest.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/e2e_wave_ui.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_auth.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_container_access.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_container_parameters.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_encrypt.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_geometric_vault.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_geometric_waveform.py due to .semgrepignore
2025-07-08 18:38:16,340 - semgrep.ignores - VERBOSE - Ignoring tests/test_geowave_kat.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_json_logger.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_key_management.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_rft_roundtrip.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_security.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_sign_verify.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_stream.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_waveform_hash.py due to .semgrepignore
2025-07-08 18:38:16,341 - semgrep.ignores - VERBOSE - Ignoring tests/test_xor_avalanche.py due to .semgrepignore
2025-07-08 18:38:16,344 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,355 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,366 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,376 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,388 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:16,400 - semgrep.target_manager - DEBUG - Encountered likely binary file tests/test_geowave_kat while reading shebang; skipping this file
2025-07-08 18:38:19,110 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-07-08 18:38:20,303 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-07-08 18:38:20,303 - semgrep.core_runner - DEBUG - /tmp/_MEIcZ9Do6/semgrep/bin/opengrep-core -json -rules /tmp/tmp1jya0wst.json -j 8 -targets /tmp/tmpta73w5zr -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-07-08 18:39:14,575 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.07][[34mINFO[0m]: Executed as: /tmp/_MEIcZ9Do6/semgrep/bin/opengrep-core -json -rules /tmp/tmp1jya0wst.json -j 8 -targets /tmp/tmpta73w5zr -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.07][[34mINFO[0m]: Version: 1.4.0
[00.07][[34mINFO[0m]: Parsing rules in /tmp/tmp1jya0wst.json
[00.56][[34mINFO[0m]: scan: processing 4350 files (skipping 0), with 705 rules (skipping 0 )
[13.64][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: main.py func: launch_app:-1]
[0m[18.90][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: analyze_global_usage.py func: extract_ips_from_logs:-1]
[0m[20.73][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: randomized_test.py func: test_encryption_decryption_cycle:-1]
[0m[24.35][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: final_gate_validation.py func: main:-1]
[0m[25.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: validate_final_proof.py func: main:-1]
[0m[26.74][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: comprehensive_global_analysis.py func: extract_all_ip_sources:-1]
[0m[26.89][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: comprehensive_global_analysis.py func: get_country_data:-1]
[0m[36.42][[31mERROR[0m]: exception on Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s2.js (Memprof_limits.Limit_reached: token set)
[0m[38.47][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: scripts/secure_api_tables.py func: secure_api_tables:-1]
[0m[38.51][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: qt:64356]
[0m[38.81][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: Ot:64450]
[0m[39.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-url-host file: routes.py func: benchmark:-1]
[0m[39.85][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-sql-string file: routes.py func: benchmark:-1]
[0m[40.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.raw-html-format file: routes.py func: benchmark:-1]
[0m[40.79][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.audit.directly-returned-format-string file: routes.py func: benchmark:-1]
[0m[41.12][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-url-host file: routes.py func: benchmark:-1]
[0m[41.29][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-sql-string file: routes.py func: benchmark:-1]
[0m[41.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.raw-html-format file: routes.py func: benchmark:-1]
[0m[42.30][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: routes.py func: benchmark:-1]
[0m[42.58][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: routes.py func: analyze_image_resonance:-1]
[0m[43.62][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: jn:63910]
[0m[45.01][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: qt:64356]
[0m[45.34][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: Ot:64450]
[0m[46.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.raw-html-format file: middleware/input_validation.py func: wrapper:-1]
[0m[46.13][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: core/encryption/resonance_fourier.py func: perform_irft:-1]
[0m[46.45][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js func: Ze:65114]
[0m[46.61][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-url-host file: middleware/input_validation.py func: wrapper:-1]
[0m[46.94][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: static/wave_ui/wave_visualization.js func: createWaveVisualization:132759]
[0m[47.10][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: static/wave_ui/wave_visualization.js func: createWaveVisualization:132759]
[0m[47.26][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: middleware/input_validation.py func: wrapper:-1]
[0m[48.36][[33mWARNING[0m]: Timeout on Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js
[0m--- end semgrep-core stderr ---
2025-07-08 18:39:14,589 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,590 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,590 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,591 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,591 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,592 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n clslink clslink = <... location ...>;\n...\n$(<... clslink ...>);\n clslink clslink = <... window ...>;\n...\n$(<... clslink ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a2f3cd6de4be1a6708a858ea811c6fb275f581ba4b0348b319aeee25d1192f4f467ca174d7d4e39f82e31f753961b3a2efa414841e856180e762055bd6db1b81_0
2025-07-08 18:39:14,592 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n clslink clslink = <... location ...>;\n...\n$(<... clslink ...>);\n clslink clslink = <... window ...>;\n...\n$(<... clslink ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a2f3cd6de4be1a6708a858ea811c6fb275f581ba4b0348b319aeee25d1192f4f467ca174d7d4e39f82e31f753961b3a2efa414841e856180e762055bd6db1b81_0
2025-07-08 18:39:14,592 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n clslink clslink = <... location ...>;\n...\n$(<... clslink ...>);\n clslink clslink = <... window ...>;\n...\n$(<... clslink ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a2f3cd6de4be1a6708a858ea811c6fb275f581ba4b0348b319aeee25d1192f4f467ca174d7d4e39f82e31f753961b3a2efa414841e856180e762055bd6db1b81_0
2025-07-08 18:39:14,593 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,593 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,594 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,594 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_1
2025-07-08 18:39:14,595 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,595 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,596 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,596 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_2
2025-07-08 18:39:14,597 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,597 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,598 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,598 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_3
2025-07-08 18:39:14,598 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,599 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,599 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,600 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_4
2025-07-08 18:39:14,600 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 80e0f359a6db327885d73e258296b2fb0e4f6ff8d24e392078d900c40d824ebf515fa8cb4979ca7008bccc7ac9fb2f2c42da1e60ac359a8da9437597e2987a2f_0
2025-07-08 18:39:14,601 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 45af292452b91716c7d5fbccc351d13bc38e69df5c574d237cfcde3245812b611f0ecc59e9c01ff9f1c8b1d8c3e07222bb016fbb50e940b484c21fb983e23a8e_0
2025-07-08 18:39:14,601 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 45af292452b91716c7d5fbccc351d13bc38e69df5c574d237cfcde3245812b611f0ecc59e9c01ff9f1c8b1d8c3e07222bb016fbb50e940b484c21fb983e23a8e_0
2025-07-08 18:39:14,601 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 45af292452b91716c7d5fbccc351d13bc38e69df5c574d237cfcde3245812b611f0ecc59e9c01ff9f1c8b1d8c3e07222bb016fbb50e940b484c21fb983e23a8e_0
2025-07-08 18:39:14,602 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 1233272809d434b8c8b17274909b1002699bc29e397b91b97128688c415c6b3754da94a1c2329c7180867698831a51bba5f1efd9071c1bdf85c77bc4b3eecc6c_0
2025-07-08 18:39:14,602 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n imgNode.outerHTML = arrowRight;\n document.write(...) imgNode.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 7812245b29ddce813e42f3cc9bb3133753df2cf8a7db6d9d005d8f5ad71dc6500843e4085df8d6cf1fc09f378510822b35b7bd5c5d9c12c3a5d7b659028e5528_0
2025-07-08 18:39:14,603 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n imgNode.outerHTML = arrowRight;\n document.write(...) imgNode.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 7812245b29ddce813e42f3cc9bb3133753df2cf8a7db6d9d005d8f5ad71dc6500843e4085df8d6cf1fc09f378510822b35b7bd5c5d9c12c3a5d7b659028e5528_0
2025-07-08 18:39:14,603 - semgrep.rule_match - DEBUG - match_key = ('imgNode.innerHTML = "...";\n imgNode.innerHTML = arrowRight;\n imgNode.outerHTML = arrowRight;\n document.write(...) imgNode.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 7812245b29ddce813e42f3cc9bb3133753df2cf8a7db6d9d005d8f5ad71dc6500843e4085df8d6cf1fc09f378510822b35b7bd5c5d9c12c3a5d7b659028e5528_0
2025-07-08 18:39:14,604 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,604 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... node ...>))\n $((<... node ...>) + "...")\n $(<... node ...>)\n $JQUERY.each(function($INDEX, node) {\n  ...\n})\n node function createIndent(..., node, ...) {\n  ...\n}\n function createIndent(...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n function (..., node, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = dd6102e989fd5e9212b74eb2b0212715e991f729d1c36f90d4f9b9fde68ca552b243bd73bae725af83c29c97e6362919e96fcdf0127c25d4f091899441f6a301_0
2025-07-08 18:39:14,605 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... node ...>))\n $((<... node ...>) + "...")\n $(<... node ...>)\n $JQUERY.each(function($INDEX, node) {\n  ...\n})\n node function createIndent(..., node, ...) {\n  ...\n}\n function createIndent(...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n function (..., node, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = dd6102e989fd5e9212b74eb2b0212715e991f729d1c36f90d4f9b9fde68ca552b243bd73bae725af83c29c97e6362919e96fcdf0127c25d4f091899441f6a301_0
2025-07-08 18:39:14,605 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... node ...>))\n $((<... node ...>) + "...")\n $(<... node ...>)\n $JQUERY.each(function($INDEX, node) {\n  ...\n})\n node function createIndent(..., node, ...) {\n  ...\n}\n function createIndent(...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n function (..., node, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  node = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = dd6102e989fd5e9212b74eb2b0212715e991f729d1c36f90d4f9b9fde68ca552b243bd73bae725af83c29c97e6362919e96fcdf0127c25d4f091899441f6a301_0
2025-07-08 18:39:14,606 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 80e0f359a6db327885d73e258296b2fb0e4f6ff8d24e392078d900c40d824ebf515fa8cb4979ca7008bccc7ac9fb2f2c42da1e60ac359a8da9437597e2987a2f_0
2025-07-08 18:39:14,606 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5b9975456ee8b241e29f334258c060f3aa74dbef7a2f641b46c86f0e0a11d6fb7eada9e6c216001cd6e6de836428572bb76ae497642a4eb9532898c8fd6f3ee5_0
2025-07-08 18:39:14,607 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5b9975456ee8b241e29f334258c060f3aa74dbef7a2f641b46c86f0e0a11d6fb7eada9e6c216001cd6e6de836428572bb76ae497642a4eb9532898c8fd6f3ee5_0
2025-07-08 18:39:14,607 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5b9975456ee8b241e29f334258c060f3aa74dbef7a2f641b46c86f0e0a11d6fb7eada9e6c216001cd6e6de836428572bb76ae497642a4eb9532898c8fd6f3ee5_0
2025-07-08 18:39:14,608 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 1233272809d434b8c8b17274909b1002699bc29e397b91b97128688c415c6b3754da94a1c2329c7180867698831a51bba5f1efd9071c1bdf85c77bc4b3eecc6c_0
2025-07-08 18:39:14,608 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n node.plus_img.outerHTML = arrowRight;\n document.write(...) node.plus_img.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 26625a7d30a5b433da720f29a46a5675eb8301be745bca5eae8b1c699e7cf8c2fe483ad6e8dc586c6f3875841e1329c0a199eca9b12ca21dd379b17f74c24257_0
2025-07-08 18:39:14,608 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n node.plus_img.outerHTML = arrowRight;\n document.write(...) node.plus_img.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 26625a7d30a5b433da720f29a46a5675eb8301be745bca5eae8b1c699e7cf8c2fe483ad6e8dc586c6f3875841e1329c0a199eca9b12ca21dd379b17f74c24257_0
2025-07-08 18:39:14,609 - semgrep.rule_match - DEBUG - match_key = ('node.plus_img.innerHTML = "...";\n node.plus_img.innerHTML = arrowRight;\n node.plus_img.outerHTML = arrowRight;\n document.write(...) node.plus_img.outerHTML = "...";\n document.write("...")', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 26625a7d30a5b433da720f29a46a5675eb8301be745bca5eae8b1c699e7cf8c2fe483ad6e8dc586c6f3875841e1329c0a199eca9b12ca21dd379b17f74c24257_0
2025-07-08 18:39:14,609 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,610 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n link link = <... location ...>;\n...\n$(<... link ...>);\n link link = <... window ...>;\n...\n$(<... link ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 2786ef19d2db8d32da96992d7d543b0ab48eebc5f189ef4bdd9ee548a7df37f2f7770b7f34e7005d9ae07a64061d281bf5b7848dfb145a3d35a10e38add6684b_0
2025-07-08 18:39:14,610 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n link link = <... location ...>;\n...\n$(<... link ...>);\n link link = <... window ...>;\n...\n$(<... link ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 2786ef19d2db8d32da96992d7d543b0ab48eebc5f189ef4bdd9ee548a7df37f2f7770b7f34e7005d9ae07a64061d281bf5b7848dfb145a3d35a10e38add6684b_0
2025-07-08 18:39:14,611 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n link link = <... location ...>;\n...\n$(<... link ...>);\n link link = <... window ...>;\n...\n$(<... link ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 2786ef19d2db8d32da96992d7d543b0ab48eebc5f189ef4bdd9ee548a7df37f2f7770b7f34e7005d9ae07a64061d281bf5b7848dfb145a3d35a10e38add6684b_0
2025-07-08 18:39:14,611 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,612 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,612 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_0
2025-07-08 18:39:14,613 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... $Y ...>))\n $((<... $Y ...>) + "...")\n $(<... $Y ...>)\n $JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n $Y function $FUNC(..., $Y, ...) {\n  ...\n}\n function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n function (..., $Y, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 7e9c6f2bc5524a2cbf6a99ccd2481d0d646c66351642c8fc91de6844d8812162ebf3f8241465bf40f2645b0f85878e3d836d864d1d1dec16dbc0b25c93ac09c3_5
2025-07-08 18:39:14,613 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,614 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... link ...>))\n $((<... link ...>) + "...")\n $(<... link ...>)\n $JQUERY.each(function($INDEX, link) {\n  ...\n})\n link function selectAndHighlight(..., link, ...) {\n  ...\n}\n function selectAndHighlight(...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n function (..., link, ...) {\n  ...\n}\n function (...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 82340b89e97f6f4e2fc8a5aed8ab29a36d17c8e5951bf86ae022cdaf55e459f35f73984e9ac7a9fd91aebce7fc7dc668c7e7bab873347f1a66f9c31fc162121f_0
2025-07-08 18:39:14,614 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... link ...>))\n $((<... link ...>) + "...")\n $(<... link ...>)\n $JQUERY.each(function($INDEX, link) {\n  ...\n})\n link function selectAndHighlight(..., link, ...) {\n  ...\n}\n function selectAndHighlight(...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n function (..., link, ...) {\n  ...\n}\n function (...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 82340b89e97f6f4e2fc8a5aed8ab29a36d17c8e5951bf86ae022cdaf55e459f35f73984e9ac7a9fd91aebce7fc7dc668c7e7bab873347f1a66f9c31fc162121f_0
2025-07-08 18:39:14,614 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... link ...>))\n $((<... link ...>) + "...")\n $(<... link ...>)\n $JQUERY.each(function($INDEX, link) {\n  ...\n})\n link function selectAndHighlight(..., link, ...) {\n  ...\n}\n function selectAndHighlight(...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n function (..., link, ...) {\n  ...\n}\n function (...,hash,...) {\n  ...\n  link = <... hash ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 82340b89e97f6f4e2fc8a5aed8ab29a36d17c8e5951bf86ae022cdaf55e459f35f73984e9ac7a9fd91aebce7fc7dc668c7e7bab873347f1a66f9c31fc162121f_0
2025-07-08 18:39:14,615 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,615 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_0
2025-07-08 18:39:14,616 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_0
2025-07-08 18:39:14,616 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_0
2025-07-08 18:39:14,617 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = 5453f2b6284e0cebbedae766ca234bf7879267f576112a4a3470cafe4dcd839dd03402d1f1a8b7949fc6306acc29f7a19049b8062b532ee1e6bb19c4894ff292_0
2025-07-08 18:39:14,617 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_0
2025-07-08 18:39:14,618 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_0
2025-07-08 18:39:14,618 - semgrep.rule_match - DEBUG - match_key = ('$("..." + (<... n ...>))\n $((<... n ...>) + "...")\n $(<... n ...>)\n $JQUERY.each(function($INDEX, n) {\n  ...\n})\n n function selectAndHighlight(..., n, ...) {\n  ...\n}\n function selectAndHighlight(...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n function (..., n, ...) {\n  ...\n}\n function (...,$Z,...) {\n  ...\n  n = <... $Z ...>;\n  ...\n}\n $(<... location ...>)\n $(<... window ...>)\n $X $X = <... location ...>;\n...\n$(<... $X ...>);\n $X $X = <... window ...>;\n...\n$(<... $X ...>);\n $(document)\n $(this)\n $(window)\n', PosixPath('Eigen/eigen-3.4.0/doc/eigen_navtree_hacks.js'), 'config..semgrep.vendored-rules.javascript.jquery.security.audit.jquery-insecure-selector') match_id = a28187068c36118c327a402bcb0c5c6f8aa95800afafb29f54f0738c2b52e9c3e628cd3910a303c85ef0bb34558532e7512e52f092cddb9d238ef43ccced4f7b_1
2025-07-08 18:39:14,619 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = f9a4956286da772027cf499f72d3ce273b6d6d794c3426611e843ee5b16c6789d1a115c95d469b79f68e2715a88282f91970c4a16d4674513858b267735caa77_0
2025-07-08 18:39:14,620 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = ee45248a46e6510962c673f0d18aa77b15feb04b038e042a1c7826b0d0048bcfde3bf3f30011e97d4a615c59f6ad21358b5bd062b8fa43f51e60b0019df8cb87_0
2025-07-08 18:39:14,621 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = ee45248a46e6510962c673f0d18aa77b15feb04b038e042a1c7826b0d0048bcfde3bf3f30011e97d4a615c59f6ad21358b5bd062b8fa43f51e60b0019df8cb87_0
2025-07-08 18:39:14,623 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = ee45248a46e6510962c673f0d18aa77b15feb04b038e042a1c7826b0d0048bcfde3bf3f30011e97d4a615c59f6ad21358b5bd062b8fa43f51e60b0019df8cb87_0
2025-07-08 18:39:14,624 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 936185508fa2b7cf0f16df55f14619cf53cfa638e6605929f3ef81ea0cd8b7a916dd39da7380fa5daacd5ad78765bf88623f2dbc4574de4e2017b201b459b23a_0
2025-07-08 18:39:14,625 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 46d9013cd51f2580fddcfbf8fda0a14db5bbd55e6e6d17ace5cc6433aa54dcba581ee262c7103a28e88343be2c0dbe362a3b89abe708a3ccb181a4bd5faa04cb_0
2025-07-08 18:39:14,627 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 46d9013cd51f2580fddcfbf8fda0a14db5bbd55e6e6d17ace5cc6433aa54dcba581ee262c7103a28e88343be2c0dbe362a3b89abe708a3ccb181a4bd5faa04cb_0
2025-07-08 18:39:14,628 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 46d9013cd51f2580fddcfbf8fda0a14db5bbd55e6e6d17ace5cc6433aa54dcba581ee262c7103a28e88343be2c0dbe362a3b89abe708a3ccb181a4bd5faa04cb_0
2025-07-08 18:39:14,629 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 936185508fa2b7cf0f16df55f14619cf53cfa638e6605929f3ef81ea0cd8b7a916dd39da7380fa5daacd5ad78765bf88623f2dbc4574de4e2017b201b459b23a_0
2025-07-08 18:39:14,630 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 3ce96a848532d1cf7e9ff713f98e371cf54851316822ae365545c45aeb741d04a32a8d2c592487a765186f610bf0d7a04b343a6db725370521c60354ac9c9b34_0
2025-07-08 18:39:14,632 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 3ce96a848532d1cf7e9ff713f98e371cf54851316822ae365545c45aeb741d04a32a8d2c592487a765186f610bf0d7a04b343a6db725370521c60354ac9c9b34_0
2025-07-08 18:39:14,633 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6Ik... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('QUANTONIUM_OS_DOCUMENTATION.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 3ce96a848532d1cf7e9ff713f98e371cf54851316822ae365545c45aeb741d04a32a8d2c592487a765186f610bf0d7a04b343a6db725370521c60354ac9c9b34_0
2025-07-08 18:39:14,634 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('analyze_global_usage.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.insecure-transport.requests.request-with-http') match_id = dda5c9c7317f8fa94b40de56dbdedf4b842aca103b1969027a09be26b3f76276224a4d375c3bcbfcd295d0f079fc1dffb9b8e2543169e86d509935020b57638d_0
2025-07-08 18:39:14,634 - semgrep.rule_match - DEBUG - match_key = ('"http://ip-api.com/json/"\n http://ip-api.com/json/ .*://127\\.0\\.0\\.1 .*://localhost http:// regex f\'http://ip-api.com/json/{ip_address}\' requests.get(f\'http://ip-api.com/json/{ip_address}\', ...) requests.Request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...) requests.request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...)', PosixPath('analyze_global_usage.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.insecure-transport.requests.request-with-http') match_id = a56c910277f27acf90dce445a2a6dab87c0c0285042541652d0ddaa2fad795a1fa318272656bb9c3f95867ef02b493c7f01877600f71eadcb6c1982efb7be385_0
2025-07-08 18:39:14,635 - semgrep.rule_match - DEBUG - match_key = ('"http://ip-api.com/json/"\n http://ip-api.com/json/ .*://127\\.0\\.0\\.1 .*://localhost http:// regex f\'http://ip-api.com/json/{ip_address}\' requests.get(f\'http://ip-api.com/json/{ip_address}\', ...) requests.Request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...) requests.request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...)', PosixPath('analyze_global_usage.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.insecure-transport.requests.request-with-http') match_id = a56c910277f27acf90dce445a2a6dab87c0c0285042541652d0ddaa2fad795a1fa318272656bb9c3f95867ef02b493c7f01877600f71eadcb6c1982efb7be385_0
2025-07-08 18:39:14,635 - semgrep.rule_match - DEBUG - match_key = ('"http://ip-api.com/json/"\n http://ip-api.com/json/ .*://127\\.0\\.0\\.1 .*://localhost http:// regex f\'http://ip-api.com/json/{ip_address}\' requests.get(f\'http://ip-api.com/json/{ip_address}\', ...) requests.Request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...) requests.request($METHOD, f\'http://ip-api.com/json/{ip_address}\', ...)', PosixPath('analyze_global_usage.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.insecure-transport.requests.request-with-http') match_id = a56c910277f27acf90dce445a2a6dab87c0c0285042541652d0ddaa2fad795a1fa318272656bb9c3f95867ef02b493c7f01877600f71eadcb6c1982efb7be385_0
2025-07-08 18:39:14,636 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('api/resonance_metrics.py'), 'config..semgrep.vendored-rules.python.lang.security.use-defusedcsv') match_id = bc194615467d53d5c1a77b83cd7083545862202bddfb961ba1a72affad79e642971eaa5eccd0bfb305f22ade54ee38ee50c0ec51353d6440bdc3add37aff4374_0
2025-07-08 18:39:14,636 - semgrep.rule_match - DEBUG - match_key = ('csv.writer(...) defusedcsv.writer(...)', PosixPath('api/resonance_metrics.py'), 'config..semgrep.vendored-rules.python.lang.security.use-defusedcsv') match_id = 5da91803928696f52cdf1ab1bbbe316f18217cbe7d09aed04a1b698e610f4b18da5765930e7322ab08b8f072ef15e6cdb922ee63d2993c6028df2b8ce628c352_0
2025-07-08 18:39:14,636 - semgrep.rule_match - DEBUG - match_key = ('csv.writer(...) defusedcsv.writer(...)', PosixPath('api/resonance_metrics.py'), 'config..semgrep.vendored-rules.python.lang.security.use-defusedcsv') match_id = 5da91803928696f52cdf1ab1bbbe316f18217cbe7d09aed04a1b698e610f4b18da5765930e7322ab08b8f072ef15e6cdb922ee63d2993c6028df2b8ce628c352_0
2025-07-08 18:39:14,637 - semgrep.rule_match - DEBUG - match_key = ('csv.writer(...) defusedcsv.writer(...)', PosixPath('api/resonance_metrics.py'), 'config..semgrep.vendored-rules.python.lang.security.use-defusedcsv') match_id = 5da91803928696f52cdf1ab1bbbe316f18217cbe7d09aed04a1b698e610f4b18da5765930e7322ab08b8f072ef15e6cdb922ee63d2993c6028df2b8ce628c352_0
2025-07-08 18:39:14,637 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = e2644ad455a212799a0730b8ad76663d78adb024c9ffa8f9895fb57dd489e272a3f3cc1be65db0794f59188d07a860995892dbeae860c39d9e44d8f55bc0178b_0
2025-07-08 18:39:14,638 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-07-08 18:39:14,638 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-07-08 18:39:14,638 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-07-08 18:39:14,639 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = cfb6158608af9c86457c59e94ffbcdb39452758bd633590adefc7a0f2612a6ac1688afb5fd5f3ef8e474e3331b021796a3485351570fa2be18d24758991fd7a5_0
2025-07-08 18:39:14,640 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_0
2025-07-08 18:39:14,640 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_0
2025-07-08 18:39:14,641 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_0
2025-07-08 18:39:14,641 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = cfb6158608af9c86457c59e94ffbcdb39452758bd633590adefc7a0f2612a6ac1688afb5fd5f3ef8e474e3331b021796a3485351570fa2be18d24758991fd7a5_0
2025-07-08 18:39:14,642 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_0
2025-07-08 18:39:14,643 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_0
2025-07-08 18:39:14,643 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('apps/bridge.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 68acd8c71bcf02d3676cf601d1a532e558e3f1b6d643b470a0eb69cc5699758271eba00fffcb2e78b8b9e6afb4805983c25992b4323653f150fdc9c5d70c3a02_1
2025-07-08 18:39:14,644 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('auth/jwt_auth.py'), 'config..semgrep.vendored-rules.python.jwt.security.unverified-jwt-decode') match_id = e42c7ecc10f0814aabababf664d0ef450904253ae971024e274b7f8ad3b4caf405d38251887a8885d006cfa80ab35f803523ed0e8e857ad4f01086da0fb404a0_0
2025-07-08 18:39:14,644 - semgrep.rule_match - DEBUG - match_key = ('False False False\n $OPTS = {..., "verify_signature": False, ...}\n...\njwt.decode(..., options=$OPTS, ...)\n False False False\n jwt.decode(..., options={..., "verify_signature": False, ...}, ...)\n', PosixPath('auth/jwt_auth.py'), 'config..semgrep.vendored-rules.python.jwt.security.unverified-jwt-decode') match_id = 7872b1ee153d5624d62ca3436cf839f2d9d7361a56b1c62fe03c597dde33711b147e783b2cbfefa3e8f9369cd1cb385301f6e6cbe09d2be0d3f49b346e988e71_0
2025-07-08 18:39:14,645 - semgrep.rule_match - DEBUG - match_key = ('False False False\n $OPTS = {..., "verify_signature": False, ...}\n...\njwt.decode(..., options=$OPTS, ...)\n False False False\n jwt.decode(..., options={..., "verify_signature": False, ...}, ...)\n', PosixPath('auth/jwt_auth.py'), 'config..semgrep.vendored-rules.python.jwt.security.unverified-jwt-decode') match_id = 7872b1ee153d5624d62ca3436cf839f2d9d7361a56b1c62fe03c597dde33711b147e783b2cbfefa3e8f9369cd1cb385301f6e6cbe09d2be0d3f49b346e988e71_0
2025-07-08 18:39:14,645 - semgrep.rule_match - DEBUG - match_key = ('False False False\n $OPTS = {..., "verify_signature": False, ...}\n...\njwt.decode(..., options=$OPTS, ...)\n False False False\n jwt.decode(..., options={..., "verify_signature": False, ...}, ...)\n', PosixPath('auth/jwt_auth.py'), 'config..semgrep.vendored-rules.python.jwt.security.unverified-jwt-decode') match_id = 7872b1ee153d5624d62ca3436cf839f2d9d7361a56b1c62fe03c597dde33711b147e783b2cbfefa3e8f9369cd1cb385301f6e6cbe09d2be0d3f49b346e988e71_0
2025-07-08 18:39:14,646 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('core/encryption/entropy_qrng.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 5ae7528ecf56fa0598c21b9fcf25dac4d58ca988fe0f8cabb8ea71fc85e101502065a8a7d1cf0861f01671efc8290dd5dbb9361d6afcd15a72988b623c7eaec8_0
2025-07-08 18:39:14,647 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('core/encryption/entropy_qrng.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 174bcafd56fed61c77ac8af2aaa66e5be17cefb222399c2b3a03e5a56e04d02894491dfa429a06f29ca10620aca5c6a38426307980279e266a54ffb71be789f7_0
2025-07-08 18:39:14,647 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('core/encryption/entropy_qrng.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 174bcafd56fed61c77ac8af2aaa66e5be17cefb222399c2b3a03e5a56e04d02894491dfa429a06f29ca10620aca5c6a38426307980279e266a54ffb71be789f7_0
2025-07-08 18:39:14,647 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('core/encryption/entropy_qrng.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 174bcafd56fed61c77ac8af2aaa66e5be17cefb222399c2b3a03e5a56e04d02894491dfa429a06f29ca10620aca5c6a38426307980279e266a54ffb71be789f7_0
2025-07-08 18:39:14,648 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('docs/authentication_guide.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = cc2b92e024195eb0ff794b28d31c03422c072e3d0cb27dff223cbd3c87207a7eebd8db7f40bb7d3d0b1bebe5ed07cb43014e737b6a035de6fc3df6bbb31df2a5_0
2025-07-08 18:39:14,648 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('docs/authentication_guide.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = e3214e5196e0bd0f4767790a0e9528846ebe981b374d3634052cf57d63c5ef69a97db4b8323840dc7f2a459083f721efad38ca58100e033927630876a860d791_0
2025-07-08 18:39:14,649 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('docs/authentication_guide.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = e3214e5196e0bd0f4767790a0e9528846ebe981b374d3634052cf57d63c5ef69a97db4b8323840dc7f2a459083f721efad38ca58100e033927630876a860d791_0
2025-07-08 18:39:14,649 - semgrep.rule_match - DEBUG - match_key = ('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('docs/authentication_guide.md'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = e3214e5196e0bd0f4767790a0e9528846ebe981b374d3634052cf57d63c5ef69a97db4b8323840dc7f2a459083f721efad38ca58100e033927630876a860d791_0
2025-07-08 18:39:14,650 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('download_eigen.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dynamic-urllib-use-detected') match_id = 315acb10f0a0202b44ccf14630eda186adfe909b56f969022f7ba7e822185c2a9401680f29fcf5023e6c2f13109711e4ab4049c5b1ec817d40b65abeafe57049_0
2025-07-08 18:39:14,650 - semgrep.rule_match - DEBUG - match_key = ('$OPENER = urllib.FancyURLopener(...)\n...\n $OPENER = urllib.URLopener(...)\n...\n $OPENER = urllib.request.FancyURLopener(...)\n...\n $OPENER = urllib.request.URLopener(...)\n...\n $OPENER.open(...) $OPENER.retrieve(...) urllib.request.urlopen(...) urllib.request.urlretrieve(...) urllib.urlopen(...) urllib.urlretrieve(...) $OPENER.$W("...") urllib.$W("...") urllib.request.$W("...")', PosixPath('download_eigen.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dynamic-urllib-use-detected') match_id = df0fb8b25b5d7e2e2377c87d131b49626584475d3ad8219c9b67f19d0f56b1169ef665e926f4e6dd84ea4d05b76b895e6a24d12cce877921724f94efd7249f8f_0
2025-07-08 18:39:14,650 - semgrep.rule_match - DEBUG - match_key = ('$OPENER = urllib.FancyURLopener(...)\n...\n $OPENER = urllib.URLopener(...)\n...\n $OPENER = urllib.request.FancyURLopener(...)\n...\n $OPENER = urllib.request.URLopener(...)\n...\n $OPENER.open(...) $OPENER.retrieve(...) urllib.request.urlopen(...) urllib.request.urlretrieve(...) urllib.urlopen(...) urllib.urlretrieve(...) $OPENER.$W("...") urllib.$W("...") urllib.request.$W("...")', PosixPath('download_eigen.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dynamic-urllib-use-detected') match_id = df0fb8b25b5d7e2e2377c87d131b49626584475d3ad8219c9b67f19d0f56b1169ef665e926f4e6dd84ea4d05b76b895e6a24d12cce877921724f94efd7249f8f_0
2025-07-08 18:39:14,651 - semgrep.rule_match - DEBUG - match_key = ('$OPENER = urllib.FancyURLopener(...)\n...\n $OPENER = urllib.URLopener(...)\n...\n $OPENER = urllib.request.FancyURLopener(...)\n...\n $OPENER = urllib.request.URLopener(...)\n...\n $OPENER.open(...) $OPENER.retrieve(...) urllib.request.urlopen(...) urllib.request.urlretrieve(...) urllib.urlopen(...) urllib.urlretrieve(...) $OPENER.$W("...") urllib.$W("...") urllib.request.$W("...")', PosixPath('download_eigen.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dynamic-urllib-use-detected') match_id = df0fb8b25b5d7e2e2377c87d131b49626584475d3ad8219c9b67f19d0f56b1169ef665e926f4e6dd84ea4d05b76b895e6a24d12cce877921724f94efd7249f8f_0
2025-07-08 18:39:14,651 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-sha1') match_id = 66fc06d7e690cc7335f46c912ecb22fcd040f6b2813b82d992680412c2dd71de2b110452466022150e76f396a0fe2454061749031eb77a4f4c7fee0ea899be7c_0
2025-07-08 18:39:14,652 - semgrep.rule_match - DEBUG - match_key = ('hashlib.sha1(...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-sha1') match_id = 2bfc50cc12b9782dc1e964d7e85ddb59411683308a072084c967755e1cdcadeb17d557c7c4be8d352c8a5562f5df8c0429fd0fdc71fefd29369617fb440afd3d_0
2025-07-08 18:39:14,652 - semgrep.rule_match - DEBUG - match_key = ('hashlib.sha1(...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-sha1') match_id = 2bfc50cc12b9782dc1e964d7e85ddb59411683308a072084c967755e1cdcadeb17d557c7c4be8d352c8a5562f5df8c0429fd0fdc71fefd29369617fb440afd3d_0
2025-07-08 18:39:14,652 - semgrep.rule_match - DEBUG - match_key = ('hashlib.sha1(...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-sha1') match_id = 2bfc50cc12b9782dc1e964d7e85ddb59411683308a072084c967755e1cdcadeb17d557c7c4be8d352c8a5562f5df8c0429fd0fdc71fefd29369617fb440afd3d_0
2025-07-08 18:39:14,653 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 21356b4dd5c2f77736e9baa51e59544fe54ed6bd4d7a29497e96f0f9f1a11aee43c22ea49e2f51de23c621acb2e33a3a4991e2015662d55d9fe2b42fc9b8640a_0
2025-07-08 18:39:14,653 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 277076527d36469f42d418c34b47097566dc901f96ebba2b01a07b144bac4c7925717b89310c7576567efceb86351ad0fcbc506fde9dbff84f1b473ceaac2017_0
2025-07-08 18:39:14,654 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 277076527d36469f42d418c34b47097566dc901f96ebba2b01a07b144bac4c7925717b89310c7576567efceb86351ad0fcbc506fde9dbff84f1b473ceaac2017_0
2025-07-08 18:39:14,654 - semgrep.rule_match - DEBUG - match_key = ('hashlib.md5(...) hashlib.md5(..., usedforsecurity=False, ...)', PosixPath('encryption/bloom_filter.py'), 'config..semgrep.vendored-rules.python.lang.security.insecure-hash-algorithm-md5') match_id = 277076527d36469f42d418c34b47097566dc901f96ebba2b01a07b144bac4c7925717b89310c7576567efceb86351ad0fcbc506fde9dbff84f1b473ceaac2017_0
2025-07-08 18:39:14,654 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 88fe5476d6362a987c606a9d2742b91bdf552709ab4bf4f4d8491a0573b03ad58720cf507606f1adf58b8e1ef52d15cb254fd60175ce265fc6526b4517079210_0
2025-07-08 18:39:14,655 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 04f7bd7fdce1f6d848919d323a3a72cb6e79518c55c572c510ab86eb8af2010b28b9a793024f91fb630e51cacc1958e1c0ffde6d642595df0370c16ba67e7371_0
2025-07-08 18:39:14,655 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 04f7bd7fdce1f6d848919d323a3a72cb6e79518c55c572c510ab86eb8af2010b28b9a793024f91fb630e51cacc1958e1c0ffde6d642595df0370c16ba67e7371_0
2025-07-08 18:39:14,656 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 04f7bd7fdce1f6d848919d323a3a72cb6e79518c55c572c510ab86eb8af2010b28b9a793024f91fb630e51cacc1958e1c0ffde6d642595df0370c16ba67e7371_0
2025-07-08 18:39:14,656 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 5772c892365c4a73513e3b564416299e7e88691b852d55b80f8be0702a303e62cdf5f2225b6f9732f9961186ec80114f373655734817081de9cea1e6f9fca8c7_0
2025-07-08 18:39:14,657 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.run("...", shell=True, ...) subprocess.run(..., shell=True, ...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 6f7dc1aeb313635d0258ffa26e1c00e69f1772d40c4b605a3b3841c8045eb6871dcec723ac1ea9c743922a0d1bef6fe39e8193bbae441f9b241c318a8a8d6fed_0
2025-07-08 18:39:14,657 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.run("...", shell=True, ...) subprocess.run(..., shell=True, ...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 6f7dc1aeb313635d0258ffa26e1c00e69f1772d40c4b605a3b3841c8045eb6871dcec723ac1ea9c743922a0d1bef6fe39e8193bbae441f9b241c318a8a8d6fed_0
2025-07-08 18:39:14,658 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.run("...", shell=True, ...) subprocess.run(..., shell=True, ...)', PosixPath('final_gate_validation.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 6f7dc1aeb313635d0258ffa26e1c00e69f1772d40c4b605a3b3841c8045eb6871dcec723ac1ea9c743922a0d1bef6fe39e8193bbae441f9b241c318a8a8d6fed_0
2025-07-08 18:39:14,658 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82146d883d26172f8c5c2c5e18ff6db04f832831984a2cf8b722c47ed79b126f96682820e3865e1d0b38a8f32c56b7eb1ea33b63a5a558654a490fbf7820a21a_0
2025-07-08 18:39:14,659 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,659 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,659 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,660 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82146d883d26172f8c5c2c5e18ff6db04f832831984a2cf8b722c47ed79b126f96682820e3865e1d0b38a8f32c56b7eb1ea33b63a5a558654a490fbf7820a21a_0
2025-07-08 18:39:14,660 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,660 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,661 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_1
2025-07-08 18:39:14,661 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82146d883d26172f8c5c2c5e18ff6db04f832831984a2cf8b722c47ed79b126f96682820e3865e1d0b38a8f32c56b7eb1ea33b63a5a558654a490fbf7820a21a_0
2025-07-08 18:39:14,662 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,662 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_0
2025-07-08 18:39:14,663 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('final_green_wall_update.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 436dbacc4c22e1ec8f961937b0ffee94c9b887489aa758a0dc7f89b636bbe16b11f254b2b3d49699c757360f76d95ea9b3084eed17e0582af96a6c1243a6bf44_2
2025-07-08 18:39:14,663 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('fix_all_gates.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 2445911f1a647e519ac4adc8c05f996a9bf13dcf30680ca435cc993cd612a3660218fb885c5a5c75c6ad20ffdc84ec553adc17aef07fa72e5a29ab1aee03ac07_0
2025-07-08 18:39:14,664 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('fix_all_gates.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 22a6cf5527ab68edc386be7bff8fd1bef64e2b7ead552c33c24464c4d55a48214e88dc733ba963359aa09f4d75b06b8d38bb139d9d73d198e68aaa090c86d07a_0
2025-07-08 18:39:14,664 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('fix_all_gates.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 22a6cf5527ab68edc386be7bff8fd1bef64e2b7ead552c33c24464c4d55a48214e88dc733ba963359aa09f4d75b06b8d38bb139d9d73d198e68aaa090c86d07a_0
2025-07-08 18:39:14,665 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('fix_all_gates.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 22a6cf5527ab68edc386be7bff8fd1bef64e2b7ead552c33c24464c4d55a48214e88dc733ba963359aa09f4d75b06b8d38bb139d9d73d198e68aaa090c86d07a_0
2025-07-08 18:39:14,665 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('fix_green_wall.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-system-call-audit') match_id = 28d7d0fcf7f77da8c5ebb9e36c52925c6f61387735387babd443c1272ed4a6c191b9940523ab45e38056248522224c20008e294437340cbb7e73bf4f130358d3_0
2025-07-08 18:39:14,666 - semgrep.rule_match - DEBUG - match_key = ('$X = __import__("os")\n...\n$X.system(...)\n $X = __import__("os")\n...\n$Y = getattr($X, "system")\n...\n$Y(...)\n $X = __import__("os")\n...\ngetattr($X, "system")(...)\n $X = getattr(os, "system")\n...\n$X(...)\n __import__("os").system(...) getattr(__import__("os"), "system")(...) getattr(os, "system")(...) os.popen(...) os.popen2(...) os.popen3(...) os.popen4(...) os.system(...) os.$W("...", ...)', PosixPath('fix_green_wall.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-system-call-audit') match_id = 2baf2f0232051028588fbb61a3918c595ff304a3f949c1f61703ddca9951ea21c21f59e9e281b6a4ade2c640402f2888f5fd96379d957f1d95d160ad881518aa_0
2025-07-08 18:39:14,666 - semgrep.rule_match - DEBUG - match_key = ('$X = __import__("os")\n...\n$X.system(...)\n $X = __import__("os")\n...\n$Y = getattr($X, "system")\n...\n$Y(...)\n $X = __import__("os")\n...\ngetattr($X, "system")(...)\n $X = getattr(os, "system")\n...\n$X(...)\n __import__("os").system(...) getattr(__import__("os"), "system")(...) getattr(os, "system")(...) os.popen(...) os.popen2(...) os.popen3(...) os.popen4(...) os.system(...) os.$W("...", ...)', PosixPath('fix_green_wall.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-system-call-audit') match_id = 2baf2f0232051028588fbb61a3918c595ff304a3f949c1f61703ddca9951ea21c21f59e9e281b6a4ade2c640402f2888f5fd96379d957f1d95d160ad881518aa_0
2025-07-08 18:39:14,667 - semgrep.rule_match - DEBUG - match_key = ('$X = __import__("os")\n...\n$X.system(...)\n $X = __import__("os")\n...\n$Y = getattr($X, "system")\n...\n$Y(...)\n $X = __import__("os")\n...\ngetattr($X, "system")(...)\n $X = getattr(os, "system")\n...\n$X(...)\n __import__("os").system(...) getattr(__import__("os"), "system")(...) getattr(os, "system")(...) os.popen(...) os.popen2(...) os.popen3(...) os.popen4(...) os.system(...) os.$W("...", ...)', PosixPath('fix_green_wall.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-system-call-audit') match_id = 2baf2f0232051028588fbb61a3918c595ff304a3f949c1f61703ddca9951ea21c21f59e9e281b6a4ade2c640402f2888f5fd96379d957f1d95d160ad881518aa_0
2025-07-08 18:39:14,667 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 3a15a1072d479cae2665e4a901970afcb2ff631b74aa50279c4aea449ce817e6ff4d25b4624efe73ace0b49f0d6333ec66f91e1636f2e30f56f292d99eedc3cf_0
2025-07-08 18:39:14,668 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d023b52b51b746bd409927bd9896ec9799dc5b2c2397f558ea80c01bd51a15d2b6b1216a6a5fa8cacf4d18b8b016595ea12058ffb46c60b43dbd779dbcb2a1e7_0
2025-07-08 18:39:14,669 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d023b52b51b746bd409927bd9896ec9799dc5b2c2397f558ea80c01bd51a15d2b6b1216a6a5fa8cacf4d18b8b016595ea12058ffb46c60b43dbd779dbcb2a1e7_0
2025-07-08 18:39:14,669 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d023b52b51b746bd409927bd9896ec9799dc5b2c2397f558ea80c01bd51a15d2b6b1216a6a5fa8cacf4d18b8b016595ea12058ffb46c60b43dbd779dbcb2a1e7_0
2025-07-08 18:39:14,670 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ff1d3918d8d79249a4ff26e417633421b37d41f0abbeb95bcc808a3b2cb52350c9807664316d0a7e5ab2e367ee6492a2157ddf35a37fd348af3104cfc602eab1_0
2025-07-08 18:39:14,670 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 20098dccacb1ce449401a46ed7c9a0163a935dcf814277296745a6cd0b3af415ad809e56c47631fb537fb695b93fac51b6bf03af928e683be1d6a52ba977df5f_0
2025-07-08 18:39:14,671 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 20098dccacb1ce449401a46ed7c9a0163a935dcf814277296745a6cd0b3af415ad809e56c47631fb537fb695b93fac51b6bf03af928e683be1d6a52ba977df5f_0
2025-07-08 18:39:14,671 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 20098dccacb1ce449401a46ed7c9a0163a935dcf814277296745a6cd0b3af415ad809e56c47631fb537fb695b93fac51b6bf03af928e683be1d6a52ba977df5f_0
2025-07-08 18:39:14,672 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = dbd0595295c9cff6730bec84ef0941be3725093ce14d720f511cbaefffb49247b14d696d6060aec63d12a21a576afc3cbb195ebfb66979a872195c5c1b9b5e4b_0
2025-07-08 18:39:14,673 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0af2f0ef1f69a09b94ebab547843c4de4e8b08ef48c689319e2da1abc576eaea33b6f633a94552d140bb9dc50cb1b2f149d9113aa803a70edef740af38153a6a_0
2025-07-08 18:39:14,673 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0af2f0ef1f69a09b94ebab547843c4de4e8b08ef48c689319e2da1abc576eaea33b6f633a94552d140bb9dc50cb1b2f149d9113aa803a70edef740af38153a6a_0
2025-07-08 18:39:14,674 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('fixed-encrypt.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0af2f0ef1f69a09b94ebab547843c4de4e8b08ef48c689319e2da1abc576eaea33b6f633a94552d140bb9dc50cb1b2f149d9113aa803a70edef740af38153a6a_0
2025-07-08 18:39:14,674 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('integrate_quantonium.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = f45d10641553adf9c2ed7d901ab225ac08065fa83381d329882c541832953aa05d328490634a7ab8da2a6ffedd4997de3cc0e0b9070e587de83e3845237ef04d_0
2025-07-08 18:39:14,675 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('integrate_quantonium.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 9a0d3acf99dc706b05954e86b9b32f3dc6b309d9abc24724e8faf2e52e64e93eec8ebc16b2d77ec61a2733832dfdcbbdbae303998bf80141ca539892727d0f28_0
2025-07-08 18:39:14,675 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('integrate_quantonium.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 9a0d3acf99dc706b05954e86b9b32f3dc6b309d9abc24724e8faf2e52e64e93eec8ebc16b2d77ec61a2733832dfdcbbdbae303998bf80141ca539892727d0f28_0
2025-07-08 18:39:14,678 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('integrate_quantonium.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 9a0d3acf99dc706b05954e86b9b32f3dc6b309d9abc24724e8faf2e52e64e93eec8ebc16b2d77ec61a2733832dfdcbbdbae303998bf80141ca539892727d0f28_0
2025-07-08 18:39:14,679 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 2b1b519d5ad8097d77e3205619f402d253bacb3c62221241bd9a9ad569fe19d776efda76f3262b270055d8714ee39cb9976d64eadacb303d3b9f6bbec6f5502d_0
2025-07-08 18:39:14,679 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_0
2025-07-08 18:39:14,680 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_0
2025-07-08 18:39:14,680 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_0
2025-07-08 18:39:14,681 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 2b1b519d5ad8097d77e3205619f402d253bacb3c62221241bd9a9ad569fe19d776efda76f3262b270055d8714ee39cb9976d64eadacb303d3b9f6bbec6f5502d_0
2025-07-08 18:39:14,681 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_0
2025-07-08 18:39:14,682 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_0
2025-07-08 18:39:14,683 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 3d7bad246f15078b72115d28f2bde07fc18c98bafd9ef5af80b4b9627a043766a9bfed4631344c7284211778892c802496d6dbc6aaa546fb631c793505d789d8_1
2025-07-08 18:39:14,683 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6f301bc40ee3ed2cbd66afc57dd2c07de29dd90cf6c45381b4e5f4e8201ef43b37f0d6c5307bb0fb0846a4d6193defee901970def011d69e9e46543daefd10d9_0
2025-07-08 18:39:14,684 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,684 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,685 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,685 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6f301bc40ee3ed2cbd66afc57dd2c07de29dd90cf6c45381b4e5f4e8201ef43b37f0d6c5307bb0fb0846a4d6193defee901970def011d69e9e46543daefd10d9_0
2025-07-08 18:39:14,686 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,687 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,687 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_1
2025-07-08 18:39:14,688 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6f301bc40ee3ed2cbd66afc57dd2c07de29dd90cf6c45381b4e5f4e8201ef43b37f0d6c5307bb0fb0846a4d6193defee901970def011d69e9e46543daefd10d9_0
2025-07-08 18:39:14,688 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,689 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_0
2025-07-08 18:39:14,690 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 4dea324ac09209bd376961a3440f0a2480ad56654ed235dc14b37552277e9e19cd0576ddd84016485004b236d019230ef5747ce8e01e29cd332d4862abee36f0_2
2025-07-08 18:39:14,690 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.subprocess-injection') match_id = 42d9efb7e69aa1373d604e43bebcc9f7d33bd81231477fe9e2c9cc975d2dcf49e8ac9fa26c49cfae633082a4b359079bd27cf927159274db9c389d0f65a87931_0
2025-07-08 18:39:14,691 - semgrep.rule_match - DEBUG - match_key = ('$CMD = ["...", ...]\n...\nsubprocess.Popen($CMD, ...)\n subprocess.Popen("...", ...) subprocess.Popen(...) subprocess.Popen(["...", ...], ...) $INTERPRETER ^(python|python\\d)$ subprocess.Popen(["$INTERPRETER", ...], ...) $SHELL ^(sh|bash|ksh|csh|tcsh|zsh)$ subprocess.Popen(["$SHELL", "-c", ...], ...) $ROUTEVAR @$APP.route($ROUTE, ...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.subprocess-injection') match_id = 2a23537aa19f34ff3fec16d81172b4ec27ede5b34d2b3496adbcd9d7262291d0ceef8acdc1320d1e24693ff3214c0be16f35855275e70377820d21a7230cb0b0_0
2025-07-08 18:39:14,692 - semgrep.rule_match - DEBUG - match_key = ('$CMD = ["...", ...]\n...\nsubprocess.Popen($CMD, ...)\n subprocess.Popen("...", ...) subprocess.Popen(...) subprocess.Popen(["...", ...], ...) $INTERPRETER ^(python|python\\d)$ subprocess.Popen(["$INTERPRETER", ...], ...) $SHELL ^(sh|bash|ksh|csh|tcsh|zsh)$ subprocess.Popen(["$SHELL", "-c", ...], ...) $ROUTEVAR @$APP.route($ROUTE, ...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.subprocess-injection') match_id = 2a23537aa19f34ff3fec16d81172b4ec27ede5b34d2b3496adbcd9d7262291d0ceef8acdc1320d1e24693ff3214c0be16f35855275e70377820d21a7230cb0b0_0
2025-07-08 18:39:14,692 - semgrep.rule_match - DEBUG - match_key = ('$CMD = ["...", ...]\n...\nsubprocess.Popen($CMD, ...)\n subprocess.Popen("...", ...) subprocess.Popen(...) subprocess.Popen(["...", ...], ...) $INTERPRETER ^(python|python\\d)$ subprocess.Popen(["$INTERPRETER", ...], ...) $SHELL ^(sh|bash|ksh|csh|tcsh|zsh)$ subprocess.Popen(["$SHELL", "-c", ...], ...) $ROUTEVAR @$APP.route($ROUTE, ...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.subprocess-injection') match_id = 2a23537aa19f34ff3fec16d81172b4ec27ede5b34d2b3496adbcd9d7262291d0ceef8acdc1320d1e24693ff3214c0be16f35855275e70377820d21a7230cb0b0_0
2025-07-08 18:39:14,693 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.dangerous-subprocess-use') match_id = eebb95d9149c6c1defc1d1364a457673bbe5ee535163ae20fc070ccb87bf3516cd4615837d4a236b7098a6628f25647b14cfa64b69129d868fb8ebe25cb28487_0
2025-07-08 18:39:14,694 - semgrep.rule_match - DEBUG - match_key = ('[sys.executable app_script] subprocess.Popen("...", ...) subprocess.Popen([sys.executable app_script], ...) subprocess.Popen(("...",...), ...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/", [sys.executable app_script]) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen(("=~/(python)/", [sys.executable app_script]),...) subprocess.Popen(["=~/(python)/", [sys.executable app_script]],...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]), ...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]], ...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...) $METHOD (get|post|put|patch|delete|head) class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n def $METHOD(self, $REQ, ...):\n  ...\n @rest_framework.decorators.api_view(...)\ndef Popen($REQ, ...):\n  ...\n $REQ.DATA.get(...) $REQ.DATA[...] $REQ.FILES.get(...) $REQ.FILES[...] $REQ.POST.get(...) $REQ.POST[...] $REQ.QUERY_PARAMS.get(...) $REQ.QUERY_PARAMS[...] $REQ.content_type $REQ.content_type $REQ.data.get(...) $REQ.data[...] $REQ.query_params.get(...) $REQ.query_params[...] $REQ.stream $REQ.stream $REQ.$ANYTHING $REQ.dbsession @pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n $ROUTEVAR @$APP.route(...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...] class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n self.headers.get(...) self.headers[...] self.path self.requestline self.rfile def Popen(request, ...):\n  ...\n request.$PROPERTY.get(...) request.$PROPERTY[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.dangerous-subprocess-use') match_id = b0cd41d49a62bee21aa5a8c6fb6cceb2e72cbe71ac17880e85296e80c3d296b0fd127a0a2e364521aea89277dbfdf1f078e596a392adfc5fe278f1be7a1dcb34_0
2025-07-08 18:39:14,694 - semgrep.rule_match - DEBUG - match_key = ('[sys.executable app_script] subprocess.Popen("...", ...) subprocess.Popen([sys.executable app_script], ...) subprocess.Popen(("...",...), ...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/", [sys.executable app_script]) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen(("=~/(python)/", [sys.executable app_script]),...) subprocess.Popen(["=~/(python)/", [sys.executable app_script]],...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]), ...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]], ...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...) $METHOD (get|post|put|patch|delete|head) class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n def $METHOD(self, $REQ, ...):\n  ...\n @rest_framework.decorators.api_view(...)\ndef Popen($REQ, ...):\n  ...\n $REQ.DATA.get(...) $REQ.DATA[...] $REQ.FILES.get(...) $REQ.FILES[...] $REQ.POST.get(...) $REQ.POST[...] $REQ.QUERY_PARAMS.get(...) $REQ.QUERY_PARAMS[...] $REQ.content_type $REQ.content_type $REQ.data.get(...) $REQ.data[...] $REQ.query_params.get(...) $REQ.query_params[...] $REQ.stream $REQ.stream $REQ.$ANYTHING $REQ.dbsession @pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n $ROUTEVAR @$APP.route(...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...] class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n self.headers.get(...) self.headers[...] self.path self.requestline self.rfile def Popen(request, ...):\n  ...\n request.$PROPERTY.get(...) request.$PROPERTY[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.dangerous-subprocess-use') match_id = b0cd41d49a62bee21aa5a8c6fb6cceb2e72cbe71ac17880e85296e80c3d296b0fd127a0a2e364521aea89277dbfdf1f078e596a392adfc5fe278f1be7a1dcb34_0
2025-07-08 18:39:14,695 - semgrep.rule_match - DEBUG - match_key = ('[sys.executable app_script] subprocess.Popen("...", ...) subprocess.Popen([sys.executable app_script], ...) subprocess.Popen(("...",...), ...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/", [sys.executable app_script]) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen(("=~/(python)/", [sys.executable app_script]),...) subprocess.Popen(["=~/(python)/", [sys.executable app_script]],...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]), ...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", [sys.executable app_script]], ...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...) $METHOD (get|post|put|patch|delete|head) class $VIEW(..., rest_framework.generics.GenericAPIView, ...):\n  ...                              \n class $VIEW(..., rest_framework.views.APIView, ...):\n  ...\n def $METHOD(self, $REQ, ...):\n  ...\n @rest_framework.decorators.api_view(...)\ndef Popen($REQ, ...):\n  ...\n $REQ.DATA.get(...) $REQ.DATA[...] $REQ.FILES.get(...) $REQ.FILES[...] $REQ.POST.get(...) $REQ.POST[...] $REQ.QUERY_PARAMS.get(...) $REQ.QUERY_PARAMS[...] $REQ.content_type $REQ.content_type $REQ.data.get(...) $REQ.data[...] $REQ.query_params.get(...) $REQ.query_params[...] $REQ.stream $REQ.stream $REQ.$ANYTHING $REQ.dbsession @pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n $ROUTEVAR @$APP.route(...)\ndef Popen(..., $ROUTEVAR, ...):\n  ...\n flask.request.args.get(...) flask.request.args[...] flask.request.cookies.get(...) flask.request.cookies[...] flask.request.data flask.request.form.get(...) flask.request.form[...] flask.request.full_path flask.request.get_json() flask.request.headers.get(...) flask.request.headers[...] flask.request.json flask.request.stream flask.request.url flask.request.values.get(...) flask.request.values[...] flask.request.view_args.get(...) flask.request.view_args[...] class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.DatagramRequestHandler, ...):\n  ...\n class $SERVER(..., http.server.StreamRequestHandler, ...):\n  ...\n self.headers.get(...) self.headers[...] self.path self.requestline self.rfile def Popen(request, ...):\n  ...\n request.$PROPERTY.get(...) request.$PROPERTY[...]', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.lang.security.dangerous-subprocess-use') match_id = b0cd41d49a62bee21aa5a8c6fb6cceb2e72cbe71ac17880e85296e80c3d296b0fd127a0a2e364521aea89277dbfdf1f078e596a392adfc5fe278f1be7a1dcb34_0
2025-07-08 18:39:14,695 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.render-template-string') match_id = ee6562019833e1f8c3f061d413e69eded90d24c137f124ac4e78ca81971b27008fc04bd7d9074c6fa147edb3f56ee1396bd3d240b4e6cda1eaaf561e76993c86_0
2025-07-08 18:39:14,696 - semgrep.rule_match - DEBUG - match_key = ('flask.render_template_string(...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.render-template-string') match_id = 68c7b590302825733cbddcbcb1b156726947d01e1180ca574f8a162f13ea01337ec95b25e75625dce7499791bae34798199d51ff25cbca65cb3bc7807804343a_0
2025-07-08 18:39:14,697 - semgrep.rule_match - DEBUG - match_key = ('flask.render_template_string(...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.render-template-string') match_id = 68c7b590302825733cbddcbcb1b156726947d01e1180ca574f8a162f13ea01337ec95b25e75625dce7499791bae34798199d51ff25cbca65cb3bc7807804343a_0
2025-07-08 18:39:14,697 - semgrep.rule_match - DEBUG - match_key = ('flask.render_template_string(...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.render-template-string') match_id = 68c7b590302825733cbddcbcb1b156726947d01e1180ca574f8a162f13ea01337ec95b25e75625dce7499791bae34798199d51ff25cbca65cb3bc7807804343a_0
2025-07-08 18:39:14,698 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = f5a1d78d28043340433dedc0a20165e63b50d9aa4305aede97be74105c8207b5b89db08fa6703decc4ec27aafa081254be07d38814f40c19f447cf4721551845_0
2025-07-08 18:39:14,699 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-07-08 18:39:14,699 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-07-08 18:39:14,700 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-07-08 18:39:14,701 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = f5a1d78d28043340433dedc0a20165e63b50d9aa4305aede97be74105c8207b5b89db08fa6703decc4ec27aafa081254be07d38814f40c19f447cf4721551845_0
2025-07-08 18:39:14,701 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-07-08 18:39:14,702 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-07-08 18:39:14,703 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_1
2025-07-08 18:39:14,703 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 090ab1704dd143718ec99ed174e6a766cd5f9d98ecd4f7f64b0630f7adee33bfda2bf2918c8e77d865d8f1e5dc10219523a0c12babb4cd3b31e8c3dafc39e64f_0
2025-07-08 18:39:14,704 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.check_call(*$ARR, ...) subprocess.check_call([*$ARR, ...]) subprocess.check_call("...", ...) subprocess.check_call(("...",...), ...) subprocess.check_call(...) subprocess.check_call(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.check_call("=~/(python)/","...",...) subprocess.check_call("=~/(python)/",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.check_call(("=~/(python)/","...",...),...) subprocess.check_call(("=~/(python)/",...),...) subprocess.check_call(["=~/(python)/",...],...) subprocess.check_call(["=~/(python)/","...",...],...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82f36b1375179e80e53bf0856282aecf8c2a5642693b4bb8a6fa3da38d6091a8930244c7201e44f685fffb58c39d234cac70bcf847dc8c74303447d3203434a5_0
2025-07-08 18:39:14,704 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.check_call(*$ARR, ...) subprocess.check_call([*$ARR, ...]) subprocess.check_call("...", ...) subprocess.check_call(("...",...), ...) subprocess.check_call(...) subprocess.check_call(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.check_call("=~/(python)/","...",...) subprocess.check_call("=~/(python)/",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.check_call(("=~/(python)/","...",...),...) subprocess.check_call(("=~/(python)/",...),...) subprocess.check_call(["=~/(python)/",...],...) subprocess.check_call(["=~/(python)/","...",...],...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82f36b1375179e80e53bf0856282aecf8c2a5642693b4bb8a6fa3da38d6091a8930244c7201e44f685fffb58c39d234cac70bcf847dc8c74303447d3203434a5_0
2025-07-08 18:39:14,704 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.check_call(*$ARR, ...) subprocess.check_call([*$ARR, ...]) subprocess.check_call("...", ...) subprocess.check_call(("...",...), ...) subprocess.check_call(...) subprocess.check_call(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.check_call("=~/(python)/","...",...) subprocess.check_call("=~/(python)/",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.check_call("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.check_call(("=~/(python)/","...",...),...) subprocess.check_call(("=~/(python)/",...),...) subprocess.check_call(["=~/(python)/",...],...) subprocess.check_call(["=~/(python)/","...",...],...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.check_call(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.check_call(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 82f36b1375179e80e53bf0856282aecf8c2a5642693b4bb8a6fa3da38d6091a8930244c7201e44f685fffb58c39d234cac70bcf847dc8c74303447d3203434a5_0
2025-07-08 18:39:14,705 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = d869181fd870a81d6a715ee4d21f18b2bcd61c02f9b389de68bb3a65b7801bc765ab3ee17931301af840a64236f91ea0815cd02643d4b63d519fd2ee726d22e5_0
2025-07-08 18:39:14,705 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.check_call("...", shell=True, ...) subprocess.check_call(..., shell=True, ...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 442f1c2766caf9d5c61af696511f575935ce07f0b7abb7b173f8482fe1cd1d469afd64f212547e96fd5ae5e2f1a139d43494a0b1d164be74a3101ba2d36152fb_0
2025-07-08 18:39:14,706 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.check_call("...", shell=True, ...) subprocess.check_call(..., shell=True, ...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 442f1c2766caf9d5c61af696511f575935ce07f0b7abb7b173f8482fe1cd1d469afd64f212547e96fd5ae5e2f1a139d43494a0b1d164be74a3101ba2d36152fb_0
2025-07-08 18:39:14,706 - semgrep.rule_match - DEBUG - match_key = ('True True True \n subprocess.check_call("...", shell=True, ...) subprocess.check_call(..., shell=True, ...)', PosixPath('prepare_for_deploy.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.subprocess-shell-true') match_id = 442f1c2766caf9d5c61af696511f575935ce07f0b7abb7b173f8482fe1cd1d469afd64f212547e96fd5ae5e2f1a139d43494a0b1d164be74a3101ba2d36152fb_0
2025-07-08 18:39:14,707 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.nan-injection') match_id = 5363ccfc5495a958c469e9fbd0653f7b7bf8dfe7dd55c307e30ed3f082ed62bd37a6d4ba1e8958d5d71e41bb290e5745d1b1f37894b9d7baaa9256017477c8e8_0
2025-07-08 18:39:14,707 - semgrep.rule_match - DEBUG - match_key = ('$ROUTEVAR @$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n flask.request.form.get(...) flask.request.form[...] bool(...) complex(...) float(...)', PosixPath('routes.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.nan-injection') match_id = 14f2f76df0469102daa5555213d756fb7cbada9284bd4c5c41afd882f6959dc3dc4f79570ffc186c41731e0f03eaf4b2d785ee375302a4f0a501c8c966765f7c_0
2025-07-08 18:39:14,708 - semgrep.rule_match - DEBUG - match_key = ('$ROUTEVAR @$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n flask.request.form.get(...) flask.request.form[...] bool(...) complex(...) float(...)', PosixPath('routes.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.nan-injection') match_id = 14f2f76df0469102daa5555213d756fb7cbada9284bd4c5c41afd882f6959dc3dc4f79570ffc186c41731e0f03eaf4b2d785ee375302a4f0a501c8c966765f7c_0
2025-07-08 18:39:14,709 - semgrep.rule_match - DEBUG - match_key = ('$ROUTEVAR @$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n flask.request.form.get(...) flask.request.form[...] bool(...) complex(...) float(...)', PosixPath('routes.py'), 'config..semgrep.vendored-rules.python.flask.security.injection.nan-injection') match_id = 14f2f76df0469102daa5555213d756fb7cbada9284bd4c5c41afd882f6959dc3dc4f79570ffc186c41731e0f03eaf4b2d785ee375302a4f0a501c8c966765f7c_0
2025-07-08 18:39:14,709 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b28f7db3c90a29668fb9ef3b3ef45b6eb460ad345dc5d03d6fa74efd608ac1cd108b050d20e1e38de7c9c16e37c8aacce28132365aed04466d70eea105323521_0
2025-07-08 18:39:14,710 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") % (...), ...)\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") + ..., ... )\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}").format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}").format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = 78f52f2071419d0a285c161443ba2202ea2dcbec003b6d46b2806ea162d9f774be9bc1578d4b21e78f49ffd19c58da030f95ad14c2aad00d4337bd47f21e1f3d_0
2025-07-08 18:39:14,710 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") % (...), ...)\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") + ..., ... )\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}").format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}").format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = 78f52f2071419d0a285c161443ba2202ea2dcbec003b6d46b2806ea162d9f774be9bc1578d4b21e78f49ffd19c58da030f95ad14c2aad00d4337bd47f21e1f3d_0
2025-07-08 18:39:14,710 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") % (...), ...)\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}") + ..., ... )\n cursor.execute( sql.SQL("SELECT COUNT(*) FROM public.{}").format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}") + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("SELECT COUNT(*) FROM public.{}").format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = 78f52f2071419d0a285c161443ba2202ea2dcbec003b6d46b2806ea162d9f774be9bc1578d4b21e78f49ffd19c58da030f95ad14c2aad00d4337bd47f21e1f3d_0
2025-07-08 18:39:14,711 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b28f7db3c90a29668fb9ef3b3ef45b6eb460ad345dc5d03d6fa74efd608ac1cd108b050d20e1e38de7c9c16e37c8aacce28132365aed04466d70eea105323521_0
2025-07-08 18:39:14,711 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = bd54efcc7c738952f7b1de5aaaf78ac0a5b3738eb2fa5977da03ffe439f61326904fdd801975bd329e236b3c51af4b1eefb8dc97fc810cf21cc17adec78cb655_0
2025-07-08 18:39:14,712 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = bd54efcc7c738952f7b1de5aaaf78ac0a5b3738eb2fa5977da03ffe439f61326904fdd801975bd329e236b3c51af4b1eefb8dc97fc810cf21cc17adec78cb655_0
2025-07-08 18:39:14,712 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    CREATE TABLE IF NOT EXISTS public.{} AS \n                    SELECT * FROM public.{}\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = bd54efcc7c738952f7b1de5aaaf78ac0a5b3738eb2fa5977da03ffe439f61326904fdd801975bd329e236b3c51af4b1eefb8dc97fc810cf21cc17adec78cb655_0
2025-07-08 18:39:14,713 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b28f7db3c90a29668fb9ef3b3ef45b6eb460ad345dc5d03d6fa74efd608ac1cd108b050d20e1e38de7c9c16e37c8aacce28132365aed04466d70eea105323521_0
2025-07-08 18:39:14,713 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...), ...)\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ..., ... )\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = f3c7e3fc1163b815147327cdf9e3c840a4dab9217222eff53e5bf2f39a188452db65292fdc6ba4933a890c43f66b852e8b1096dc350b801b25afa45b90797601_0
2025-07-08 18:39:14,714 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...), ...)\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ..., ... )\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = f3c7e3fc1163b815147327cdf9e3c840a4dab9217222eff53e5bf2f39a188452db65292fdc6ba4933a890c43f66b852e8b1096dc350b801b25afa45b90797601_0
2025-07-08 18:39:14,714 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...), ...)\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ..., ... )\n cursor.execute( sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                CREATE TABLE secure_api.{} AS SELECT * FROM public.{}\n            """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = f3c7e3fc1163b815147327cdf9e3c840a4dab9217222eff53e5bf2f39a188452db65292fdc6ba4933a890c43f66b852e8b1096dc350b801b25afa45b90797601_0
2025-07-08 18:39:14,715 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b28f7db3c90a29668fb9ef3b3ef45b6eb460ad345dc5d03d6fa74efd608ac1cd108b050d20e1e38de7c9c16e37c8aacce28132365aed04466d70eea105323521_0
2025-07-08 18:39:14,715 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b1015f412cf9c339ea45c243cea7173cf8cb92b982303741a0d1383c8fae4b1a2748568ade07832b99f503edef3cf21b95c3bb6ffc8ae0a95c21cf679ba568f9_0
2025-07-08 18:39:14,716 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b1015f412cf9c339ea45c243cea7173cf8cb92b982303741a0d1383c8fae4b1a2748568ade07832b99f503edef3cf21b95c3bb6ffc8ae0a95c21cf679ba568f9_0
2025-07-08 18:39:14,716 - semgrep.rule_match - DEBUG - match_key = ('cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...), ...)\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ..., ... )\n cursor.execute( sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...), ... )\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) % (...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """) + ...\n...\n cursor.execute($QUERY, ...)\n $QUERY = sql.SQL("""\n                    ALTER SEQUENCE secure_api.{} OWNED BY secure_api.{}.id\n                """).format(...)\n...\n cursor.execute($QUERY, ...)\n $QUERY = f"...{...}..."\n...\n cursor.execute(f"...{...}...", ...)\n', PosixPath('scripts/secure_api_tables.py'), 'config..semgrep.vendored-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query') match_id = b1015f412cf9c339ea45c243cea7173cf8cb92b982303741a0d1383c8fae4b1a2748568ade07832b99f503edef3cf21b95c3bb6ffc8ae0a95c21cf679ba568f9_0
2025-07-08 18:39:14,717 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5b5b01dd43d3645c490c955cac131d1c9a98e0672999eacd97f8ee79ecfb308cad8e77fa5ce5eb84d35b7a44a7f1161749a821e37070f84a04914ff663b2cdd5_0
2025-07-08 18:39:14,717 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5ad0d2f1e1f705c5ec56257f184fe83632ee25383a470d3956cb057fdaa8c4b09226b1dec4ac417556663aebeacebed339872a49dcc46611c94e887d23c49a27_0
2025-07-08 18:39:14,718 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5ad0d2f1e1f705c5ec56257f184fe83632ee25383a470d3956cb057fdaa8c4b09226b1dec4ac417556663aebeacebed339872a49dcc46611c94e887d23c49a27_0
2025-07-08 18:39:14,719 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5ad0d2f1e1f705c5ec56257f184fe83632ee25383a470d3956cb057fdaa8c4b09226b1dec4ac417556663aebeacebed339872a49dcc46611c94e887d23c49a27_0
2025-07-08 18:39:14,726 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = e29fe30270e98c123e4f18a5ca342e5fe2a3a37fa4013f879289c88ddc5ad47a05430981bc24b2296c1f5ded609bf1cbb48daab07b0a22645c030121d885eeb7_0
2025-07-08 18:39:14,732 - semgrep.rule_match - DEBUG - match_key = ('\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n    </script>\n', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 1df8d01b1bb51d5645b1c41ca31caf465910dc30413fd3cbaa577958f1a14644f9abecb517c1a472a9adc87bbd4fe0aa724e606e62c163b9deff8d6e54b36dec_0
2025-07-08 18:39:14,739 - semgrep.rule_match - DEBUG - match_key = ('\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n    </script>\n', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 1df8d01b1bb51d5645b1c41ca31caf465910dc30413fd3cbaa577958f1a14644f9abecb517c1a472a9adc87bbd4fe0aa724e606e62c163b9deff8d6e54b36dec_0
2025-07-08 18:39:14,746 - semgrep.rule_match - DEBUG - match_key = ('\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Benchmark functionality\n        let benchmarkResults = null;\n        let bloomFilter = null;\n        let csvUrl = null;\n        \n        // Standard Bloom Filter implementation\n        // This is a standard computer science data structure, NOT proprietary\n        // Reference: https://en.wikipedia.org/wiki/Bloom_filter\n        class BloomFilter {\n            constructor(size = 1024, hashFunctions = 3) {\n                this.size = size;\n                this.filter = new Array(size).fill(false);\n                this.hashFunctions = hashFunctions;\n            }\n            \n            // Standard hash functions using the djb2 algorithm\n            // These are public domain hash algorithms\n            hash1(str) {\n                let hash = 5381;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash2(str) {\n                let hash = 0;\n                for (let i = 0; i < str.length; i++) {\n                    hash = ((hash << 5) + hash) ^ str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            hash3(str) {\n                let hash = 1;\n                for (let i = 0; i < str.length; i++) {\n                    hash = (hash * 101) + str.charCodeAt(i);\n                }\n                return Math.abs(hash % this.size);\n            }\n            \n            // Standard Bloom filter operations\n            add(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                this.filter[h1] = true;\n                this.filter[h2] = true;\n                this.filter[h3] = true;\n                \n                // Return indices for visualization\n                return [h1, h2, h3];\n            }\n            \n            // Standard membership test\n            check(item) {\n                const h1 = this.hash1(item);\n                const h2 = this.hash2(item);\n                const h3 = this.hash3(item);\n                \n                return this.filter[h1] && this.filter[h2] && this.filter[h3];\n            }\n            \n            // Helper method for visualization\n            getIndices(item) {\n                return [\n                    this.hash1(item),\n                    this.hash2(item),\n                    this.hash3(item)\n                ];\n            }\n        }\n        \n        // Start the benchmark process\n        function startBenchmark() {\n            const plaintext = document.getElementById(\'plaintext\').value;\n            const key = document.getElementById(\'key\').value;\n            \n            if (!plaintext || !key) {\n                alert(\'Please enter both plaintext and key\');\n                return;\n            }\n            \n            // Show progress container\n            document.getElementById(\'progress-container\').style.display = \'block\';\n            document.getElementById(\'loader\').style.display = \'block\';\n            document.getElementById(\'start-benchmark\').disabled = true;\n            \n            // Reset progress\n            updateProgress(0, \'Starting benchmark...\');\n            \n            // Make API call to run the benchmark\n            fetch(\'/api/benchmark\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                    plaintext: plaintext,\n                    key: key\n                })\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\'Network response was not ok\');\n                }\n                updateProgress(50, \'Processing results...\');\n                return response.json();\n            })\n            .then(data => {\n                // Complete progress\n                updateProgress(100, \'Complete!\');\n                \n                // Store results\n                benchmarkResults = data;\n                csvUrl = data.csv_url;\n                \n                // Set up CSV download link\n                document.getElementById(\'download-csv\').href = csvUrl;\n                \n                // Display results\n                displayResults(data);\n                \n                // Hide loader\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n                \n                // Show results container\n                document.getElementById(\'results-container\').style.display = \'block\';\n                \n                // Fetch the CSV data to populate the details\n                fetchCSVData(csvUrl);\n            })\n            .catch(error => {\n                console.error(\'Error running benchmark:\', error);\n                alert(\'Error running benchmark: \' + error.message);\n                document.getElementById(\'progress-container\').style.display = \'none\';\n                document.getElementById(\'loader\').style.display = \'none\';\n                document.getElementById(\'start-benchmark\').disabled = false;\n            });\n        }\n        \n        // Update progress bar\n        function updateProgress(percent, message) {\n            const progressBar = document.getElementById(\'progress-bar\');\n            const progressText = document.getElementById(\'progress-text\');\n            \n            progressBar.style.width = percent + \'%\';\n            progressText.innerText = message || percent + \'%\';\n        }\n        \n        // Display summary results\n        function displayResults(data) {\n            document.getElementById(\'max-wc-delta\').innerText = data.delta_max_wc.toFixed(3);\n            document.getElementById(\'max-hr-delta\').innerText = data.delta_max_hr.toFixed(3);\n            document.getElementById(\'avalanche-score\').innerText = \n                (((data.delta_max_wc + data.delta_max_hr) / 2) * 100).toFixed(1) + \'%\';\n            document.getElementById(\'tests-completed\').innerText = data.rows_written;\n            \n            // Initialize bloom filter\n            bloomFilter = new BloomFilter(256, 3);\n            \n            // Set up the bloom filter visualization\n            setupBloomFilter();\n        }\n        \n        // Fetch CSV data to populate detailed results\n        function fetchCSVData(url) {\n            fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then(csvData => {\n                // Parse CSV\n                const rows = csvData.split(\'\\n\');\n                const headers = rows[0].split(\',\');\n                \n                const tableBody = document.getElementById(\'results-body\');\n                tableBody.innerHTML = \'\';\n                \n                // Prepare data for charts\n                const hrValues = [];\n                const wcValues = [];\n                const entropyValues = [];\n                const labels = [];\n                \n                // Skip header row\n                for (let i = 1; i < rows.length; i++) {\n                    if (!rows[i].trim()) continue;\n                    \n                    const cells = rows[i].split(\',\');\n                    const rowData = {};\n                    \n                    // Map headers to cell values\n                    headers.forEach((header, index) => {\n                        rowData[header] = cells[index];\n                    });\n                    \n                    // Add to table\n                    const tr = document.createElement(\'tr\');\n                    tr.innerHTML = `\n                        <td>${rowData.TestID || rowData.test_id || \'N/A\'}</td>\n                        <td>${rowData.Vector || rowData.perturb_type || \'N/A\'}</td>\n                        <td>${rowData.BitPos || rowData.bit_pos || \'N/A\'}</td>\n                        <td>${parseFloat(rowData.HR || rowData.hr || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.WC || rowData.wc || 0).toFixed(3)}</td>\n                        <td>${parseFloat(rowData.Entropy || rowData.entropy || 0).toFixed(3)}</td>\n                    `;\n                    tableBody.appendChild(tr);\n                    \n                    // Add to chart data\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId > 0) { // Skip base test\n                        labels.push(`Test ${testId}`);\n                        hrValues.push(parseFloat(rowData.HR || rowData.hr || 0));\n                        wcValues.push(parseFloat(rowData.WC || rowData.wc || 0));\n                        entropyValues.push(parseFloat(rowData.Entropy || rowData.entropy || 0));\n                    }\n                    \n                    // Add to bloom filter with cryptographic validation\n                    if (rowData.PT && rowData.KEY) {\n                        // Use the cryptographic hash from the benchmark result\n                        // This provides scientific validation of the avalanche effect\n                        let cryptoHash;\n                        if (headers.includes(\'Hash\') && rowData.Hash) {\n                            cryptoHash = rowData.Hash;\n                        } else {\n                            // Fall back to calculated hash if not in CSV\n                            cryptoHash = hashString(rowData.PT + rowData.KEY);\n                        }\n                        \n                        // Log hash for verification (scientific validation)\n                        console.log(`Test ${rowData.TestID}: Adding hash ${cryptoHash.substring(0,8)}... to bloom filter`);\n                        \n                        const indices = bloomFilter.add(cryptoHash);\n                        \n                        // Visualize bloom filter additions with animated effect\n                        indices.forEach(index => {\n                            const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                            if (cell) {\n                                cell.classList.add(\'active\');\n                                \n                                // Add highlight animation\n                                const originalColor = window.getComputedStyle(cell).backgroundColor;\n                                cell.style.transition = \'background-color 0.5s\';\n                                cell.style.backgroundColor = \'#fff\';\n                                setTimeout(() => {\n                                    cell.style.backgroundColor = originalColor;\n                                }, 500);\n                            }\n                        });\n                    }\n                    \n                    // Set up bit flip visualization if it\'s the first test\n                    const testId = parseInt(rowData.TestID || rowData.test_id || \'0\');\n                    if (testId == 1) {\n                        // Find base test data (TestID 0)\n                        let baseTestData = null;\n                        for (let j = 1; j < rows.length; j++) {\n                            if (!rows[j].trim()) continue;\n                            const baseCells = rows[j].split(\',\');\n                            if (baseCells[0] === \'0\') { // TestID 0 is base test\n                                const baseRowData = {};\n                                headers.forEach((header, index) => {\n                                    baseRowData[header] = baseCells[index];\n                                });\n                                baseTestData = baseRowData;\n                                break;\n                            }\n                        }\n                        \n                        if (baseTestData) {\n                            setupBitFlipVisualization(baseTestData, rowData);\n                        } else {\n                            console.error("Base test data not found for visualization");\n                        }\n                    }\n                }\n                \n                // Create charts\n                createHRChart(labels, hrValues);\n                createWCChart(labels, wcValues);\n                createEntropyChart(labels, entropyValues);\n            })\n            .catch(error => {\n                console.error(\'Error fetching CSV data:\', error);\n                // Display error message to user\n                const tableBody = document.getElementById(\'results-body\');\n                if (tableBody) {\n                    tableBody.innerHTML = `<tr><td colspan="6">Error loading benchmark data: ${error.message}</td></tr>`;\n                }\n                // Show error for entropy chart location too\n                const chartParent = document.getElementById(\'wc-chart\').parentElement;\n                const errorDiv = document.createElement(\'div\');\n                errorDiv.className = \'chart\';\n                errorDiv.innerHTML = `<h4>Error Loading Data</h4><p>Could not load entropy data: ${error.message}</p>`;\n                chartParent.appendChild(errorDiv);\n            });\n        }\n        \n        // Set up bloom filter visualization\n        function setupBloomFilter() {\n            const container = document.getElementById(\'bloom-cells\');\n            container.innerHTML = \'\';\n            \n            // Create 256 cells (16x16 grid)\n            for (let i = 0; i < 256; i++) {\n                const cell = document.createElement(\'div\');\n                cell.className = \'bloom-cell\';\n                cell.setAttribute(\'data-index\', i);\n                container.appendChild(cell);\n            }\n        }\n        \n        // Verify a hash against the bloom filter\n        function verifyHash() {\n            const hash = document.getElementById(\'verify-hash\').value;\n            const resultDiv = document.getElementById(\'verify-result\');\n            \n            if (!hash) {\n                resultDiv.innerHTML = \'Please enter a hash\';\n                return;\n            }\n            \n            if (!bloomFilter) {\n                resultDiv.innerHTML = \'Bloom filter not initialized. Run a benchmark first.\';\n                return;\n            }\n            \n            // Get indices without adding to filter\n            const indices = bloomFilter.getIndices(hash);\n            \n            // Reset all highlights\n            document.querySelectorAll(\'.bloom-cell\').forEach(cell => {\n                cell.style.border = \'\';\n            });\n            \n            // Highlight cells\n            indices.forEach(index => {\n                const cell = document.querySelector(`.bloom-cell[data-index="${index}"]`);\n                if (cell) {\n                    cell.style.border = \'1px solid red\';\n                }\n            });\n            \n            // Check if hash might be in the filter\n            const mightContain = bloomFilter.check(hash);\n            \n            if (mightContain) {\n                resultDiv.innerHTML = \'Hash might exist in the filter (possible match)\';\n            } else {\n                resultDiv.innerHTML = \'Hash definitely does not exist in the filter\';\n            }\n        }\n        \n        // Set up bit flip visualization\n        function setupBitFlipVisualization(baseTest, firstTest) {\n            // Handle both uppercase and lowercase column names\n            const basePT = baseTest.PT || baseTest.pt || \'\';\n            const firstPT = firstTest.PT || firstTest.pt || \'\';\n            const baseKEY = baseTest.KEY || baseTest.key || \'\';\n            const firstKEY = firstTest.KEY || firstTest.key || \'\';\n            const bitPos = firstTest.BitPos || firstTest.bit_pos || \'-1\';\n            const baseEntropy = parseFloat(baseTest.Entropy || baseTest.entropy || 0).toFixed(3);\n            const firstEntropy = parseFloat(firstTest.Entropy || firstTest.entropy || 0).toFixed(3);\n            const baseHash = baseTest.Hash || baseTest.hash || baseTest.signature || \'\';\n            const firstHash = firstTest.Hash || firstTest.hash || firstTest.signature || \'\';\n            \n            // Get binary representation of the original PT and flipped PT\n            const originalBits = hexToBinary(basePT);\n            const flippedBits = hexToBinary(firstPT);\n            \n            // Find the difference\n            const flippedBitPosition = findFlippedBit(originalBits, flippedBits);\n            \n            // Set original bits\n            const originalBitsEl = document.getElementById(\'original-bits\');\n            originalBitsEl.innerHTML = formatBits(originalBits);\n            \n            // Set flipped bits\n            const flippedBitsEl = document.getElementById(\'flipped-bits\');\n            flippedBitsEl.innerHTML = formatBits(flippedBits, flippedBitPosition);\n            \n            // Add additional metadata for clarity\n            let bitFlipType = \'\';\n            if (basePT !== firstPT) {\n                bitFlipType = \'Plaintext Bit Flip\';\n            } else if (baseKEY !== firstKEY) {\n                bitFlipType = \'Key Bit Flip\';\n            }\n            \n            // Calculate entropy change safely\n            const entropyChange = (parseFloat(firstEntropy) - parseFloat(baseEntropy)).toFixed(3);\n            \n            // Add information about the test\n            const metadataHtml = `\n                <div style="margin-bottom: 10px; background-color: #222; padding: 8px; border-radius: 4px;">\n                    <div><strong>Test Type:</strong> ${bitFlipType}</div>\n                    <div><strong>Bit Position:</strong> ${bitPos}</div>\n                    <div><strong>Base Entropy:</strong> ${baseEntropy}</div>\n                    <div><strong>Modified Entropy:</strong> ${firstEntropy}</div>\n                    <div><strong>Entropy Change:</strong> ${entropyChange}</div>\n                </div>\n            `;\n            \n            // Insert metadata at the top of the visualization\n            const visualizationTab = document.getElementById(\'visualization-tab\');\n            const h4Element = visualizationTab.querySelector(\'h4\');\n            \n            // Remove any previous metadata\n            const existingMetadata = visualizationTab.querySelector(\'.bit-flip-metadata\');\n            if (existingMetadata) {\n                existingMetadata.remove();\n            }\n            \n            // Insert the new metadata\n            const metadataContainer = document.createElement(\'div\');\n            metadataContainer.className = \'bit-flip-metadata\';\n            metadataContainer.innerHTML = metadataHtml;\n            h4Element.insertAdjacentElement(\'afterend\', metadataContainer);\n            \n            // Set original output\n            const originalOutputEl = document.getElementById(\'original-output\');\n            originalOutputEl.innerHTML = formatBits(hexToBinary(baseHash));\n            \n            // Set changed output\n            const changedOutputEl = document.getElementById(\'changed-output\');\n            changedOutputEl.innerHTML = formatBits(hexToBinary(firstHash));\n        }\n        \n        // Convert hex to binary string\n        function hexToBinary(hex) {\n            let binary = \'\';\n            for (let i = 0; i < hex.length; i++) {\n                const byte = parseInt(hex[i], 16).toString(2).padStart(4, \'0\');\n                binary += byte;\n            }\n            return binary;\n        }\n        \n        // Find the bit that was flipped\n        function findFlippedBit(str1, str2) {\n            for (let i = 0; i < str1.length && i < str2.length; i++) {\n                if (str1[i] !== str2[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        \n        // Format bits for display with optional highlighting\n        function formatBits(bits, highlightPos = -1) {\n            let result = \'\';\n            for (let i = 0; i < bits.length; i++) {\n                if (i === highlightPos) {\n                    result += `<span class="flipped">${bits[i]}</span>`;\n                } else {\n                    result += bits[i];\n                }\n                \n                // Add space every 8 bits for readability\n                if ((i + 1) % 8 === 0) {\n                    result += \' \';\n                }\n            }\n            return result;\n        }\n        \n        // Create HR Chart\n        function createHRChart(labels, values) {\n            const ctx = document.getElementById(\'hr-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Harmonic Resonance\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 255, 255, 0.2)\',\n                        borderColor: \'rgba(255, 255, 255, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create WC Chart\n        function createWCChart(labels, values) {\n            const ctx = document.getElementById(\'wc-chart\').getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Waveform Coherence\',\n                        data: values,\n                        backgroundColor: \'rgba(75, 192, 192, 0.2)\',\n                        borderColor: \'rgba(75, 192, 192, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Create Entropy Chart\n        function createEntropyChart(labels, values) {\n            // Create a new chart container\n            const chartContainer = document.createElement(\'div\');\n            chartContainer.className = \'chart\';\n            chartContainer.id = \'entropy-chart-container\';\n            \n            // Find the chart container parent\n            const chartParent = document.getElementById(\'wc-chart\').parentElement;\n            chartParent.appendChild(chartContainer);\n            \n            // Create a canvas element for the chart\n            const canvas = document.createElement(\'canvas\');\n            canvas.id = \'entropy-chart\';\n            chartContainer.appendChild(canvas);\n            \n            // Add title to chart\n            const title = document.createElement(\'h4\');\n            title.textContent = \'Entropy Variation\';\n            title.style.textAlign = \'center\';\n            title.style.color = \'#fff\';\n            title.style.marginTop = \'0\';\n            title.style.marginBottom = \'10px\';\n            chartContainer.insertBefore(title, canvas);\n            \n            // Get the context and create chart\n            const ctx = canvas.getContext(\'2d\');\n            \n            new Chart(ctx, {\n                type: \'line\',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: \'Entropy\',\n                        data: values,\n                        backgroundColor: \'rgba(255, 159, 64, 0.2)\',\n                        borderColor: \'rgba(255, 159, 64, 1)\',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: false,\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: \'rgba(255, 255, 255, 0.1)\'\n                            },\n                            ticks: {\n                                color: \'rgba(255, 255, 255, 0.7)\',\n                                maxRotation: 90,\n                                minRotation: 45\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: \'rgba(255, 255, 255, 0.7)\'\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return `Entropy: ${context.parsed.y.toFixed(3)}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Tab functionality\n        function openTab(evt, tabName) {\n            // Hide all tab content\n            document.querySelectorAll(\'.tab-content\').forEach(tab => {\n                tab.classList.remove(\'active\');\n            });\n            \n            // Remove active class from all tab buttons\n            document.querySelectorAll(\'.tab-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Show selected tab and activate button\n            document.getElementById(tabName).classList.add(\'active\');\n            evt.currentTarget.classList.add(\'active\');\n        }\n        \n        // Simple hash function for demo purposes\n        function hashString(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash = hash & hash;\n            }\n            return hash.toString(16).padStart(8, \'0\');\n        }\n    </script>\n', PosixPath('static/64-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 1df8d01b1bb51d5645b1c41ca31caf465910dc30413fd3cbaa577958f1a14644f9abecb517c1a472a9adc87bbd4fe0aa724e606e62c163b9deff8d6e54b36dec_0
2025-07-08 18:39:14,747 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 9f0c5bf6cd3654228297eef91ce596e3fd07a93cbf0eda35bf97b24b1bf634f172502147a36df1a7334c7268bb597dc34f3f1c0e75496d43cd8673fea0925a10_0
2025-07-08 18:39:14,748 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 8076bbcca11cb7f9507cf21936cbec7392dd03dd875bdfe9dd76068082612548b41ae5121aa42d792402d597a15c5749b77d254dabc1379e61bc772d663bb726_0
2025-07-08 18:39:14,748 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 8076bbcca11cb7f9507cf21936cbec7392dd03dd875bdfe9dd76068082612548b41ae5121aa42d792402d597a15c5749b77d254dabc1379e61bc772d663bb726_0
2025-07-08 18:39:14,749 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 8076bbcca11cb7f9507cf21936cbec7392dd03dd875bdfe9dd76068082612548b41ae5121aa42d792402d597a15c5749b77d254dabc1379e61bc772d663bb726_0
2025-07-08 18:39:14,749 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = df1a7d2ed61ac63b5b0fc3963d1af583d0f21471adfe18510fd7b6699383916e7aab7530ab5ef0bf13e0eb63b00244bb5676fc02121515bf5bf671f9cba65ec7_0
2025-07-08 18:39:14,750 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n outputElement.outerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = e3667b869aa19c7e1b88b49914240ff380140983b4833b229ae0e9e8df18faf513aefc38ad4ed2f32628fe80150dea77ea4d10e8fc31d23db11c744d5b8e8657_0
2025-07-08 18:39:14,750 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n outputElement.outerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = e3667b869aa19c7e1b88b49914240ff380140983b4833b229ae0e9e8df18faf513aefc38ad4ed2f32628fe80150dea77ea4d10e8fc31d23db11c744d5b8e8657_0
2025-07-08 18:39:14,751 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n outputElement.outerHTML = ``\n            <h3>64-Perturbation Benchmark Complete</h3>\n            <p>✓ data.rows_written||0 tests completed</p>\n            <p>✓ Max ΔWC = data.delta_max_wc?.?.toFixed(4)||0</p>\n            <p>✓ Max ΔHR = data.delta_max_hr?.?.toFixed(4)||0</p>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = e3667b869aa19c7e1b88b49914240ff380140983b4833b229ae0e9e8df18faf513aefc38ad4ed2f32628fe80150dea77ea4d10e8fc31d23db11c744d5b8e8657_0
2025-07-08 18:39:14,751 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0a8c66e20b44b3f03fd3b8a20437c5fcd18e17d73d864f7638ed595b859cd3200187a9ef8ad63bceff716e2ad93b3d58e629d8d6e5b3d2ba35c6b625ead4351f_0
2025-07-08 18:39:14,752 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.delta_max_hr?.?.toFixed(4)||0}...`\n `...${data.delta_max_hr?.?.toFixed(4)||0}</p>\n        `\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c6c165ca1ec23b04834d7671001bbc0cac04b40d917bb338ac733fa530229f23ee739a060f799286fa9eaecc6e1c9f1a7d99e61954b6791f8a5bf071dfccb9e0_0
2025-07-08 18:39:14,752 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.delta_max_hr?.?.toFixed(4)||0}...`\n `...${data.delta_max_hr?.?.toFixed(4)||0}</p>\n        `\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c6c165ca1ec23b04834d7671001bbc0cac04b40d917bb338ac733fa530229f23ee739a060f799286fa9eaecc6e1c9f1a7d99e61954b6791f8a5bf071dfccb9e0_0
2025-07-08 18:39:14,753 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.delta_max_hr?.?.toFixed(4)||0}...`\n `...${data.delta_max_hr?.?.toFixed(4)||0}</p>\n        `\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c6c165ca1ec23b04834d7671001bbc0cac04b40d917bb338ac733fa530229f23ee739a060f799286fa9eaecc6e1c9f1a7d99e61954b6791f8a5bf071dfccb9e0_0
2025-07-08 18:39:14,754 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 9f0c5bf6cd3654228297eef91ce596e3fd07a93cbf0eda35bf97b24b1bf634f172502147a36df1a7334c7268bb597dc34f3f1c0e75496d43cd8673fea0925a10_0
2025-07-08 18:39:14,754 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5be666aaa4b6e26c50bd3e440ef4df1e845a3830edb895eaa3301760e7d77d1f288f091db1d4e470772f316f11a9f554fd9d08fd7e0344e89cb73ac261b6a7e0_0
2025-07-08 18:39:14,755 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5be666aaa4b6e26c50bd3e440ef4df1e845a3830edb895eaa3301760e7d77d1f288f091db1d4e470772f316f11a9f554fd9d08fd7e0344e89cb73ac261b6a7e0_0
2025-07-08 18:39:14,756 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5be666aaa4b6e26c50bd3e440ef4df1e845a3830edb895eaa3301760e7d77d1f288f091db1d4e470772f316f11a9f554fd9d08fd7e0344e89cb73ac261b6a7e0_0
2025-07-08 18:39:14,756 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = df1a7d2ed61ac63b5b0fc3963d1af583d0f21471adfe18510fd7b6699383916e7aab7530ab5ef0bf13e0eb63b00244bb5676fc02121515bf5bf671f9cba65ec7_0
2025-07-08 18:39:14,757 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n outputElement.outerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2d21ec23284bb13a1d51e00e19859e8768bd821dcf5be102ecbe8c464f58dafee37e9aacfa8e09efe580a704bc2ff01d43f44535cdedd3dc8c09257e38d0bcb0_0
2025-07-08 18:39:14,757 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n outputElement.outerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2d21ec23284bb13a1d51e00e19859e8768bd821dcf5be102ecbe8c464f58dafee37e9aacfa8e09efe580a704bc2ff01d43f44535cdedd3dc8c09257e38d0bcb0_0
2025-07-08 18:39:14,758 - semgrep.rule_match - DEBUG - match_key = ('outputElement.innerHTML = "...";\n outputElement.innerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n outputElement.outerHTML = ``\n            <div class="error" style="color: #cf6679; margin-bottom: 10px; font-weight: bold;">\n                Error running benchmark: errorMessage\n            </div>\n            <div>\n                <p>Please check the following:</p>\n                <ul style="margin-left: 20px; margin-top: 10px;">\n                    <li>Ensure you are using valid 32-character hex values</li>\n                    <li>The API endpoint may have temporary issues</li>\n                    <li>Check console for detailed error information</li>\n                </ul>\n            </div>\n        `;\n document.write(...) outputElement.outerHTML = "...";\n document.write("...")', PosixPath('static/benchmark.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2d21ec23284bb13a1d51e00e19859e8768bd821dcf5be102ecbe8c464f58dafee37e9aacfa8e09efe580a704bc2ff01d43f44535cdedd3dc8c09257e38d0bcb0_0
2025-07-08 18:39:14,761 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/container-operations.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = f818bfc2fcdb24bedb7029e02a807b989a4901737a36b12eee240cc68bc043509b3a7136eafa7513f8f3353b20f724afc4622157f74ca94b3aed4be94700050d_0
2025-07-08 18:39:14,765 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n    </script>\n', PosixPath('static/container-operations.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 03b8a878478b48c57869018b4d6e8edafeee7069fa6a22fce98f771d18e8869a2d09df47f8d061e2477f3e1dc0cca6e895f1f5f0e0e78968f715a763c7013256_0
2025-07-08 18:39:14,769 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n    </script>\n', PosixPath('static/container-operations.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 03b8a878478b48c57869018b4d6e8edafeee7069fa6a22fce98f771d18e8869a2d09df47f8d061e2477f3e1dc0cca6e895f1f5f0e0e78968f715a763c7013256_0
2025-07-08 18:39:14,774 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const containerHashInput = document.getElementById(\'container-hash\');\n        const unlockKeyInput = document.getElementById(\'unlock-key\');\n        const unlockButton = document.getElementById(\'unlock-button\');\n        const unlockResult = document.getElementById(\'unlock-result\');\n        const unlockIndicator = document.getElementById(\'unlock-indicator\');\n        const unlockWaveCanvas = document.getElementById(\'unlock-wave-canvas\');\n        \n        const verifyHashInput = document.getElementById(\'verify-hash\');\n        const verifyKeyInput = document.getElementById(\'verify-key\');\n        const verifyButton = document.getElementById(\'verify-button\');\n        const verifyResult = document.getElementById(\'verify-result\');\n        \n        // Canvas context\n        const waveCtx = unlockWaveCanvas.getContext(\'2d\');\n        \n        // Draw waveform for container unlock visualization\n        function drawWaveform(matched = false) {\n            const width = unlockWaveCanvas.width;\n            const height = unlockWaveCanvas.height;\n            \n            // Clear canvas\n            waveCtx.clearRect(0, 0, width, height);\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, width, height);\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, height / 2);\n            waveCtx.lineTo(width, height / 2);\n            waveCtx.stroke();\n            \n            // Get hash data to create a deterministic pattern\n            const hash = containerHashInput.value;\n            const key = unlockKeyInput.value;\n            \n            if (!hash || !key) {\n                // Draw placeholder wave if no data\n                drawPlaceholderWave(width, height);\n                return;\n            }\n            \n            // Generate a number from the hash for seeding the wave\n            let hashNum = 0;\n            for (let i = 0; i < hash.length; i++) {\n                hashNum = ((hashNum << 5) - hashNum) + hash.charCodeAt(i);\n                hashNum |= 0;\n            }\n            hashNum = Math.abs(hashNum) % 1000000;\n            \n            // Generate a number from the key for comparison\n            let keyNum = 0;\n            for (let i = 0; i < key.length; i++) {\n                keyNum = ((keyNum << 5) - keyNum) + key.charCodeAt(i);\n                keyNum |= 0;\n            }\n            keyNum = Math.abs(keyNum) % 1000000;\n            \n            // Draw container pattern (purple wave)\n            waveCtx.strokeStyle = \'#b967ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10;\n                const y = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                          Math.sin(t * 3 + hashNum / 200000) * 15;\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Draw key pattern (blue wave) - only if there\'s a match attempt\n            if (matched || key.length > 0) {\n                const similarity = matched ? 0.95 : 0.2;\n                \n                waveCtx.strokeStyle = matched ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = x / width * 10;\n                    \n                    // Calculate a y position based on how similar the key is to the hash\n                    // In a real implementation, this would be based on the actual math\n                    const baseY = height / 2 + Math.sin(t + hashNum / 100000) * 30 + \n                                Math.sin(t * 3 + hashNum / 200000) * 15;\n                    \n                    // Add some noise based on whether it\'s a match or not\n                    const noise = matched ? Math.random() * 5 : Math.sin(t * 8 + keyNum / 50000) * 40;\n                    \n                    const y = baseY * similarity + noise * (1 - similarity);\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n            }\n        }\n        \n        // Draw placeholder wave\n        function drawPlaceholderWave(width, height) {\n            waveCtx.strokeStyle = \'rgba(255, 255, 255, 0.3)\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const y = height / 2 + Math.sin(x / 30) * 20;\n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n        }\n        \n        // Get metrics elements\n        const phaseLock1Bar = document.getElementById(\'phase-lock-1-bar\');\n        const phaseLock1Value = document.getElementById(\'phase-lock-1-value\');\n        const phaseLock2Bar = document.getElementById(\'phase-lock-2-bar\');\n        const phaseLock2Value = document.getElementById(\'phase-lock-2-value\');\n        const phaseLock3Bar = document.getElementById(\'phase-lock-3-bar\');\n        const phaseLock3Value = document.getElementById(\'phase-lock-3-value\');\n        const phaseLock4Bar = document.getElementById(\'phase-lock-4-bar\');\n        const phaseLock4Value = document.getElementById(\'phase-lock-4-value\');\n        \n        // Update phase lock metrics function\n        function updatePhaseMetrics(metrics) {\n            // Default values if metrics are not provided\n            const phaseLock1 = metrics?.phaseLock1 || 0;\n            const phaseLock2 = metrics?.phaseLock2 || 0;\n            const phaseLock3 = metrics?.phaseLock3 || 0;\n            const phaseLock4 = metrics?.phaseLock4 || 0;\n            \n            // Update bars\n            phaseLock1Bar.style.width = `${phaseLock1 * 100}%`;\n            phaseLock2Bar.style.width = `${phaseLock2 * 100}%`;\n            phaseLock3Bar.style.width = `${phaseLock3 * 100}%`;\n            phaseLock4Bar.style.width = `${phaseLock4 * 100}%`;\n            \n            // Update values\n            phaseLock1Value.textContent = phaseLock1.toFixed(3);\n            phaseLock2Value.textContent = phaseLock2.toFixed(3);\n            phaseLock3Value.textContent = phaseLock3.toFixed(3);\n            phaseLock4Value.textContent = phaseLock4.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetPhaseMetrics() {\n            updatePhaseMetrics({\n                phaseLock1: 0,\n                phaseLock2: 0,\n                phaseLock3: 0,\n                phaseLock4: 0\n            });\n        }\n        \n        // Init\n        window.addEventListener(\'load\', () => {\n            // Draw initial waveform\n            drawWaveform();\n            \n            // Reset phase metrics\n            resetPhaseMetrics();\n            \n            // Update waveform when container hash changes\n            containerHashInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Reset metrics or update with preliminary values\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    // Show preliminary analysis if both hash and key are present\n                    updatePhaseMetrics({\n                        phaseLock1: 0.05,\n                        phaseLock2: 0.03,\n                        phaseLock3: 0.07,\n                        phaseLock4: 0.02\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Update waveform when key changes\n            unlockKeyInput.addEventListener(\'input\', () => {\n                drawWaveform();\n                // Update metrics with preliminary values if both inputs have data\n                if (containerHashInput.value.trim() && unlockKeyInput.value.trim()) {\n                    updatePhaseMetrics({\n                        phaseLock1: Math.min(unlockKeyInput.value.length / 10, 0.2),\n                        phaseLock2: Math.min(unlockKeyInput.value.length / 15, 0.15),\n                        phaseLock3: Math.min(unlockKeyInput.value.length / 20, 0.1),\n                        phaseLock4: Math.min(unlockKeyInput.value.length / 25, 0.08)\n                    });\n                } else {\n                    resetPhaseMetrics();\n                }\n            });\n            \n            // Handle unlock button click\n            unlockButton.addEventListener(\'click\', () => {\n                const hash = containerHashInput.value.trim();\n                const key = unlockKeyInput.value.trim();\n                \n                if (!hash) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    unlockResult.innerHTML = \'<div class="error-message">Please enter an unlock key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                unlockResult.innerHTML = \'<div class="loading-message">Processing unlock request...</div>\';\n                unlockIndicator.textContent = \'Verifying resonance patterns...\';\n                unlockIndicator.className = \'match-indicator\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake check if key matches hash (in a real implementation, this would call the API)\n                    // For demo purposes, we\'ll say any key that\'s at least 4 chars and hash that\'s at least 10 chars is valid\n                    const isValidKey = key.length >= 4 && hash.length >= 10;\n                    \n                    if (isValidKey) {\n                        // Success case\n                        unlockResult.innerHTML = `\n                            <div class="success-message">Container Unlocked</div>\n                            <div>Decrypted successfully: ${key.length > 10 ? \'Sample encrypted message\' : \'Test message\'}</div>\n                            <div>Created: ${new Date().toLocaleString()}</div>\n                            <div>Access Count: 1</div>\n                            <div>Content Preview: ${key.length > 10 ? \'This is a secure container created with QuantoniumOS...\' : \'Test content\'}</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance match: Perfect\';\n                        unlockIndicator.className = \'match-indicator success\';\n                        \n                        // Update wave visualization to show match\n                        drawWaveform(true);\n                        \n                        // Update phase lock metrics for successful unlock\n                        updatePhaseMetrics({\n                            phaseLock1: 0.999, // Pattern Recognition success\n                            phaseLock2: 0.985, // Frequency Analysis success\n                            phaseLock3: 0.993, // Entropy Validation success\n                            phaseLock4: 0.978  // Quantum Signature success\n                        });\n                    } else {\n                        // Check if the key is at least somewhat close (for partial match effect)\n                        const hashLength = hash.length;\n                        const keyLength = key.length;\n                        const similarityFactor = Math.min(0.4, \n                            (keyLength >= 4 && hashLength >= 10) ? 0.4 : 0.1);\n                        \n                        // Error case\n                        unlockResult.innerHTML = `\n                            <div class="error-message">Container unlock failed</div>\n                            <div>Error: Key does not match container hash</div>\n                            <div>This container requires a specific resonance pattern to unlock.</div>\n                        `;\n                        \n                        unlockIndicator.textContent = \'Key resonance mismatch: Failed\';\n                        unlockIndicator.className = \'match-indicator error\';\n                        \n                        // Update wave visualization to show mismatch\n                        drawWaveform(false);\n                        \n                        // Update phase lock metrics for failed unlock - with some values to show partial detection\n                        updatePhaseMetrics({\n                            phaseLock1: 0.32 * similarityFactor,  // Partial pattern recognition\n                            phaseLock2: 0.18 * similarityFactor,  // Partial frequency match\n                            phaseLock3: 0.41 * similarityFactor,  // Some entropy correlation\n                            phaseLock4: 0.05 * similarityFactor   // Very low quantum signature match\n                        });\n                    }\n                }, 1500);\n            });\n            \n            // Handle verify button click\n            verifyButton.addEventListener(\'click\', () => {\n                const hash = verifyHashInput.value.trim();\n                const key = verifyKeyInput.value.trim();\n                \n                if (!hash) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a container hash</div>\';\n                    return;\n                }\n                \n                if (!key) {\n                    verifyResult.innerHTML = \'<div class="error-message">Please enter a verification key</div>\';\n                    return;\n                }\n                \n                // Show loading state\n                verifyResult.innerHTML = \'<div class="loading-message">Verifying container integrity...</div>\';\n                \n                // Simulate API call delay\n                setTimeout(() => {\n                    // Fake verification result (in a real implementation, this would call the API)\n                    const isValid = hash.length >= 10 && key.length >= 4;\n                    \n                    if (isValid) {\n                        // Success case\n                        verifyResult.innerHTML = `\n                            <div class="success-message">Container Integrity Verified</div>\n                            <div>Status: Container intact and unmodified</div>\n                            <div>Validation: All waveform patterns match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 97%</div>\n                        `;\n                    } else {\n                        // Error case\n                        verifyResult.innerHTML = `\n                            <div class="error-message">Container verification failed</div>\n                            <div>Status: Container may have been tampered with</div>\n                            <div>Error: Waveform patterns do not match expected values</div>\n                            <div>Timestamp: ${new Date().toLocaleString()}</div>\n                            <div>Integrity Score: 43%</div>\n                        `;\n                    }\n                }, 1500);\n            });\n        });\n    </script>\n', PosixPath('static/container-operations.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 03b8a878478b48c57869018b4d6e8edafeee7069fa6a22fce98f771d18e8869a2d09df47f8d061e2477f3e1dc0cca6e895f1f5f0e0e78968f715a763c7013256_0
2025-07-08 18:39:14,776 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/deployment-test.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 35a8a9f122a53e9a3bd390d1a1f3a1450abc4aa888b533ee9dd50a25015031d4eff6729c828f30efa4c2d41d34d10bd008400afdbf929c77afe8baa3142a48b7_0
2025-07-08 18:39:14,778 - semgrep.rule_match - DEBUG - match_key = ('\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n    </script>\n', PosixPath('static/deployment-test.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6559f7214d3043d23b7b8ed12f5fad5b296cd6f1bb5b5d67568a84bde08b3d512bda68dd27310f98e0865137816875d77c37590169b169a0678d340ef1eece9f_0
2025-07-08 18:39:14,779 - semgrep.rule_match - DEBUG - match_key = ('\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n    </script>\n', PosixPath('static/deployment-test.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6559f7214d3043d23b7b8ed12f5fad5b296cd6f1bb5b5d67568a84bde08b3d512bda68dd27310f98e0865137816875d77c37590169b169a0678d340ef1eece9f_0
2025-07-08 18:39:14,781 - semgrep.rule_match - DEBUG - match_key = ('\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Log function\n        function log(message) {\n            const logs = document.getElementById(\'logs\');\n            logs.innerHTML += message + \'\\n\';\n            logs.scrollTop = logs.scrollHeight;\n        }\n        \n        // Update status\n        function updateStatus(id, message, status) {\n            const element = document.getElementById(id);\n            element.textContent = message;\n            element.className = status;\n        }\n        \n        // Check route\n        async function checkRoute(route, id) {\n            try {\n                log(`Checking route: ${route}`);\n                const response = await fetch(route, { method: \'HEAD\' });\n                if (response.ok) {\n                    updateStatus(id, \'Available ✓\', \'success\');\n                    log(`Route ${route} is available (${response.status})`);\n                    return true;\n                } else {\n                    updateStatus(id, `Error ${response.status} ✗`, \'error\');\n                    log(`Route ${route} returned status ${response.status}`);\n                    return false;\n                }\n            } catch (error) {\n                updateStatus(id, \'Connection Error ✗\', \'error\');\n                log(`Error accessing ${route}: ${error.message}`);\n                return false;\n            }\n        }\n        \n        // Test iframe loading\n        async function testIframeLoading() {\n            return new Promise((resolve) => {\n                const iframe = document.getElementById(\'test-iframe\');\n                iframe.style.display = \'block\';\n                iframe.src = \'./quantum-os.html?test=true&v=\' + Date.now();\n                \n                let timeout = setTimeout(() => {\n                    updateStatus(\'iframe-status\', \'Timeout ✗\', \'error\');\n                    log(\'Iframe loading timed out\');\n                    resolve(false);\n                }, 5000);\n                \n                iframe.onload = () => {\n                    clearTimeout(timeout);\n                    try {\n                        // Try to access iframe content\n                        const iframeWindow = iframe.contentWindow;\n                        if (iframeWindow.document.title) {\n                            updateStatus(\'iframe-status\', \'Loaded Successfully ✓\', \'success\');\n                            log(`Iframe loaded with title: ${iframeWindow.document.title}`);\n                            resolve(true);\n                        } else {\n                            updateStatus(\'iframe-status\', \'Empty Document ✗\', \'warning\');\n                            log(\'Iframe loaded but no content was found\');\n                            resolve(false);\n                        }\n                    } catch (error) {\n                        updateStatus(\'iframe-status\', \'Cross-Origin Error ✗\', \'error\');\n                        log(`Iframe access error: ${error.message}`);\n                        resolve(false);\n                    }\n                };\n                \n                iframe.onerror = (error) => {\n                    clearTimeout(timeout);\n                    updateStatus(\'iframe-status\', \'Loading Error ✗\', \'error\');\n                    log(`Iframe loading error: ${error.message || \'Unknown error\'}`);\n                    resolve(false);\n                };\n            });\n        }\n        \n        // Run all tests\n        async function runAllTests() {\n            document.getElementById(\'logs\').innerHTML = \'\';\n            log(\'Starting deployment tests...\');\n            \n            // Update environment info\n            updateStatus(\'server-time\', new Date().toLocaleString(), \'success\');\n            updateStatus(\'server-url\', window.location.href, \'success\');\n            updateStatus(\'browser-info\', navigator.userAgent, \'success\');\n            \n            // Check routes\n            await checkRoute(\'/\', \'root-route\');\n            await checkRoute(\'/os\', \'os-route\');\n            await checkRoute(\'/resonance-encrypt?embedded=true\', \'encrypt-route\');\n            \n            // Test iframe\n            await testIframeLoading();\n            \n            log(\'All tests completed!\');\n        }\n        \n        // Run tests on load\n        window.addEventListener(\'load\', runAllTests);\n        \n        // Button event listeners\n        document.getElementById(\'run-tests\').addEventListener(\'click\', runAllTests);\n        document.getElementById(\'view-os\').addEventListener(\'click\', () => {\n            window.location.href = \'/os\';\n        });\n    </script>\n', PosixPath('static/deployment-test.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6559f7214d3043d23b7b8ed12f5fad5b296cd6f1bb5b5d67568a84bde08b3d512bda68dd27310f98e0865137816875d77c37590169b169a0678d340ef1eece9f_0
2025-07-08 18:39:14,784 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantonium-frontend.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 7fa1eeda191ac2f7c9f6f26546ee6e9815a5dcd6f1b9f86ffa996cb0217cae1f1266b2f75791f2c1343806d9f4507a514d4c1cb0dc8725dc429ca0f59f34f851_0
2025-07-08 18:39:14,788 - semgrep.rule_match - DEBUG - match_key = ('\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n  </script>\n', PosixPath('static/quantonium-frontend.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = cb7bc27f06cb89a5d37b6be66ca33d32a116281dea7490ede849e43b18967e3f8cbb52a7466e20d829adacef02e0c5f4b7449bbbbfcb62b40081dfc2b8aea7d8_0
2025-07-08 18:39:14,792 - semgrep.rule_match - DEBUG - match_key = ('\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n  </script>\n', PosixPath('static/quantonium-frontend.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = cb7bc27f06cb89a5d37b6be66ca33d32a116281dea7490ede849e43b18967e3f8cbb52a7466e20d829adacef02e0c5f4b7449bbbbfcb62b40081dfc2b8aea7d8_0
2025-07-08 18:39:14,798 - semgrep.rule_match - DEBUG - match_key = ('\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Use the API\'s server URL when embedded in Squarespace\n    const API_URL = "https://quantum-shield-luisminier79.replit.app";\n    const API_KEY = "default_dev_key";\n\n    const headers = {\n      "Content-Type": "application/json",\n      "x-api-key": API_KEY\n    };\n\n    const tabs = document.querySelectorAll(".tab");\n    const panels = document.querySelectorAll(".panel");\n    tabs.forEach(tab => {\n      tab.onclick = () => {\n        tabs.forEach(t => t.classList.remove("active"));\n        panels.forEach(p => p.classList.remove("active"));\n        tab.classList.add("active");\n        document.getElementById(tab.dataset.panel).classList.add("active");\n      };\n    });\n\n    async function apiCall(endpoint, data) {\n      const res = await fetch(`${API_URL}/api${endpoint}`, {\n        method: "POST",\n        headers,\n        body: JSON.stringify(data)\n      });\n      if (!res.ok) throw new Error(`Error ${res.status}`);\n      return await res.json();\n    }\n\n    async function doEncrypt() {\n      const pt = document.getElementById("encrypt-plaintext").value;\n      const key = document.getElementById("encrypt-key").value;\n      const out = document.getElementById("encrypt-result");\n      const err = document.getElementById("encrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      try {\n        const res = await apiCall("/encrypt", { plaintext: pt, key });\n        out.textContent = res.ciphertext;\n        \n        // Add a button to try unlocking a container with this hash output\n        const containerUnlockBtn = document.createElement("button");\n        containerUnlockBtn.textContent = "Unlock Container with Hash";\n        containerUnlockBtn.style.marginTop = "10px";\n        containerUnlockBtn.style.display = "block";\n        containerUnlockBtn.onclick = () => {\n          // Switch to the container tab\n          tabs.forEach(t => t.classList.remove("active"));\n          panels.forEach(p => p.classList.remove("active"));\n          document.querySelector(\'[data-panel="container"]\').classList.add("active");\n          document.getElementById("container").classList.add("active");\n          \n          // Pre-fill the hash value in the container hash input\n          document.getElementById("container-hash").value = res.ciphertext;\n          // Leave the waveform empty to use auto detection of amplitude values\n          document.getElementById("container-waveform").value = "";\n          \n          // Trigger unlock with the hash (auto mode)\n          doUnlock();\n        };\n        out.appendChild(document.createElement("br"));\n        out.appendChild(containerUnlockBtn);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doDecrypt() {\n      const ct = document.getElementById("decrypt-ciphertext").value;\n      const key = document.getElementById("decrypt-key").value;\n      const out = document.getElementById("decrypt-result");\n      const err = document.getElementById("decrypt-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/decrypt", { ciphertext: ct, key });\n        out.textContent = res.plaintext;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doRFT() {\n      const str = document.getElementById("rft-waveform").value;\n      const out = document.getElementById("rft-result");\n      const err = document.getElementById("rft-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const waveform = str.split(",").map(s => parseFloat(s.trim()));\n        const res = await apiCall("/simulate/rft", { waveform });\n        out.textContent = JSON.stringify(res.frequencies, null, 2);\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doEntropy() {\n      const amount = parseInt(document.getElementById("entropy-amount").value);\n      const out = document.getElementById("entropy-result");\n      const err = document.getElementById("entropy-error");\n      out.textContent = "";\n      err.textContent = "";\n      try {\n        const res = await apiCall("/entropy/sample", { amount });\n        out.textContent = res.entropy;\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n\n    async function doUnlock() {\n      const str = document.getElementById("container-waveform").value;\n      const hash = document.getElementById("container-hash").value;\n      const out = document.getElementById("container-result");\n      const err = document.getElementById("container-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value";\n        return;\n      }\n      \n      try {\n        let res;\n        \n        // If waveform is empty, use auto-unlock with just the hash\n        if (!str || str.trim() === "") {\n          // Call the auto-unlock endpoint that will extract amplitude values from the hash\n          res = await apiCall("/container/auto-unlock", { hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked (Auto mode: hash key authentication successful)";\n            \n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Hash verification completed. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (No matching container found)";\n          }\n        } else {\n          // User provided a waveform, use traditional unlock\n          const waveform = str.split(",").map(s => parseFloat(s.trim()));\n          res = await apiCall("/container/unlock", { waveform, hash });\n          \n          if (res.unlocked) {\n            out.textContent = "✅ Container Unlocked";\n            // Add some details about the operation\n            const details = document.createElement("div");\n            details.style.marginTop = "10px";\n            details.style.color = "#8ff";\n            details.textContent = "Waveform resonance matched. Container data is now accessible.";\n            out.appendChild(details);\n            \n            // Display container information if available\n            if (res.container) {\n              const containerInfo = document.createElement("div");\n              containerInfo.style.marginTop = "15px";\n              containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n              containerInfo.style.padding = "10px";\n              containerInfo.style.borderRadius = "5px";\n              containerInfo.style.border = "1px solid #4af";\n              \n              // Create a table for container metadata\n              let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n              infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n              \n              // Add each piece of container metadata\n              if (res.container.created) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n              }\n              if (res.container.access_count) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n              }\n              if (res.container.last_accessed) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n              }\n              if (res.container.content_preview) {\n                infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n              }\n              \n              infoHTML += `</table>`;\n              containerInfo.innerHTML = infoHTML;\n              out.appendChild(containerInfo);\n            }\n          } else {\n            out.textContent = "❌ Access Denied (Resonance mismatch)";\n          }\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    async function doAutoUnlock() {\n      const hash = document.getElementById("auto-unlock-hash").value;\n      const out = document.getElementById("auto-unlock-result");\n      const err = document.getElementById("auto-unlock-error");\n      out.textContent = "";\n      err.textContent = "";\n      \n      if (!hash) {\n        err.textContent = "Please enter a hash value from encryption output";\n        return;\n      }\n      \n      try {\n        const res = await apiCall("/container/auto-unlock", { hash });\n        \n        if (res.unlocked) {\n          out.textContent = "✅ Success! Container automatically unlocked using encryption hash";\n          // Add details about the operation\n          const details = document.createElement("div");\n          details.style.marginTop = "10px";\n          details.style.color = "#8ff";\n          details.textContent = "Hash verification completed. Container data is now accessible.";\n          out.appendChild(details);\n          \n          // Display container information if available\n          if (res.container) {\n            const containerInfo = document.createElement("div");\n            containerInfo.style.marginTop = "15px";\n            containerInfo.style.backgroundColor = "rgba(0,30,60,0.5)";\n            containerInfo.style.padding = "10px";\n            containerInfo.style.borderRadius = "5px";\n            containerInfo.style.border = "1px solid #4af";\n            \n            // Create a table for container metadata\n            let infoHTML = `<div style="color: #aff; font-weight: bold; margin-bottom: 8px">Container Details:</div>`;\n            infoHTML += `<table style="width: 100%; border-collapse: collapse;">`;\n            \n            // Add each piece of container metadata\n            if (res.container.created) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Created:</td><td style="color: #fff; padding: 3px;">${res.container.created}</td></tr>`;\n            }\n            if (res.container.access_count) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Access Count:</td><td style="color: #fff; padding: 3px;">${res.container.access_count}</td></tr>`;\n            }\n            if (res.container.last_accessed) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Last Accessed:</td><td style="color: #fff; padding: 3px;">${res.container.last_accessed}</td></tr>`;\n            }\n            if (res.container.content_preview) {\n              infoHTML += `<tr><td style="color: #8af; padding: 3px;">Content:</td><td style="color: #fff; padding: 3px;">${res.container.content_preview}</td></tr>`;\n            }\n            \n            infoHTML += `</table>`;\n            containerInfo.innerHTML = infoHTML;\n            out.appendChild(containerInfo);\n          }\n          \n          // Add a button to copy the hash to clipboard for future use\n          const copyBtn = document.createElement("button");\n          copyBtn.textContent = "Copy Hash";\n          copyBtn.style.marginLeft = "10px";\n          copyBtn.style.marginTop = "10px";\n          copyBtn.onclick = () => {\n            navigator.clipboard.writeText(hash);\n            copyBtn.textContent = "Copied!";\n            setTimeout(() => copyBtn.textContent = "Copy Hash", 2000);\n          };\n          out.appendChild(copyBtn);\n        } else {\n          out.textContent = "❌ No matching container found for this hash";\n        }\n      } catch (e) {\n        err.textContent = e.message;\n      }\n    }\n    \n    // Function to generate a random waveform and immediately run RFT analysis\n    function generateRandomRFT() {\n      // Generate 7-10 random amplitude values (between 0 and 1)\n      const length = Math.floor(Math.random() * 4) + 7; // Random length between 7-10 \n      const waveform = [];\n      \n      for (let i = 0; i < length; i++) {\n        // Generate values with 1-4 decimal places for more "quantum-like" precision\n        const value = parseFloat((Math.random()).toFixed(4));\n        waveform.push(value);\n      }\n      \n      // Set the random waveform in the input field\n      document.getElementById("rft-waveform").value = waveform.join(",");\n      \n      // Automatically run the RFT on the generated waveform\n      doRFT();\n    }\n  </script>\n', PosixPath('static/quantonium-frontend.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = cb7bc27f06cb89a5d37b6be66ca33d32a116281dea7490ede849e43b18967e3f8cbb52a7466e20d829adacef02e0c5f4b7449bbbbfcb62b40081dfc2b8aea7d8_0
2025-07-08 18:39:14,801 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantonium-widget.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 4a80b873c88b86da4229d1ccf03d494e097283d2963ec413f4a339c89b032c403a2a28cfe8b72e5cff0df66f8dc31833ea66160ccf63273ecfe6287d800ef3fe_0
2025-07-08 18:39:14,803 - semgrep.rule_match - DEBUG - match_key = ('\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n    </script>\n', PosixPath('static/quantonium-widget.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 27ca5755fc1348bbcff3b361351565f24985322edca33b7a1acbff01bf2911ecb2e108b2fd0c3fecb0e22211ef454dde32bca9126222afa92583464ddb940d08_0
2025-07-08 18:39:14,805 - semgrep.rule_match - DEBUG - match_key = ('\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n    </script>\n', PosixPath('static/quantonium-widget.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 27ca5755fc1348bbcff3b361351565f24985322edca33b7a1acbff01bf2911ecb2e108b2fd0c3fecb0e22211ef454dde32bca9126222afa92583464ddb940d08_0
2025-07-08 18:39:14,807 - semgrep.rule_match - DEBUG - match_key = ('\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Change this to your actual deployed API endpoint URL\n        const API_URL = \'https://{YOUR-REPLIT-URL}.replit.app\';\n        \n        // API key - this should match the one on your server\n        const API_KEY = \'default_dev_key\';\n\n        // TAB NAVIGATION\n        document.querySelectorAll(\'.quantonium-tab\').forEach(tab => {\n            tab.addEventListener(\'click\', () => {\n                // Remove active class from all tabs\n                document.querySelectorAll(\'.quantonium-tab\').forEach(t => {\n                    t.classList.remove(\'active\');\n                });\n                \n                // Hide all content sections\n                document.querySelectorAll(\'.quantonium-content\').forEach(c => {\n                    c.classList.remove(\'active\');\n                });\n                \n                // Add active class to clicked tab\n                tab.classList.add(\'active\');\n                \n                // Show corresponding content\n                const tabName = tab.getAttribute(\'data-tab\');\n                document.getElementById(`${tabName}-tab`).classList.add(\'active\');\n            });\n        });\n\n        // HELPER FUNCTIONS\n        function showLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'block\';\n            document.getElementById(`${id}-result`).style.display = \'none\';\n            document.getElementById(`${id}-error`).innerText = \'\';\n        }\n\n        function hideLoader(id) {\n            document.getElementById(`${id}-loader`).style.display = \'none\';\n        }\n\n        function showResult(id, data) {\n            const resultElement = document.getElementById(`${id}-result`);\n            resultElement.style.display = \'block\';\n            resultElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n        }\n\n        function showError(id, message) {\n            document.getElementById(`${id}-error`).innerText = message;\n        }\n\n        async function apiCall(endpoint, data) {\n            try {\n                const response = await fetch(`${API_URL}/api${endpoint}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        \'X-API-Key\': API_KEY\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                throw error;\n            }\n        }\n\n        // ENCRYPT\n        document.getElementById(\'encrypt-submit\').addEventListener(\'click\', async () => {\n            const plaintext = document.getElementById(\'encrypt-plaintext\').value;\n            const key = document.getElementById(\'encrypt-key\').value;\n            \n            if (!plaintext || !key) {\n                showError(\'encrypt\', \'Please fill in all fields\');\n                return;\n            }\n\n            showLoader(\'encrypt\');\n            \n            try {\n                const result = await apiCall(\'/encrypt\', {\n                    plaintext,\n                    key\n                });\n                \n                hideLoader(\'encrypt\');\n                showResult(\'encrypt\', result);\n            } catch (error) {\n                hideLoader(\'encrypt\');\n                showError(\'encrypt\', `Error: ${error.message}`);\n            }\n        });\n\n        // RFT\n        document.getElementById(\'rft-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'rft-waveform\').value;\n            \n            if (!waveformStr) {\n                showError(\'rft\', \'Please enter a waveform\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'rft\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'rft\');\n            \n            try {\n                const result = await apiCall(\'/simulate/rft\', {\n                    waveform\n                });\n                \n                hideLoader(\'rft\');\n                showResult(\'rft\', result);\n            } catch (error) {\n                hideLoader(\'rft\');\n                showError(\'rft\', `Error: ${error.message}`);\n            }\n        });\n\n        // ENTROPY\n        document.getElementById(\'entropy-submit\').addEventListener(\'click\', async () => {\n            const amount = parseInt(document.getElementById(\'entropy-amount\').value);\n            \n            if (isNaN(amount) || amount < 1 || amount > 1024) {\n                showError(\'entropy\', \'Please enter a valid amount (1-1024)\');\n                return;\n            }\n\n            showLoader(\'entropy\');\n            \n            try {\n                const result = await apiCall(\'/entropy/sample\', {\n                    amount\n                });\n                \n                hideLoader(\'entropy\');\n                showResult(\'entropy\', result);\n            } catch (error) {\n                hideLoader(\'entropy\');\n                showError(\'entropy\', `Error: ${error.message}`);\n            }\n        });\n\n        // CONTAINER\n        document.getElementById(\'container-submit\').addEventListener(\'click\', async () => {\n            const waveformStr = document.getElementById(\'container-waveform\').value;\n            const hash = document.getElementById(\'container-hash\').value;\n            \n            if (!waveformStr || !hash) {\n                showError(\'container\', \'Please fill in all fields\');\n                return;\n            }\n\n            // Parse comma-separated values\n            const waveform = waveformStr.split(\',\').map(v => parseFloat(v.trim()));\n            if (waveform.some(isNaN)) {\n                showError(\'container\', \'Invalid waveform format. Please use comma-separated numbers\');\n                return;\n            }\n\n            showLoader(\'container\');\n            \n            try {\n                const result = await apiCall(\'/container/unlock\', {\n                    waveform,\n                    hash\n                });\n                \n                hideLoader(\'container\');\n                showResult(\'container\', result);\n            } catch (error) {\n                hideLoader(\'container\');\n                showError(\'container\', `Error: ${error.message}`);\n            }\n        });\n    </script>\n', PosixPath('static/quantonium-widget.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 27ca5755fc1348bbcff3b361351565f24985322edca33b7a1acbff01bf2911ecb2e108b2fd0c3fecb0e22211ef454dde32bca9126222afa92583464ddb940d08_0
2025-07-08 18:39:14,816 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantonium_os.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = ea97334c42a4775ed99740f1649b987c51dbf201cc7fab23f23000f2d52783712e2eea5ff33adb195c4f108bac52fbb4e96618d9683fcd98e68f082a56d76f06_0
2025-07-08 18:39:14,825 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n    </script>\n', PosixPath('static/quantonium_os.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 06496a0872f5ed90820fb16c834952fe8fdb5acd8ea84b3046e381e8e7fb3c08be20b910dcfda41ce0c37fd7d6f65e4e5b6238866439ae79eebbb9fb4b8a8d2a_0
2025-07-08 18:39:14,835 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n    </script>\n', PosixPath('static/quantonium_os.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 06496a0872f5ed90820fb16c834952fe8fdb5acd8ea84b3046e381e8e7fb3c08be20b910dcfda41ce0c37fd7d6f65e4e5b6238866439ae79eebbb9fb4b8a8d2a_0
2025-07-08 18:39:14,845 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Clock update\n            function updateClock() {\n                const now = new Date();\n                const timeStr = now.toLocaleTimeString();\n                const dateStr = now.toLocaleDateString();\n                document.getElementById(\'clock\').textContent = `${dateStr} ${timeStr}`;\n            }\n            updateClock();\n            setInterval(updateClock, 1000);\n            \n            // Arch toggle\n            const arch = document.getElementById(\'arch\');\n            arch.addEventListener(\'click\', function() {\n                this.classList.toggle(\'expanded\');\n            });\n            \n            // App launching\n            const appIcons = document.querySelectorAll(\'.app-icon\');\n            appIcons.forEach(icon => {\n                icon.addEventListener(\'click\', function() {\n                    const appType = this.getAttribute(\'data-type\');\n                    if (appType === \'web\') {\n                        const url = this.getAttribute(\'data-url\');\n                        openWebApp(url);\n                    } else if (appType === \'internal\') {\n                        const appName = this.getAttribute(\'data-app\');\n                        openInternalApp(appName, this.getAttribute(\'data-title\'));\n                    } else {\n                        const appName = this.getAttribute(\'data-app\');\n                        launchDesktopApp(appName);\n                    }\n                });\n            });\n            \n            // Function to launch desktop app\n            function launchDesktopApp(appName) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Launching ${appName}...`;\n                statusMessage.className = \'show\';\n                \n                fetch(\'/api/launch-app\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ app: appName }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        statusMessage.textContent = data.message;\n                        statusMessage.classList.add(\'success\');\n                    } else {\n                        statusMessage.textContent = `Error: ${data.error}`;\n                        statusMessage.classList.add(\'error\');\n                    }\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                })\n                .catch(error => {\n                    statusMessage.textContent = `Error launching app: ${error.message}`;\n                    statusMessage.classList.add(\'error\');\n                    \n                    // Hide the message after 3 seconds\n                    setTimeout(() => {\n                        statusMessage.classList.remove(\'show\');\n                    }, 3000);\n                });\n            }\n            \n            // Window management\n            let zIndexCounter = 100;\n            let activeWindow = null;\n            const openWindows = new Map();\n            const minimizedWindows = new Map();\n            \n            // Function to create a new window\n            function createWindow(url, title, width = 800, height = 600) {\n                // Check if window already exists\n                if (openWindows.has(url)) {\n                    // Bring to front\n                    const existingWindow = document.getElementById(`window-${openWindows.get(url)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    // If minimized, restore it\n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(url);\n                    }\n                    \n                    return;\n                }\n                \n                const windowId = Date.now();\n                openWindows.set(url, windowId);\n                \n                // Create window elements\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `${(window.innerWidth - width) / 2}px`;\n                windowElement.style.top = `${(window.innerHeight - height) / 2}px`;\n                windowElement.dataset.url = url;\n                windowElement.dataset.title = title;\n                \n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.textContent = getIconForUrl(url);\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeButton = document.createElement(\'div\');\n                minimizeButton.className = \'window-control minimize\';\n                minimizeButton.innerHTML = \'&#8211;\';\n                \n                const maximizeButton = document.createElement(\'div\');\n                maximizeButton.className = \'window-control maximize\';\n                maximizeButton.innerHTML = \'&#9744;\';\n                \n                const closeButton = document.createElement(\'div\');\n                closeButton.className = \'window-control close\';\n                closeButton.innerHTML = \'&#10005;\';\n                \n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                const iframe = document.createElement(\'iframe\');\n                iframe.className = \'window-iframe\';\n                iframe.src = url;\n                iframe.setAttribute(\'frameborder\', \'0\');\n                \n                // Add all elements to the DOM\n                windowControls.appendChild(minimizeButton);\n                windowControls.appendChild(maximizeButton);\n                windowControls.appendChild(closeButton);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                windowBody.appendChild(iframe);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                // Make active\n                setActiveWindow(windowElement);\n                \n                // Add event listeners\n                windowElement.addEventListener(\'mousedown\', () => {\n                    setActiveWindow(windowElement);\n                });\n                \n                minimizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    minimizeWindow(url);\n                });\n                \n                maximizeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    toggleMaximizeWindow(url, width, height);\n                });\n                \n                closeButton.addEventListener(\'click\', (e) => {\n                    e.stopPropagation();\n                    closeWindow(windowElement, url);\n                });\n                \n                // Make window draggable\n                makeDraggable(windowElement, windowHeader);\n                \n                // Update taskbar\n                updateTaskbar();\n                \n                return windowElement;\n            }\n            \n            // Function to minimize a window\n            function minimizeWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.add(\'minimized\');\n                    minimizedWindows.set(url, windowId);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to restore a minimized window\n            function restoreWindow(url) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    windowElement.classList.remove(\'minimized\');\n                    minimizedWindows.delete(url);\n                    setActiveWindow(windowElement);\n                    updateTaskbar();\n                }\n            }\n            \n            // Function to toggle maximize state of a window\n            function toggleMaximizeWindow(url, defaultWidth = 800, defaultHeight = 600) {\n                if (!openWindows.has(url)) return;\n                \n                const windowId = openWindows.get(url);\n                const windowElement = document.getElementById(`window-${windowId}`);\n                \n                if (windowElement) {\n                    if (windowElement.classList.contains(\'maximized\')) {\n                        // Restore\n                        windowElement.classList.remove(\'maximized\');\n                        windowElement.style.width = `${defaultWidth}px`;\n                        windowElement.style.height = `${defaultHeight}px`;\n                        windowElement.style.left = `${(window.innerWidth - defaultWidth) / 2}px`;\n                        windowElement.style.top = `${(window.innerHeight - defaultHeight) / 2}px`;\n                    } else {\n                        // Maximize\n                        windowElement.classList.add(\'maximized\');\n                        windowElement.style.width = \'100%\';\n                        windowElement.style.height = \'calc(100% - 40px)\';\n                        windowElement.style.left = \'0\';\n                        windowElement.style.top = \'0\';\n                    }\n                    setActiveWindow(windowElement);\n                }\n            }\n            \n            // Function to close a window\n            function closeWindow(windowElement, url) {\n                document.getElementById(\'windows-container\').removeChild(windowElement);\n                openWindows.delete(url);\n                minimizedWindows.delete(url);\n                updateTaskbar();\n            }\n            \n            // Function to set active window\n            function setActiveWindow(windowElement) {\n                if (activeWindow) {\n                    activeWindow.classList.remove(\'active\');\n                }\n                activeWindow = windowElement;\n                activeWindow.classList.add(\'active\');\n                activeWindow.style.zIndex = ++zIndexCounter;\n            }\n            \n            // Function to update the taskbar\n            function updateTaskbar() {\n                const taskbar = document.getElementById(\'taskbar\');\n                taskbar.innerHTML = \'\';\n                \n                // Count total open windows\n                const totalWindows = openWindows.size;\n                \n                if (totalWindows === 0) {\n                    taskbar.style.display = \'none\';\n                    return;\n                }\n                \n                taskbar.style.display = \'flex\';\n                \n                // Add all windows to taskbar\n                openWindows.forEach((windowId, url) => {\n                    const windowElement = document.getElementById(`window-${windowId}`);\n                    if (!windowElement) return;\n                    \n                    const isMinimized = windowElement.classList.contains(\'minimized\');\n                    const title = windowElement.dataset.title || \'Window\';\n                    const icon = getIconForUrl(url);\n                    \n                    const taskItem = document.createElement(\'div\');\n                    taskItem.className = \'taskbar-item\';\n                    taskItem.textContent = icon;\n                    taskItem.title = title;\n                    \n                    if (windowElement === activeWindow && !isMinimized) {\n                        taskItem.style.backgroundColor = \'rgba(31, 147, 255, 0.5)\';\n                    }\n                    \n                    taskItem.addEventListener(\'click\', () => {\n                        if (isMinimized) {\n                            restoreWindow(url);\n                        } else if (windowElement === activeWindow) {\n                            minimizeWindow(url);\n                        } else {\n                            setActiveWindow(windowElement);\n                        }\n                    });\n                    \n                    taskbar.appendChild(taskItem);\n                });\n            }\n            \n            // Function to make an element draggable\n            function makeDraggable(element, dragHandle) {\n                let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n                \n                dragHandle.onmousedown = dragMouseDown;\n                \n                function dragMouseDown(e) {\n                    e.preventDefault();\n                    // Get the mouse cursor position at startup\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    document.onmouseup = closeDragElement;\n                    // Call a function whenever the cursor moves\n                    document.onmousemove = elementDrag;\n                }\n                \n                function elementDrag(e) {\n                    e.preventDefault();\n                    // Calculate the new cursor position\n                    pos1 = pos3 - e.clientX;\n                    pos2 = pos4 - e.clientY;\n                    pos3 = e.clientX;\n                    pos4 = e.clientY;\n                    \n                    // Ensure the window stays maximized if it was maximized\n                    if (element.classList.contains(\'maximized\')) {\n                        element.classList.remove(\'maximized\');\n                        element.style.width = \'800px\';\n                        element.style.height = \'600px\';\n                    }\n                    \n                    // Set the element\'s new position\n                    element.style.top = (element.offsetTop - pos2) + "px";\n                    element.style.left = (element.offsetLeft - pos1) + "px";\n                }\n                \n                function closeDragElement() {\n                    // Stop moving when mouse button is released\n                    document.onmouseup = null;\n                    document.onmousemove = null;\n                }\n            }\n            \n            // Helper function to get icon for URL\n            function getIconForUrl(url) {\n                if (url.includes(\'quantum-encryption\')) return \'🔐\';\n                if (url.includes(\'quantum-rft\')) return \'📊\';\n                if (url.includes(\'quantum-container\')) return \'📦\';\n                if (url.includes(\'quantum-entropy\')) return \'🎲\';\n                if (url.includes(\'quantum-benchmark\')) return \'⚡\';\n                return \'🔮\';\n            }\n            \n            // Function to open web app in window\n            function openWebApp(url) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${url}...`;\n                statusMessage.className = \'show success\';\n                \n                // Get title from the data-title attribute\n                const appIcon = document.querySelector(`.app-icon[data-url="${url}"]`);\n                const title = appIcon ? appIcon.getAttribute(\'data-title\') : \'QuantoniumOS\';\n                \n                // Create window\n                createWindow(url, title);\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to open internal app (not requiring iframe)\n            function openInternalApp(appName, title) {\n                const statusMessage = document.getElementById(\'status-message\');\n                statusMessage.textContent = `Opening ${title || appName}...`;\n                statusMessage.className = \'show success\';\n                \n                if (appName === \'encryption\') {\n                    // Create encryption app\n                    createEncryptionApp(title || \'Quantum Encryption\');\n                }\n                \n                // Hide the message after 1 second\n                setTimeout(() => {\n                    statusMessage.classList.remove(\'show\');\n                }, 1000);\n            }\n            \n            // Function to create encryption app\n            function createEncryptionApp(title) {\n                const width = 700;\n                const height = 600;\n                const windowId = Date.now();\n                const appUrl = \'internal-encryption\';\n                \n                // Check if window already exists\n                if (openWindows.has(appUrl)) {\n                    const existingWindow = document.getElementById(`window-${openWindows.get(appUrl)}`);\n                    existingWindow.style.zIndex = ++zIndexCounter;\n                    setActiveWindow(existingWindow);\n                    \n                    if (existingWindow.classList.contains(\'minimized\')) {\n                        restoreWindow(appUrl);\n                    }\n                    \n                    return;\n                }\n                \n                openWindows.set(appUrl, windowId);\n                \n                // Create window\n                const windowElement = document.createElement(\'div\');\n                windowElement.className = \'window active\';\n                windowElement.id = `window-${windowId}`;\n                windowElement.style.zIndex = ++zIndexCounter;\n                windowElement.style.width = `${width}px`;\n                windowElement.style.height = `${height}px`;\n                windowElement.style.left = `calc(50% - ${width/2}px)`;\n                windowElement.style.top = `calc(50% - ${height/2}px)`;\n                \n                // Create window header\n                const windowHeader = document.createElement(\'div\');\n                windowHeader.className = \'window-header\';\n                \n                const windowIcon = document.createElement(\'div\');\n                windowIcon.className = \'window-icon\';\n                windowIcon.innerHTML = \'🔐\';\n                \n                const windowTitle = document.createElement(\'div\');\n                windowTitle.className = \'window-title\';\n                windowTitle.textContent = title;\n                \n                const windowControls = document.createElement(\'div\');\n                windowControls.className = \'window-controls\';\n                \n                const minimizeBtn = document.createElement(\'div\');\n                minimizeBtn.className = \'window-control minimize\';\n                minimizeBtn.textContent = \'_\';\n                minimizeBtn.addEventListener(\'click\', () => minimizeWindow(appUrl));\n                \n                const maximizeBtn = document.createElement(\'div\');\n                maximizeBtn.className = \'window-control maximize\';\n                maximizeBtn.textContent = \'□\';\n                maximizeBtn.addEventListener(\'click\', () => toggleMaximizeWindow(appUrl, width, height));\n                \n                const closeBtn = document.createElement(\'div\');\n                closeBtn.className = \'window-control close\';\n                closeBtn.textContent = \'×\';\n                closeBtn.addEventListener(\'click\', () => closeWindow(windowElement, appUrl));\n                \n                windowControls.appendChild(minimizeBtn);\n                windowControls.appendChild(maximizeBtn);\n                windowControls.appendChild(closeBtn);\n                \n                windowHeader.appendChild(windowIcon);\n                windowHeader.appendChild(windowTitle);\n                windowHeader.appendChild(windowControls);\n                \n                // Create window body\n                const windowBody = document.createElement(\'div\');\n                windowBody.className = \'window-body\';\n                \n                // Create encryption app content\n                const appContent = document.createElement(\'div\');\n                appContent.className = \'encryption-app\';\n                appContent.innerHTML = `\n                    <h3>Quantum Encryption</h3>\n                    \n                    <div class="encryption-tabs">\n                        <div class="encryption-tab active" data-tab="encrypt">Encrypt</div>\n                        <div class="encryption-tab" data-tab="decrypt">Decrypt</div>\n                    </div>\n                    \n                    <div class="encryption-tab-content active" id="encrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Plain Text:</label>\n                            <textarea id="plaintext-${windowId}" placeholder="Enter text to encrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Encryption Key:</label>\n                            <input type="text" id="encrypt-key-${windowId}" placeholder="Enter encryption key...">\n                        </div>\n                        <button class="encryption-btn" id="encrypt-btn-${windowId}">Encrypt</button>\n                        <div class="encryption-loader" id="encrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="encrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Encrypted Result:</label>\n                            <div id="encrypt-output-${windowId}" class="encryption-result">// Encrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="match-indicator-${windowId}">Ready for encryption</div>\n                            <div class="visualization-waves">\n                                <div id="wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Quantum Grid Visualization -->\n                        <div class="quantum-grid-visualization">\n                            <h3>Quantum Grid Visualization (150 Qubits)</h3>\n                            <div class="grid-container">\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container1-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 1-75</div>\n                                </div>\n                                <div class="grid-canvas-container">\n                                    <canvas id="grid-container2-canvas-${windowId}" width="400" height="200"></canvas>\n                                    <div class="grid-label">Qubits 76-150</div>\n                                </div>\n                            </div>\n                            <div class="grid-oscillator-container">\n                                <canvas id="grid-oscillator-canvas-${windowId}" width="800" height="100"></canvas>\n                                <div class="grid-label">Resonance Oscillator</div>\n                            </div>\n                            <div class="grid-controls">\n                                <div class="frequency-control">\n                                    <label for="grid-frequency-slider-${windowId}">Grid Frequency: \n                                        <span id="grid-frequency-value-${windowId}">1.0</span>\n                                    </label>\n                                    <input type="range" id="grid-frequency-slider-${windowId}" min="0.1" max="2.0" step="0.1" value="1.0">\n                                </div>\n                                <button id="grid-toggle-oscillator-${windowId}" class="grid-btn">Toggle Oscillator</button>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="encrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Quantum Entropy</div>\n                                <div class="encryption-metric-value" id="encrypt-entropy-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="encryption-tab-content" id="decrypt-tab">\n                        <div class="encryption-form-group">\n                            <label>Cipher Text:</label>\n                            <textarea id="ciphertext-${windowId}" placeholder="Enter ciphertext to decrypt..."></textarea>\n                        </div>\n                        <div class="encryption-form-group">\n                            <label>Decryption Key:</label>\n                            <input type="text" id="decrypt-key-${windowId}" placeholder="Enter decryption key...">\n                        </div>\n                        <button class="encryption-btn" id="decrypt-btn-${windowId}">Decrypt</button>\n                        <div class="encryption-loader" id="decrypt-loader-${windowId}"></div>\n                        <div class="encryption-error" id="decrypt-error-${windowId}"></div>\n                        <div class="encryption-form-group">\n                            <label>Decrypted Result:</label>\n                            <div id="decrypt-output-${windowId}" class="encryption-result">// Decrypted output will appear here</div>\n                        </div>\n                        \n                        <!-- Waveform visualization container -->\n                        <div class="waveform-match-visualization">\n                            <div class="match-indicator" id="decrypt-match-indicator-${windowId}">Ready for decryption</div>\n                            <div class="visualization-waves">\n                                <div id="decrypt-wave-animation-container-${windowId}"></div>\n                            </div>\n                        </div>\n                        \n                        <div class="encryption-metrics">\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Wave Coherence</div>\n                                <div class="encryption-metric-value" id="decrypt-coherence-${windowId}">0.00</div>\n                            </div>\n                            <div class="encryption-metric">\n                                <div class="encryption-metric-title">Symbolic Variance</div>\n                                <div class="encryption-metric-value" id="decrypt-variance-${windowId}">0.00</div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                windowBody.appendChild(appContent);\n                \n                windowElement.appendChild(windowHeader);\n                windowElement.appendChild(windowBody);\n                \n                document.getElementById(\'windows-container\').appendChild(windowElement);\n                \n                setActiveWindow(windowElement);\n                makeDraggable(windowElement, windowHeader);\n                \n                // Add to taskbar\n                updateTaskbar();\n                \n                // Setup the encryption app functionality\n                setupEncryptionApp(windowId);\n            }\n            \n            // Setup encryption app functionality\n            function setupEncryptionApp(windowId) {\n                // Tab functionality\n                const tabs = document.querySelectorAll(\'.encryption-tab\');\n                tabs.forEach(tab => {\n                    tab.addEventListener(\'click\', function() {\n                        // Remove active class from all tabs in this app\n                        const appTabs = this.closest(\'.encryption-tabs\').querySelectorAll(\'.encryption-tab\');\n                        appTabs.forEach(t => t.classList.remove(\'active\'));\n                        \n                        // Add active class to clicked tab\n                        this.classList.add(\'active\');\n                        \n                        // Hide all tab content in this app\n                        const appContent = this.closest(\'.encryption-app\');\n                        appContent.querySelectorAll(\'.encryption-tab-content\').forEach(content => {\n                            content.classList.remove(\'active\');\n                        });\n                        \n                        // Show selected tab content\n                        const tabName = this.getAttribute(\'data-tab\');\n                        appContent.querySelector(`#${tabName}-tab`).classList.add(\'active\');\n                    });\n                });\n                \n                // Encrypt functionality\n                const encryptBtn = document.getElementById(`encrypt-btn-${windowId}`);\n                const encryptError = document.getElementById(`encrypt-error-${windowId}`);\n                const encryptLoader = document.getElementById(`encrypt-loader-${windowId}`);\n                const encryptOutput = document.getElementById(`encrypt-output-${windowId}`);\n                const encryptCoherence = document.getElementById(`encrypt-coherence-${windowId}`);\n                const encryptEntropy = document.getElementById(`encrypt-entropy-${windowId}`);\n                \n                // Wave path creation functions now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                // Wave visualization function now loaded from external JS\n                // See /static/wave_ui/wave_visualization.js\n                \n                // Update match indicator function now loaded from external JS\n                // See /wave_ui/wave_visualization.js\n                \n                encryptBtn.addEventListener(\'click\', function() {\n                    const plaintext = document.getElementById(`plaintext-${windowId}`).value.trim();\n                    const key = document.getElementById(`encrypt-key-${windowId}`).value.trim();\n                    const matchIndicator = document.getElementById(`match-indicator-${windowId}`);\n                    const waveContainer = document.getElementById(`wave-animation-container-${windowId}`);\n                    \n                    if (!plaintext) {\n                        encryptError.textContent = \'Please enter text to encrypt\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        encryptError.textContent = \'Please enter an encryption key\';\n                        encryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    encryptError.style.display = \'none\';\n                    encryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`match-indicator-${windowId}`, \'checking\', \'Analyzing resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, plaintext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/encrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            plaintext: plaintext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Encryption failed. Please try again.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        encryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'matched\', \'Resonance match complete: Container sealed\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`wave-animation-container-${windowId}`, data.encrypted || data.ciphertext || \'default-seed\', true);\n                        \n                        // Display result\n                        if (data.encrypted) {\n                            encryptOutput.textContent = data.encrypted;\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        } else if (data.ciphertext) {\n                            encryptOutput.textContent = data.ciphertext;\n                            encryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.95\';\n                            encryptEntropy.textContent = data.quantum_entropy ? data.quantum_entropy.toFixed(2) : \'0.78\';\n                        } else {\n                            encryptOutput.textContent = JSON.stringify(data);\n                            encryptCoherence.textContent = \'0.95\';\n                            encryptEntropy.textContent = \'0.78\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        encryptLoader.style.display = \'none\';\n                        encryptError.textContent = error.message;\n                        encryptError.style.display = \'block\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`match-indicator-${windowId}`, \'error\', \'Resonance match failed: \' + error.message);\n                    });\n                });\n                \n                // Decrypt functionality\n                const decryptBtn = document.getElementById(`decrypt-btn-${windowId}`);\n                const decryptError = document.getElementById(`decrypt-error-${windowId}`);\n                const decryptLoader = document.getElementById(`decrypt-loader-${windowId}`);\n                const decryptOutput = document.getElementById(`decrypt-output-${windowId}`);\n                const decryptCoherence = document.getElementById(`decrypt-coherence-${windowId}`);\n                const decryptVariance = document.getElementById(`decrypt-variance-${windowId}`);\n                \n                decryptBtn.addEventListener(\'click\', function() {\n                    const ciphertext = document.getElementById(`ciphertext-${windowId}`).value.trim();\n                    const key = document.getElementById(`decrypt-key-${windowId}`).value.trim();\n                    \n                    if (!ciphertext) {\n                        decryptError.textContent = \'Please enter ciphertext to decrypt\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    if (!key) {\n                        decryptError.textContent = \'Please enter a decryption key\';\n                        decryptError.style.display = \'block\';\n                        return;\n                    }\n                    \n                    // Hide error and show loader\n                    decryptError.style.display = \'none\';\n                    decryptLoader.style.display = \'block\';\n                    \n                    // Update match indicator\n                    updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'checking\', \'Verifying resonance patterns...\');\n                    \n                    // Update quantum grid visualization\n                    updateQuantumGridForEncryption(windowId, ciphertext, key);\n                    \n                    // Call API\n                    fetch(\'/api/quantum/decrypt\', {\n                        method: \'POST\',\n                        headers: {\n                            \'Content-Type\': \'application/json\'\n                        },\n                        body: JSON.stringify({\n                            ciphertext: ciphertext,\n                            key: key\n                        })\n                    })\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(\'Decryption failed. Please check your key.\');\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        // Hide loader\n                        decryptLoader.style.display = \'none\';\n                        \n                        // Update match indicator\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'matched\', \'Resonance match verified: Container unlocked\');\n                        \n                        // Generate wave visualization\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, ciphertext, true);\n                        \n                        // Display result\n                        if (data.decrypted) {\n                            decryptOutput.textContent = data.decrypted;\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        } else if (data.plaintext) {\n                            decryptOutput.textContent = data.plaintext;\n                            decryptCoherence.textContent = data.wave_coherence ? data.wave_coherence.toFixed(2) : \'0.92\';\n                            decryptVariance.textContent = data.symbolic_variance ? data.symbolic_variance.toFixed(2) : \'0.14\';\n                        } else {\n                            decryptOutput.textContent = JSON.stringify(data);\n                            decryptCoherence.textContent = \'0.92\';\n                            decryptVariance.textContent = \'0.14\';\n                        }\n                    })\n                    .catch(error => {\n                        // Hide loader and show error\n                        decryptLoader.style.display = \'none\';\n                        decryptError.textContent = error.message;\n                        decryptError.style.display = \'block\';\n                        \n                        // Update match indicator and show error state\n                        updateMatchIndicator(`decrypt-match-indicator-${windowId}`, \'mismatched\', \'Resonance mismatch: \' + error.message);\n                        \n                        // Show mismatched wave\n                        createWaveVisualization(`decrypt-wave-animation-container-${windowId}`, Math.random().toString(), false);\n                    });\n                });\n            }\n        });\n    </script>\n', PosixPath('static/quantonium_os.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 06496a0872f5ed90820fb16c834952fe8fdb5acd8ea84b3046e381e8e7fb3c08be20b910dcfda41ce0c37fd7d6f65e4e5b6238866439ae79eebbb9fb4b8a8d2a_0
2025-07-08 18:39:14,853 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 38ae920c2cc9a57edd5db3a1911587f49aa242111e942db46949edbf38286bc164b2c8772f3b1f0259596eecdab91f2d300603e955b53d64825f2c3341099dde_0
2025-07-08 18:39:14,860 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n    </script>\n', PosixPath('static/quantum-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 05ad3b3d73c0fe22629d7ae39afbf14ad8ecb1b6c051667d3bf6c013f90ad37bd9f18dd0baeda6492f7253f19097b11007b24155ceb0a875ee410800dbf2c9a7_0
2025-07-08 18:39:14,866 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n    </script>\n', PosixPath('static/quantum-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 05ad3b3d73c0fe22629d7ae39afbf14ad8ecb1b6c051667d3bf6c013f90ad37bd9f18dd0baeda6492f7253f19097b11007b24155ceb0a875ee410800dbf2c9a7_0
2025-07-08 18:39:14,871 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        // DOM elements\n        const benchmarkTypeSelect = document.getElementById(\'benchmark-type\');\n        const visualizationTypeSelect = document.getElementById(\'visualization-type\');\n        const runBenchmarkButton = document.getElementById(\'run-benchmark\');\n        const exportResultsButton = document.getElementById(\'export-results\');\n        const exportCsvButton = document.getElementById(\'export-csv\');\n        const benchmarkDisplay = document.getElementById(\'benchmark-display\');\n        const statusIndicator = document.getElementById(\'status-indicator\');\n        const statusText = document.getElementById(\'status-text\');\n        const efficiencyChart = document.getElementById(\'efficiency-chart\');\n        const responseChart = document.getElementById(\'response-chart\');\n        const waveCanvas = document.getElementById(\'wave-canvas\');\n        const efficiencyLoading = document.getElementById(\'efficiency-loading\');\n        const responseLoading = document.getElementById(\'response-loading\');\n        \n        // Chart contexts\n        const efficiencyCtx = efficiencyChart.getContext(\'2d\');\n        const responseCtx = responseChart.getContext(\'2d\');\n        const waveCtx = waveCanvas.getContext(\'2d\');\n        \n        // State variables\n        let benchmarkType = \'standard\';\n        let visualizationType = \'wave\';\n        let benchmarkRunning = false;\n        let benchmarkResults = null;\n        let animationFrameId = null;\n        \n        // Update chart type when select changes\n        benchmarkTypeSelect.addEventListener(\'change\', () => {\n            benchmarkType = benchmarkTypeSelect.value;\n        });\n        \n        visualizationTypeSelect.addEventListener(\'change\', () => {\n            visualizationType = visualizationTypeSelect.value;\n            if (benchmarkResults) {\n                updateVisualization();\n            }\n        });\n        \n        // Run benchmark button\n        runBenchmarkButton.addEventListener(\'click\', () => {\n            if (benchmarkRunning) {\n                return;\n            }\n            \n            // Update UI\n            benchmarkRunning = true;\n            statusIndicator.className = \'status-indicator running\';\n            statusText.textContent = \'Running benchmark...\';\n            benchmarkDisplay.textContent = \'Initializing benchmark...\';\n            \n            // Show loading overlays\n            efficiencyLoading.classList.add(\'active\');\n            responseLoading.classList.add(\'active\');\n            \n            // Clear previous animation frame if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Simulate benchmark progress and results\n            let progress = 0;\n            const progressInterval = setInterval(() => {\n                progress += 5;\n                updateBenchmarkProgress(progress);\n                \n                if (progress >= 100) {\n                    clearInterval(progressInterval);\n                    completeBenchmark();\n                }\n            }, 500);\n        });\n        \n        // Export results as JSON button\n        exportResultsButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Convert results to string format\n            const resultsString = JSON.stringify(benchmarkResults, null, 2);\n            \n            // Display JSON in new area\n            benchmarkDisplay.innerHTML = \'<h3>JSON Export</h3>\' +\n                \'<p>Copy the content below to save as JSON:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                resultsString + \n                \'</textarea>\' +\n                \'<p><button id="copy-json" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-json\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'JSON data copied to clipboard!\');\n            });\n        });\n        \n        // Export results as CSV button\n        exportCsvButton.addEventListener(\'click\', () => {\n            if (!benchmarkResults) {\n                alert(\'Please run a benchmark first.\');\n                return;\n            }\n            \n            // Create CSV content\n            let csvContent = "Perturbation ID,Efficiency,Response Time (ms),Stability,Status\\n";\n            \n            // Add data rows\n            benchmarkResults.perturbations.forEach(p => {\n                csvContent += `${p.id},${p.efficiency},${p.responseTime},${p.stability},${p.status}\\n`;\n            });\n            \n            // Display CSV in new area\n            benchmarkDisplay.innerHTML = \'<h3>CSV Export</h3>\' +\n                \'<p>Copy the content below to save as CSV:</p>\' +\n                \'<textarea style="width: 100%; height: 200px; background-color: #111; color: #00b7ff; border: 1px solid #333; padding: 10px; font-family: monospace; white-space: pre; overflow: auto;">\' + \n                csvContent + \n                \'</textarea>\' +\n                \'<p><button id="copy-csv" style="margin-top: 10px;">Copy to Clipboard</button></p>\';\n            \n            // Add copy button functionality\n            document.getElementById(\'copy-csv\').addEventListener(\'click\', () => {\n                const textarea = document.querySelector(\'textarea\');\n                textarea.select();\n                document.execCommand(\'copy\');\n                alert(\'CSV data copied to clipboard!\');\n            });\n        });\n        \n        // Update benchmark progress\n        function updateBenchmarkProgress(progress) {\n            benchmarkDisplay.textContent = `Running benchmark: ${progress}% complete...\n${progress < 30 ? \'Initializing perturbation modules...\' : \'\'}\n${progress >= 30 && progress < 60 ? \'Processing quantum-inspired matrix operations...\' : \'\'}\n${progress >= 60 && progress < 90 ? \'Calculating stability metrics...\' : \'\'}\n${progress >= 90 ? \'Finalizing results...\' : \'\'}`;\n        }\n        \n        // Complete benchmark and display results\n        function completeBenchmark() {\n            // Simulate benchmark results\n            benchmarkResults = generateBenchmarkResults();\n            \n            // Update UI\n            benchmarkRunning = false;\n            statusIndicator.className = \'status-indicator complete\';\n            statusText.textContent = \'Benchmark complete\';\n            \n            // Hide loading overlays\n            efficiencyLoading.classList.remove(\'active\');\n            responseLoading.classList.remove(\'active\');\n            \n            // Update visualizations\n            updateVisualization();\n            \n            // Display text results\n            displayBenchmarkResults();\n        }\n        \n        // Generate simulated benchmark results\n        function generateBenchmarkResults() {\n            const perturbationCount = benchmarkType === \'standard\' ? 64 : \n                                      benchmarkType === \'extended\' ? 128 : 150;\n            \n            const results = {\n                timestamp: new Date().toISOString(),\n                perturbationCount,\n                totalDuration: Math.round(1500 + Math.random() * 500),\n                averageResponseTime: Math.round(8 + Math.random() * 4),\n                stability: Math.round((95 + Math.random() * 5) * 100) / 100,\n                perturbations: []\n            };\n            \n            // Generate data for each perturbation\n            for (let i = 0; i < perturbationCount; i++) {\n                results.perturbations.push({\n                    id: i + 1,\n                    efficiency: Math.round((85 + Math.random() * 15) * 10) / 10,\n                    responseTime: Math.round(5 + Math.random() * 10),\n                    phaseAlignment: Math.round((90 + Math.random() * 10) * 10) / 10,\n                    amplitude: Math.round((0.3 + Math.random() * 0.7) * 100) / 100,\n                    frequency: Math.round((0.2 + Math.random() * 0.8) * 100) / 100,\n                    stability: Math.round((92 + Math.random() * 8) * 10) / 10,\n                    status: Math.random() > 0.95 ? \'Warning\' : \'Normal\'\n                });\n            }\n            \n            return results;\n        }\n        \n        // Update visualization based on selected type\n        function updateVisualization() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            // Draw efficiency chart\n            drawEfficiencyChart();\n            \n            // Draw response time chart\n            drawResponseChart();\n            \n            // Draw wave visualization\n            drawWaveVisualization();\n        }\n        \n        // Draw the efficiency chart\n        function drawEfficiencyChart() {\n            // Clear canvas\n            efficiencyCtx.clearRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Set background color\n            efficiencyCtx.fillStyle = \'#0a0a0a\';\n            efficiencyCtx.fillRect(0, 0, efficiencyChart.width, efficiencyChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = efficiencyChart.width;\n            const height = efficiencyChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract efficiency data\n            const data = benchmarkResults.perturbations.map(p => p.efficiency);\n            \n            // Draw axes\n            efficiencyCtx.strokeStyle = \'#333\';\n            efficiencyCtx.lineWidth = 1;\n            \n            // X-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, height - padding);\n            efficiencyCtx.lineTo(width - padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Y-axis\n            efficiencyCtx.beginPath();\n            efficiencyCtx.moveTo(padding, padding);\n            efficiencyCtx.lineTo(padding, height - padding);\n            efficiencyCtx.stroke();\n            \n            // Draw axes labels\n            efficiencyCtx.fillStyle = \'#aaa\';\n            efficiencyCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            for (let i = 0; i <= 100; i += 20) {\n                const y = height - padding - (i / 100) * chartHeight;\n                efficiencyCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                efficiencyCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length - 1;\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / data.length) * chartWidth;\n                const barHeight = (value / 100) * chartHeight;\n                \n                // Calculate color based on value\n                const hue = (value / 100) * 180; // 0-180 range (red to blue)\n                efficiencyCtx.fillStyle = `hsla(${hue}, 100%, 50%, 0.7)`;\n                \n                // Draw bar\n                efficiencyCtx.fillRect(\n                    x, \n                    height - padding - barHeight, \n                    barWidth, \n                    barHeight\n                );\n            });\n        }\n        \n        // Draw the response time chart\n        function drawResponseChart() {\n            // Clear canvas\n            responseCtx.clearRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Set background color\n            responseCtx.fillStyle = \'#0a0a0a\';\n            responseCtx.fillRect(0, 0, responseChart.width, responseChart.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate chart dimensions\n            const width = responseChart.width;\n            const height = responseChart.height;\n            const padding = 30;\n            const chartWidth = width - padding * 2;\n            const chartHeight = height - padding * 2;\n            \n            // Extract response time data\n            const data = benchmarkResults.perturbations.map(p => p.responseTime);\n            \n            // Find max value for scaling\n            const maxValue = Math.max(...data) * 1.1;\n            \n            // Draw axes\n            responseCtx.strokeStyle = \'#333\';\n            responseCtx.lineWidth = 1;\n            \n            // X-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, height - padding);\n            responseCtx.lineTo(width - padding, height - padding);\n            responseCtx.stroke();\n            \n            // Y-axis\n            responseCtx.beginPath();\n            responseCtx.moveTo(padding, padding);\n            responseCtx.lineTo(padding, height - padding);\n            responseCtx.stroke();\n            \n            // Draw axes labels\n            responseCtx.fillStyle = \'#aaa\';\n            responseCtx.font = \'10px Arial\';\n            \n            // Y-axis labels\n            const yStep = Math.ceil(maxValue / 5);\n            for (let i = 0; i <= maxValue; i += yStep) {\n                const y = height - padding - (i / maxValue) * chartHeight;\n                responseCtx.fillText(i.toString(), padding - 20, y + 5);\n            }\n            \n            // X-axis labels\n            const stepSize = Math.ceil(data.length / 10);\n            for (let i = 0; i < data.length; i += stepSize) {\n                const x = padding + (i / data.length) * chartWidth;\n                responseCtx.fillText((i + 1).toString(), x, height - padding + 15);\n            }\n            \n            // Draw line\n            responseCtx.strokeStyle = \'#00b7ff\';\n            responseCtx.lineWidth = 2;\n            responseCtx.beginPath();\n            \n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    responseCtx.moveTo(x, y);\n                } else {\n                    responseCtx.lineTo(x, y);\n                }\n            });\n            \n            responseCtx.stroke();\n            \n            // Draw points\n            data.forEach((value, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const y = height - padding - (value / maxValue) * chartHeight;\n                \n                responseCtx.fillStyle = \'#00b7ff\';\n                responseCtx.beginPath();\n                responseCtx.arc(x, y, 3, 0, Math.PI * 2);\n                responseCtx.fill();\n            });\n        }\n        \n        // Draw wave visualization\n        function drawWaveVisualization() {\n            // Clear canvas\n            waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Set background color\n            waveCtx.fillStyle = \'#0a0a0a\';\n            waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n            \n            // Check if we have results\n            if (!benchmarkResults || !benchmarkResults.perturbations) {\n                return;\n            }\n            \n            // Calculate dimensions\n            const width = waveCanvas.width;\n            const height = waveCanvas.height;\n            const centerY = height / 2;\n            \n            // Draw center line\n            waveCtx.strokeStyle = \'#333\';\n            waveCtx.lineWidth = 1;\n            waveCtx.beginPath();\n            waveCtx.moveTo(0, centerY);\n            waveCtx.lineTo(width, centerY);\n            waveCtx.stroke();\n            \n            // Get perturbation data\n            const perturbations = benchmarkResults.perturbations;\n            \n            // Combine all perturbations into a single waveform\n            waveCtx.strokeStyle = \'#00b7ff\';\n            waveCtx.lineWidth = 2;\n            waveCtx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                const t = x / width * 10; // Time parameter\n                \n                // Combine multiple wave functions with different frequencies and amplitudes\n                let y = centerY;\n                \n                // Take the first 8 perturbations for the visualization\n                for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                    const p = perturbations[i];\n                    const amplitude = p.amplitude * 30; // Scale for visibility\n                    const frequency = p.frequency * 10;\n                    const phase = (i / perturbations.length) * Math.PI * 2;\n                    \n                    y += Math.sin(t * frequency + phase) * amplitude;\n                }\n                \n                if (x === 0) {\n                    waveCtx.moveTo(x, y);\n                } else {\n                    waveCtx.lineTo(x, y);\n                }\n            }\n            \n            waveCtx.stroke();\n            \n            // Start animation\n            startWaveAnimation();\n        }\n        \n        // Animate wave visualization\n        function startWaveAnimation() {\n            // Cancel previous animation if any\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n            }\n            \n            // Start time\n            const startTime = performance.now();\n            \n            // Animation function\n            function animate() {\n                const currentTime = performance.now();\n                const elapsed = (currentTime - startTime) / 1000; // In seconds\n                \n                // Clear canvas\n                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Set background color\n                waveCtx.fillStyle = \'#0a0a0a\';\n                waveCtx.fillRect(0, 0, waveCanvas.width, waveCanvas.height);\n                \n                // Draw center line\n                const height = waveCanvas.height;\n                const width = waveCanvas.width;\n                const centerY = height / 2;\n                \n                waveCtx.strokeStyle = \'#333\';\n                waveCtx.lineWidth = 1;\n                waveCtx.beginPath();\n                waveCtx.moveTo(0, centerY);\n                waveCtx.lineTo(width, centerY);\n                waveCtx.stroke();\n                \n                // Check if we have results\n                if (!benchmarkResults || !benchmarkResults.perturbations) {\n                    return;\n                }\n                \n                // Get perturbation data\n                const perturbations = benchmarkResults.perturbations;\n                \n                // Draw animated wave\n                waveCtx.strokeStyle = \'#00b7ff\';\n                waveCtx.lineWidth = 2;\n                waveCtx.beginPath();\n                \n                for (let x = 0; x < width; x++) {\n                    const t = (x / width * 10) + elapsed; // Time parameter with animation\n                    \n                    // Combine multiple wave functions\n                    let y = centerY;\n                    \n                    // Take the first 8 perturbations for the visualization\n                    for (let i = 0; i < Math.min(8, perturbations.length); i++) {\n                        const p = perturbations[i];\n                        const amplitude = p.amplitude * 30; // Scale for visibility\n                        const frequency = p.frequency * 10;\n                        const phase = (i / perturbations.length) * Math.PI * 2;\n                        \n                        y += Math.sin(t * frequency + phase) * amplitude;\n                    }\n                    \n                    if (x === 0) {\n                        waveCtx.moveTo(x, y);\n                    } else {\n                        waveCtx.lineTo(x, y);\n                    }\n                }\n                \n                waveCtx.stroke();\n                \n                // Continue animation\n                animationFrameId = requestAnimationFrame(animate);\n            }\n            \n            // Start animation loop\n            animationFrameId = requestAnimationFrame(animate);\n        }\n        \n        // Display benchmark results in text format\n        function displayBenchmarkResults() {\n            if (!benchmarkResults) {\n                return;\n            }\n            \n            const { timestamp, perturbationCount, totalDuration, averageResponseTime, stability } = benchmarkResults;\n            \n            let resultText = `// 64-Perturbation Benchmark Results\n// Generated: ${new Date(timestamp).toLocaleString()}\n// Status: Benchmark completed successfully\n\nBenchmark Summary:\n- Benchmark Type: ${benchmarkType.toUpperCase()}\n- Perturbation Count: ${perturbationCount}\n- Total Duration: ${totalDuration} ms\n- Average Response Time: ${averageResponseTime} ms\n- System Stability: ${stability}%\n\nPerformance Analysis:\n- Quantum Matrix Operations: Optimal\n- Resonance Pattern Stability: ${stability >= 98 ? \'Excellent\' : stability >= 95 ? \'Good\' : \'Acceptable\'}\n- Eigenvalue Convergence: ${Math.round(stability - 5 + Math.random() * 10)}%\n- Wave Function Collapse Rate: ${Math.round(90 + Math.random() * 10) / 10} ns\n\nTop 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (descending)\n            const sortedByEfficiency = [...benchmarkResults.perturbations]\n                .sort((a, b) => b.efficiency - a.efficiency)\n                .slice(0, 5);\n            \n            // Add top 5 to result text\n            sortedByEfficiency.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            resultText += `\n\nLowest 5 Perturbation Efficiency Scores:`;\n            \n            // Sort perturbations by efficiency (ascending)\n            const sortedByEfficiencyAsc = [...benchmarkResults.perturbations]\n                .sort((a, b) => a.efficiency - b.efficiency)\n                .slice(0, 5);\n            \n            // Add bottom 5 to result text\n            sortedByEfficiencyAsc.forEach((p, index) => {\n                resultText += `\\n${index + 1}. Perturbation #${p.id}: ${p.efficiency}% efficiency, ${p.responseTime} ms response time`;\n            });\n            \n            // Add conclusion\n            const overallStatus = stability >= 98 ? \'EXCELLENT\' : \n                                  stability >= 95 ? \'OPTIMAL\' : \n                                  stability >= 90 ? \'GOOD\' : \'ACCEPTABLE\';\n            \n            resultText += `\n\nOverall System Status: ${overallStatus}\nThis benchmark confirms the system can handle ${perturbationCount} simultaneous quantum \nperturbations with an average response time of ${averageResponseTime} ms, validating \nthe quantum-inspired symbolic matrix performance.\n\n// End of Benchmark Report`;\n            \n            benchmarkDisplay.textContent = resultText;\n        }\n        \n        // Initialize charts on page load\n        window.addEventListener(\'load\', () => {\n            // Draw empty charts\n            drawEfficiencyChart();\n            drawResponseChart();\n            drawWaveVisualization();\n        });\n    </script>\n', PosixPath('static/quantum-benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 05ad3b3d73c0fe22629d7ae39afbf14ad8ecb1b6c051667d3bf6c013f90ad37bd9f18dd0baeda6492f7253f19097b11007b24155ceb0a875ee410800dbf2c9a7_0
2025-07-08 18:39:14,873 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-browser.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = b44ef3d3e924c04256d6816c7eb8522dc723544279521c262056db9e312152337fb090cd4d64fa978f261789f944f9534a87f9559d65eecf71f687db6f6ca2ed_0
2025-07-08 18:39:14,874 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n    </script>\n', PosixPath('static/quantum-browser.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 26ef6eed73a8dbaf8c42d7fc1ce1012b522be9193aeaf7fc94fe7a742d4287a2e81dedb58609250c5091115d66f882e8410dc5ee607140164ba133779332d0c3_0
2025-07-08 18:39:14,875 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n    </script>\n', PosixPath('static/quantum-browser.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 26ef6eed73a8dbaf8c42d7fc1ce1012b522be9193aeaf7fc94fe7a742d4287a2e81dedb58609250c5091115d66f882e8410dc5ee607140164ba133779332d0c3_0
2025-07-08 18:39:14,877 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Initialize the browser\n            const urlInput = document.getElementById(\'url-input\');\n            const goBtn = document.getElementById(\'go-btn\');\n            const browserDisplay = document.getElementById(\'browser-display\');\n            const backBtn = document.getElementById(\'back-btn\');\n            const forwardBtn = document.getElementById(\'forward-btn\');\n            const refreshBtn = document.getElementById(\'refresh-btn\');\n            const homeBtn = document.getElementById(\'home-btn\');\n            \n            // Track browser history (simplified)\n            const history = [];\n            let currentIndex = -1;\n            \n            // Update navigation button states\n            function updateNavButtons() {\n                backBtn.disabled = currentIndex <= 0;\n                forwardBtn.disabled = currentIndex >= history.length - 1;\n            }\n            \n            // Navigate to a URL\n            function navigate(url) {\n                if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\')) {\n                    url = \'https://\' + url;\n                }\n                \n                // In a real browser, this would load the URL\n                // Here we simulate it with a message\n                browserDisplay.innerHTML = `\n                    <div style="padding: 20px;">\n                        <h2>Secure Connection Established</h2>\n                        <p>Connected to: ${url}</p>\n                        <p>This content is being accessed securely through quantum resonance encryption.</p>\n                        <div style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; background: #f9f9f9;">\n                            <h3>Site Content Placeholder</h3>\n                            <p>In a real Q-Browser implementation, actual web content would be displayed here.</p>\n                            <p>All content is being filtered for malicious code and quantum vulnerabilities.</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Update URL bar\n                urlInput.value = url;\n                \n                // Update history\n                if (currentIndex < history.length - 1) {\n                    // If we navigated back and then to a new URL, truncate forward history\n                    history.splice(currentIndex + 1);\n                }\n                history.push(url);\n                currentIndex = history.length - 1;\n                \n                updateNavButtons();\n            }\n            \n            // Event listeners\n            goBtn.addEventListener(\'click\', function() {\n                navigate(urlInput.value);\n            });\n            \n            urlInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\') {\n                    navigate(urlInput.value);\n                }\n            });\n            \n            backBtn.addEventListener(\'click\', function() {\n                if (currentIndex > 0) {\n                    currentIndex--;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated back to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            forwardBtn.addEventListener(\'click\', function() {\n                if (currentIndex < history.length - 1) {\n                    currentIndex++;\n                    urlInput.value = history[currentIndex];\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Navigated forward to ${history[currentIndex]}</p></div>`;\n                    updateNavButtons();\n                }\n            });\n            \n            refreshBtn.addEventListener(\'click\', function() {\n                if (history.length > 0) {\n                    browserDisplay.innerHTML = `<div style="padding: 20px;"><p>Refreshed ${history[currentIndex]}</p></div>`;\n                }\n            });\n            \n            homeBtn.addEventListener(\'click\', function() {\n                navigate(\'https://www.quantonium-os.org\');\n            });\n            \n            // Initialize\n            navigate(\'https://www.quantonium-os.org\');\n        });\n    </script>\n', PosixPath('static/quantum-browser.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 26ef6eed73a8dbaf8c42d7fc1ce1012b522be9193aeaf7fc94fe7a742d4287a2e81dedb58609250c5091115d66f882e8410dc5ee607140164ba133779332d0c3_0
2025-07-08 18:39:14,877 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2fcce78004faa0972f024a5501eaed84bd90fc4d35e19fa74a861d2be49a8bdf6eee10d85a43fe072e23a50e280e1b315a4f848a32fcb22a3b55810e0bb77ab2_0
2025-07-08 18:39:14,878 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${formatJsonResult(data)}...`\n `...${formatJsonResult(data)}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 48478b16fb81db96cba2ed9fe1997f03837ebe68a5648aaa3dff51828a53586ba204425357d84759ae4094b95f1a7fa745b33c5831e0d41994bea20d7958f737_0
2025-07-08 18:39:14,878 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${formatJsonResult(data)}...`\n `...${formatJsonResult(data)}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 48478b16fb81db96cba2ed9fe1997f03837ebe68a5648aaa3dff51828a53586ba204425357d84759ae4094b95f1a7fa745b33c5831e0d41994bea20d7958f737_0
2025-07-08 18:39:14,879 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${formatJsonResult(data)}...`\n `...${formatJsonResult(data)}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 48478b16fb81db96cba2ed9fe1997f03837ebe68a5648aaa3dff51828a53586ba204425357d84759ae4094b95f1a7fa745b33c5831e0d41994bea20d7958f737_0
2025-07-08 18:39:14,879 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 285238edfc2be6b480cab4f798b7e6a1d2b332429d353c85660a6227af65d8003099a23da0ee0c74278f4ad533e823b5d1b539f9a5e479cf4009ea8289cd7ad2_0
2025-07-08 18:39:14,880 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_0
2025-07-08 18:39:14,880 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_0
2025-07-08 18:39:14,880 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_0
2025-07-08 18:39:14,881 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ac8b4af035b3c81d715a12ec5b27a72b8aaf3acbf0b8a78438cab5eb2c8ad0bd8bdd8e29ae81df8437fecf6b3a684af44f2feba93ecc157919d53c1150954029_0
2025-07-08 18:39:14,881 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_0
2025-07-08 18:39:14,882 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_0
2025-07-08 18:39:14,882 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_0
2025-07-08 18:39:14,883 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 285238edfc2be6b480cab4f798b7e6a1d2b332429d353c85660a6227af65d8003099a23da0ee0c74278f4ad533e823b5d1b539f9a5e479cf4009ea8289cd7ad2_0
2025-07-08 18:39:14,883 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_0
2025-07-08 18:39:14,883 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_0
2025-07-08 18:39:14,884 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_0
2025-07-08 18:39:14,884 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ac8b4af035b3c81d715a12ec5b27a72b8aaf3acbf0b8a78438cab5eb2c8ad0bd8bdd8e29ae81df8437fecf6b3a684af44f2feba93ecc157919d53c1150954029_0
2025-07-08 18:39:14,885 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_0
2025-07-08 18:39:14,885 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_0
2025-07-08 18:39:14,886 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_0
2025-07-08 18:39:14,886 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2fcce78004faa0972f024a5501eaed84bd90fc4d35e19fa74a861d2be49a8bdf6eee10d85a43fe072e23a50e280e1b315a4f848a32fcb22a3b55810e0bb77ab2_0
2025-07-08 18:39:14,887 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_0
2025-07-08 18:39:14,887 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_0
2025-07-08 18:39:14,887 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_0
2025-07-08 18:39:14,888 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2fcce78004faa0972f024a5501eaed84bd90fc4d35e19fa74a861d2be49a8bdf6eee10d85a43fe072e23a50e280e1b315a4f848a32fcb22a3b55810e0bb77ab2_0
2025-07-08 18:39:14,888 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${data.plaintext||data.decrypted}...`\n `...${data.plaintext||data.decrypted}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3e78aab7754d0c6352cef359522832b6e90c84090f6929deacd01598860d93d44901f4529dece12bfb6110bb9c03202ad6d69f2b409af274a4eca0d61c45c5be_0
2025-07-08 18:39:14,889 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${data.plaintext||data.decrypted}...`\n `...${data.plaintext||data.decrypted}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3e78aab7754d0c6352cef359522832b6e90c84090f6929deacd01598860d93d44901f4529dece12bfb6110bb9c03202ad6d69f2b409af274a4eca0d61c45c5be_0
2025-07-08 18:39:14,889 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                 .*</?[a-zA-Z] `</div>\n                ${data.plaintext||data.decrypted}...`\n `...${data.plaintext||data.decrypted}</div>\n                `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3e78aab7754d0c6352cef359522832b6e90c84090f6929deacd01598860d93d44901f4529dece12bfb6110bb9c03202ad6d69f2b409af274a4eca0d61c45c5be_0
2025-07-08 18:39:14,890 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 285238edfc2be6b480cab4f798b7e6a1d2b332429d353c85660a6227af65d8003099a23da0ee0c74278f4ad533e823b5d1b539f9a5e479cf4009ea8289cd7ad2_0
2025-07-08 18:39:14,890 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_0
2025-07-08 18:39:14,891 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_0
2025-07-08 18:39:14,891 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = eb00aa72e72ce9b75cce60432209730e8845990fccaab1c901d731b772a56e357b5fa7a4a533f1f82f477b76487f478465235dfe92c41c8f245a62d4fd2aa793_1
2025-07-08 18:39:14,892 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ac8b4af035b3c81d715a12ec5b27a72b8aaf3acbf0b8a78438cab5eb2c8ad0bd8bdd8e29ae81df8437fecf6b3a684af44f2feba93ecc157919d53c1150954029_0
2025-07-08 18:39:14,892 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_0
2025-07-08 18:39:14,892 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_0
2025-07-08 18:39:14,893 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = resultHtml;\n resultDisplay.outerHTML = resultHtml;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 72b512558d7d2a9acd04fc427cfb5ba407e4013c0b2760a09a10abac73801d4ccc136815a6e3075a078553f05a177fc408a9fbb5d2b80728f8b8db32b9f2c137_1
2025-07-08 18:39:14,894 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 285238edfc2be6b480cab4f798b7e6a1d2b332429d353c85660a6227af65d8003099a23da0ee0c74278f4ad533e823b5d1b539f9a5e479cf4009ea8289cd7ad2_0
2025-07-08 18:39:14,894 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_0
2025-07-08 18:39:14,894 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_0
2025-07-08 18:39:14,895 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 29ea792f196d51040bf26074f81d8aeda3f0400b918e0bd0717785b3b015d62b38e735f0334f9d00257f2b704d37914f72983adb13e5b0483578c9f15d40ce2e_1
2025-07-08 18:39:14,895 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ac8b4af035b3c81d715a12ec5b27a72b8aaf3acbf0b8a78438cab5eb2c8ad0bd8bdd8e29ae81df8437fecf6b3a684af44f2feba93ecc157919d53c1150954029_0
2025-07-08 18:39:14,896 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_0
2025-07-08 18:39:14,896 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_0
2025-07-08 18:39:14,897 - semgrep.rule_match - DEBUG - match_key = ('resultDisplay.innerHTML = "...";\n resultDisplay.innerHTML = ``<div class="error-message">Error: error.message</div>`;\n resultDisplay.outerHTML = ``<div class="error-message">Error: error.message</div>`;\n document.write(...) resultDisplay.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 8f08eed6e7b740c46d4efdeaa99e99cd0d2fcb4d1128bb5b6829d01b46818c311c6b81785777c845ed7b8ebef9ed842a33226ceaf11cf3cf565849ac05099bff_1
2025-07-08 18:39:14,897 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2fcce78004faa0972f024a5501eaed84bd90fc4d35e19fa74a861d2be49a8bdf6eee10d85a43fe072e23a50e280e1b315a4f848a32fcb22a3b55810e0bb77ab2_0
2025-07-08 18:39:14,898 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_0
2025-07-08 18:39:14,898 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_0
2025-07-08 18:39:14,899 - semgrep.rule_match - DEBUG - match_key = ('<div class="error-message">Error:  .*</?[a-zA-Z] `<div class="error-message">Error: ${error.message}...`\n `...${error.message}<div class="error-message">Error: `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8b4a00604156d42a2e90376b8ca48a53cccf319b5a4c43a90b4e35abec75cd868083026be615f4e27e2618eaa0f367e48ff1a1686fc676ed85585a9e3d1a7fbd_1
2025-07-08 18:39:14,901 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2fcce78004faa0972f024a5501eaed84bd90fc4d35e19fa74a861d2be49a8bdf6eee10d85a43fe072e23a50e280e1b315a4f848a32fcb22a3b55810e0bb77ab2_0
2025-07-08 18:39:14,902 - semgrep.rule_match - DEBUG - match_key = ('">0.109</div>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `">0.109</div>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}">0.109</div>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9bce8232fc3c002f7bb49810fcd15a8e60384d941630c938036869520187796fcd12f88cdcfd3529101795803992aa4c3fe20bd96c679e326acd4fd629e08565_0
2025-07-08 18:39:14,903 - semgrep.rule_match - DEBUG - match_key = ('">0.109</div>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `">0.109</div>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}">0.109</div>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9bce8232fc3c002f7bb49810fcd15a8e60384d941630c938036869520187796fcd12f88cdcfd3529101795803992aa4c3fe20bd96c679e326acd4fd629e08565_0
2025-07-08 18:39:14,905 - semgrep.rule_match - DEBUG - match_key = ('">0.109</div>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `">0.109</div>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}">0.109</div>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-encryption-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9bce8232fc3c002f7bb49810fcd15a8e60384d941630c938036869520187796fcd12f88cdcfd3529101795803992aa4c3fe20bd96c679e326acd4fd629e08565_0
2025-07-08 18:39:14,905 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 5a7101b145b878237c318bd2f11893b8ee76f0d8782629a870cbb05b9f856c95e2e7cde113b0514b2c2a79ed198be30d1bbce974d079060298fc0b912591d3de_0
2025-07-08 18:39:14,906 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                 .*</?[a-zA-Z] `</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                ${qubitIndex}...`\n `...${qubitIndex}</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2cb4650d572a6175d0eaa6aea81408efd9bec4ae7d545f2555b1e38b7993e0c2573aef7c067758bd3ed9999d35f3465726dca1680b45e70ed880ee2da0c57cab_0
2025-07-08 18:39:14,906 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                 .*</?[a-zA-Z] `</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                ${qubitIndex}...`\n `...${qubitIndex}</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2cb4650d572a6175d0eaa6aea81408efd9bec4ae7d545f2555b1e38b7993e0c2573aef7c067758bd3ed9999d35f3465726dca1680b45e70ed880ee2da0c57cab_0
2025-07-08 18:39:14,907 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                 .*</?[a-zA-Z] `</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                ${qubitIndex}...`\n `...${qubitIndex}</div>\n                            <div class="qubit-state">[0]</div>\n                        </div>\n                    </td>\n                `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 2cb4650d572a6175d0eaa6aea81408efd9bec4ae7d545f2555b1e38b7993e0c2573aef7c067758bd3ed9999d35f3465726dca1680b45e70ed880ee2da0c57cab_0
2025-07-08 18:39:14,907 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = e998635e7dc3b5278ca33029b3f9d6f9e10f8fa42028557d47f8eceb45cf16ed81016fc864a8a4e7823ebbfa5d0f964367397ef7d9bf0d2522dcf447f3e30e1a_0
2025-07-08 18:39:14,907 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d8b43b098f49bd21a4f79be698d92bd2b6c66a517882699ecb6f39745e97e59d26a9383a62b11d3664fa3ecc852a45cc9859a1adf93b406323a885e932d2bdcb_0
2025-07-08 18:39:14,908 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d8b43b098f49bd21a4f79be698d92bd2b6c66a517882699ecb6f39745e97e59d26a9383a62b11d3664fa3ecc852a45cc9859a1adf93b406323a885e932d2bdcb_0
2025-07-08 18:39:14,908 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = d8b43b098f49bd21a4f79be698d92bd2b6c66a517882699ecb6f39745e97e59d26a9383a62b11d3664fa3ecc852a45cc9859a1adf93b406323a885e932d2bdcb_0
2025-07-08 18:39:14,909 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 354661d65aa7c3776ffc5ffbd633da46025b704753310f48abbb6dda0b2de8f821aff296d9af1f424a09c6b6bdcf97e1cce11d380efd7546012c10588cb1798c_0
2025-07-08 18:39:14,909 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n gridContainer.outerHTML = html;\n document.write(...) gridContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b242c993e6719273fc99c59c5608d516fc90407fb653510936f79eb1c25d8e4d4da2c0c5b7be7082a9b4c4c7a61699316b744799e2be29f5b51b8ade21ff0e27_0
2025-07-08 18:39:14,910 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n gridContainer.outerHTML = html;\n document.write(...) gridContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b242c993e6719273fc99c59c5608d516fc90407fb653510936f79eb1c25d8e4d4da2c0c5b7be7082a9b4c4c7a61699316b744799e2be29f5b51b8ade21ff0e27_0
2025-07-08 18:39:14,910 - semgrep.rule_match - DEBUG - match_key = ('gridContainer.innerHTML = "...";\n gridContainer.innerHTML = html;\n gridContainer.outerHTML = html;\n document.write(...) gridContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b242c993e6719273fc99c59c5608d516fc90407fb653510936f79eb1c25d8e4d4da2c0c5b7be7082a9b4c4c7a61699316b744799e2be29f5b51b8ade21ff0e27_0
2025-07-08 18:39:14,911 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 5a7101b145b878237c318bd2f11893b8ee76f0d8782629a870cbb05b9f856c95e2e7cde113b0514b2c2a79ed198be30d1bbce974d079060298fc0b912591d3de_0
2025-07-08 18:39:14,913 - semgrep.rule_match - DEBUG - match_key = ('" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 5d60f582c820447197c83406d6b5de9857959cf18812ad0c2fc6f6f249cbe9d97dfb17945b9c79f9ecac7225b39af6157a8be16404b8e94cfb3b1f6e2a54a694_0
2025-07-08 18:39:14,914 - semgrep.rule_match - DEBUG - match_key = ('" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 5d60f582c820447197c83406d6b5de9857959cf18812ad0c2fc6f6f249cbe9d97dfb17945b9c79f9ecac7225b39af6157a8be16404b8e94cfb3b1f6e2a54a694_0
2025-07-08 18:39:14,915 - semgrep.rule_match - DEBUG - match_key = ('" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n     .*</?[a-zA-Z] `" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    ${windowId}...`\n `...${windowId}" width="400" height="200" class="wave-canvas"></canvas>\n                </div>\n            </div>\n        </div>\n    `\n', PosixPath('static/quantum-grid-tab.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 5d60f582c820447197c83406d6b5de9857959cf18812ad0c2fc6f6f249cbe9d97dfb17945b9c79f9ecac7225b39af6157a8be16404b8e94cfb3b1f6e2a54a694_0
2025-07-08 18:39:14,915 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = dba81d34bdde0fa16037fb9cf578f1b54f34a2b107f9b2872eb3754a7eb82160249d8f15a7c862a3f0f5fdc900b6714648497540d75a2a31fc079bf2f63edcd7_0
2025-07-08 18:39:14,916 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/quantum_benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b576f6cda66a406bc4147e6c8c18f32e11cf6e8ad878c08b928df4e94e05e93e6086cca375c4c3f6d6d3f4ee6e456593f76c9156a7292a5f15f69c2779945bb9_0
2025-07-08 18:39:14,916 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/quantum_benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b576f6cda66a406bc4147e6c8c18f32e11cf6e8ad878c08b928df4e94e05e93e6086cca375c4c3f6d6d3f4ee6e456593f76c9156a7292a5f15f69c2779945bb9_0
2025-07-08 18:39:14,916 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/quantum_benchmark.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b576f6cda66a406bc4147e6c8c18f32e11cf6e8ad878c08b928df4e94e05e93e6086cca375c4c3f6d6d3f4ee6e456593f76c9156a7292a5f15f69c2779945bb9_0
2025-07-08 18:39:14,918 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_encryption.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 5e3f470a9a14fa9cd74d9d53becc2893e04e194989439d38f81400449b38411f49fdad339303c4eb093bd1056749850647cdff682011c7f576c37946ad2bfffb_0
2025-07-08 18:39:14,920 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n    </script>\n', PosixPath('static/quantum_encryption.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = e23dc9c90b2f13b40c69beffef2d5400bdf423500b2953d6d94d18166f31e29aa48bd4dfc32276112d11cb8dab9cc40e83d7c88cf49b8d3982129ee755bc5f95_0
2025-07-08 18:39:14,922 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n    </script>\n', PosixPath('static/quantum_encryption.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = e23dc9c90b2f13b40c69beffef2d5400bdf423500b2953d6d94d18166f31e29aa48bd4dfc32276112d11cb8dab9cc40e83d7c88cf49b8d3982129ee755bc5f95_0
2025-07-08 18:39:14,924 - semgrep.rule_match - DEBUG - match_key = ('\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const encryptBtn = document.getElementById(\'encrypt-btn\');\n            const decryptBtn = document.getElementById(\'decrypt-btn\');\n            const encryptResult = document.getElementById(\'encrypt-result\');\n            const decryptResult = document.getElementById(\'decrypt-result\');\n            const statusMessage = document.getElementById(\'status-message\');\n            const encryptAnimation = document.getElementById(\'encrypt-animation\');\n            const decryptAnimation = document.getElementById(\'decrypt-animation\');\n            \n            // Tabs functionality\n            const tabs = document.querySelectorAll(\'.tab\');\n            const tabContents = document.querySelectorAll(\'.tab-content\');\n            \n            tabs.forEach(tab => {\n                tab.addEventListener(\'click\', function() {\n                    const tabId = this.getAttribute(\'data-tab\');\n                    \n                    // Remove active class from all tabs\n                    tabs.forEach(t => t.classList.remove(\'active\'));\n                    tabContents.forEach(c => c.classList.remove(\'active\'));\n                    \n                    // Add active class to current tab\n                    this.classList.add(\'active\');\n                    document.getElementById(`${tabId}-tab`).classList.add(\'active\');\n                });\n            });\n            \n            // Generate animation text\n            function generateAnimationText(isEncrypt) {\n                const chars = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n                const encryptedChars = \'!@#$%^&*()_+-=[]{}|;:,.<>?/~`\';\n                let html = \'\';\n                \n                for (let i = 0; i < 100; i++) {\n                    const charIndex = Math.floor(Math.random() * chars.length);\n                    const char = chars[charIndex];\n                    const encryptedChar = encryptedChars[Math.floor(Math.random() * encryptedChars.length)];\n                    \n                    if (isEncrypt) {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? encryptedChar : char}</span>`;\n                    } else {\n                        html += `<span class="char ${i % 3 === 0 ? \'encrypted\' : \'\'}">${i % 3 === 0 ? char : encryptedChar}</span>`;\n                    }\n                }\n                \n                return html;\n            }\n            \n            // Set up animations\n            encryptAnimation.innerHTML = generateAnimationText(true);\n            decryptAnimation.innerHTML = generateAnimationText(false);\n            \n            // Encrypt data\n            encryptBtn.addEventListener(\'click\', function() {\n                const plaintext = document.getElementById(\'plaintext\').value.trim();\n                const key = document.getElementById(\'encrypt-key\').value.trim();\n                \n                if (!plaintext || !key) {\n                    showStatus(\'Please provide both plaintext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/encrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        plaintext: plaintext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        encryptResult.textContent = data.data.ciphertext;\n                        showStatus(\'Data encrypted successfully\', \'success\');\n                    } else {\n                        encryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to encrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    encryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            // Decrypt data\n            decryptBtn.addEventListener(\'click\', function() {\n                const ciphertext = document.getElementById(\'ciphertext\').value.trim();\n                const key = document.getElementById(\'decrypt-key\').value.trim();\n                \n                if (!ciphertext || !key) {\n                    showStatus(\'Please provide both ciphertext and key\', \'error\');\n                    return;\n                }\n                \n                // Make API request\n                fetch(\'/api/decrypt\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({\n                        ciphertext: ciphertext,\n                        key: key\n                    }),\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        decryptResult.textContent = data.data.plaintext;\n                        showStatus(\'Data decrypted successfully\', \'success\');\n                    } else {\n                        decryptResult.textContent = \'Error: \' + data.error;\n                        showStatus(\'Failed to decrypt data\', \'error\');\n                    }\n                })\n                .catch(error => {\n                    decryptResult.textContent = \'Error: \' + error.message;\n                    showStatus(\'Failed to connect to server\', \'error\');\n                });\n            });\n            \n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = type;\n                statusMessage.style.display = \'block\';\n                \n                setTimeout(() => {\n                    statusMessage.style.display = \'none\';\n                }, 5000);\n            }\n        });\n    </script>\n', PosixPath('static/quantum_encryption.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = e23dc9c90b2f13b40c69beffef2d5400bdf423500b2953d6d94d18166f31e29aa48bd4dfc32276112d11cb8dab9cc40e83d7c88cf49b8d3982129ee755bc5f95_0
2025-07-08 18:39:14,924 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5b3d066803f3df3f7561064b347c215f03ea90d2a4a0474ea2157a6cde77f701aa53310c3b5bb22ba24dacea8584d18bd1c1a577a28619627d6a90525b504e6d_0
2025-07-08 18:39:14,925 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bde042f56f6901549a9fffa18139c828e3682ad6fb0a988fa26eb4f8d8e2ac9124f3d48a9f0fae19f2e76817c536cdda8446c36793267ede297d627d9adbb70a_0
2025-07-08 18:39:14,926 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bde042f56f6901549a9fffa18139c828e3682ad6fb0a988fa26eb4f8d8e2ac9124f3d48a9f0fae19f2e76817c536cdda8446c36793267ede297d627d9adbb70a_0
2025-07-08 18:39:14,926 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bde042f56f6901549a9fffa18139c828e3682ad6fb0a988fa26eb4f8d8e2ac9124f3d48a9f0fae19f2e76817c536cdda8446c36793267ede297d627d9adbb70a_0
2025-07-08 18:39:14,927 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 907c7b4cc26a4ace593fe8a062f50c4a4988f4ff323dae1e2edb6870ec773da285c03e9fd9176cd8dc985cc61e250ca75cdaebb6752dd89520b4b0d0a0047d50_0
2025-07-08 18:39:14,927 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n qubitElement.outerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n document.write(...) qubitElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ddf332bf1d8a513c7eaffa61d26b532d7505caefcaaa8020a7c81c80388517c9b85412914d7d7c3a61db56085b9a05261070d35755197822427d732438392fff_0
2025-07-08 18:39:14,928 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n qubitElement.outerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n document.write(...) qubitElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ddf332bf1d8a513c7eaffa61d26b532d7505caefcaaa8020a7c81c80388517c9b85412914d7d7c3a61db56085b9a05261070d35755197822427d732438392fff_0
2025-07-08 18:39:14,928 - semgrep.rule_match - DEBUG - match_key = ('qubitElement.innerHTML = "...";\n qubitElement.innerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n qubitElement.outerHTML = ``\n            <div class="qubit-label">Idx i+32</div>\n            <div class="qubit-value">0</div>\n        `;\n document.write(...) qubitElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = ddf332bf1d8a513c7eaffa61d26b532d7505caefcaaa8020a7c81c80388517c9b85412914d7d7c3a61db56085b9a05261070d35755197822427d732438392fff_0
2025-07-08 18:39:14,929 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = fe70666deb108faaf1957b4658387c730b05ee12cbbc81136288c8876b49638ac017d4c52b2b536d37f6d1d0dbf00e171aa1a4508c9151b2c92cb2c78c29aeac_0
2025-07-08 18:39:14,929 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">0</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">0</div>\n        ${i+32}...`\n `...${i+32}</div>\n            <div class="qubit-value">0</div>\n        `\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d756383527136b634f2e86ce950cc0f97b78e859e4450e5c7f3baaced315f908ca86d5641f3885a9764658b157342db2060e000e0d26a334ef0428b886e472f2_0
2025-07-08 18:39:14,930 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">0</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">0</div>\n        ${i+32}...`\n `...${i+32}</div>\n            <div class="qubit-value">0</div>\n        `\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d756383527136b634f2e86ce950cc0f97b78e859e4450e5c7f3baaced315f908ca86d5641f3885a9764658b157342db2060e000e0d26a334ef0428b886e472f2_0
2025-07-08 18:39:14,930 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">0</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">0</div>\n        ${i+32}...`\n `...${i+32}</div>\n            <div class="qubit-value">0</div>\n        `\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d756383527136b634f2e86ce950cc0f97b78e859e4450e5c7f3baaced315f908ca86d5641f3885a9764658b157342db2060e000e0d26a334ef0428b886e472f2_0
2025-07-08 18:39:14,931 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 5b3d066803f3df3f7561064b347c215f03ea90d2a4a0474ea2157a6cde77f701aa53310c3b5bb22ba24dacea8584d18bd1c1a577a28619627d6a90525b504e6d_0
2025-07-08 18:39:14,931 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 3dd608aa48d41b7aa19169715f400b3b7e0f1457f8d2378707b6cb0454896d015a8ee364f0bdc3600c3d01236c532c6c79c033111ad8a7a42728feb03c99a496_0
2025-07-08 18:39:14,932 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 3dd608aa48d41b7aa19169715f400b3b7e0f1457f8d2378707b6cb0454896d015a8ee364f0bdc3600c3d01236c532c6c79c033111ad8a7a42728feb03c99a496_0
2025-07-08 18:39:14,932 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 3dd608aa48d41b7aa19169715f400b3b7e0f1457f8d2378707b6cb0454896d015a8ee364f0bdc3600c3d01236c532c6c79c033111ad8a7a42728feb03c99a496_0
2025-07-08 18:39:14,933 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 907c7b4cc26a4ace593fe8a062f50c4a4988f4ff323dae1e2edb6870ec773da285c03e9fd9176cd8dc985cc61e250ca75cdaebb6752dd89520b4b0d0a0047d50_0
2025-07-08 18:39:14,933 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n formulaElement.outerHTML = ``Idx idx<br>formula`;\n document.write(...) formulaElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 071997583126ad648f1b6ff3e202dc3caf80080138201812e3eede90a20d8f4ed7dc4441a3cfbfd4a9090ae3e8f3d7cc6f5271ae2a51395795d90adbb4c4d6bf_0
2025-07-08 18:39:14,933 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n formulaElement.outerHTML = ``Idx idx<br>formula`;\n document.write(...) formulaElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 071997583126ad648f1b6ff3e202dc3caf80080138201812e3eede90a20d8f4ed7dc4441a3cfbfd4a9090ae3e8f3d7cc6f5271ae2a51395795d90adbb4c4d6bf_0
2025-07-08 18:39:14,934 - semgrep.rule_match - DEBUG - match_key = ('formulaElement.innerHTML = "...";\n formulaElement.innerHTML = ``Idx idx<br>formula`;\n formulaElement.outerHTML = ``Idx idx<br>formula`;\n document.write(...) formulaElement.outerHTML = "...";\n document.write("...")', PosixPath('static/quantum_grid/quantum-grid.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 071997583126ad648f1b6ff3e202dc3caf80080138201812e3eede90a20d8f4ed7dc4441a3cfbfd4a9090ae3e8f3d7cc6f5271ae2a51395795d90adbb4c4d6bf_0
2025-07-08 18:39:14,934 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 869b99891b3552691020d944b51bf876d30b83b8a90f3e9d3373390dca84963355e8ff0a7a07b6bb3084ddfe66327ad2988aa1c771f4179fc20a2d464d08c8f0_0
2025-07-08 18:39:14,935 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 08813de5be13b7d7ac9c01f9b1d5507b469f281816681cb89e015a816bd658c2ce077c344676dc902c73f38206931d312a4eb939b94fb27630969a254a8ac9d0_0
2025-07-08 18:39:14,935 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 08813de5be13b7d7ac9c01f9b1d5507b469f281816681cb89e015a816bd658c2ce077c344676dc902c73f38206931d312a4eb939b94fb27630969a254a8ac9d0_0
2025-07-08 18:39:14,936 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/build/three.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 08813de5be13b7d7ac9c01f9b1d5507b469f281816681cb89e015a816bd658c2ce077c344676dc902c73f38206931d312a4eb939b94fb27630969a254a8ac9d0_0
2025-07-08 18:39:14,936 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 869b99891b3552691020d944b51bf876d30b83b8a90f3e9d3373390dca84963355e8ff0a7a07b6bb3084ddfe66327ad2988aa1c771f4179fc20a2d464d08c8f0_0
2025-07-08 18:39:14,936 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 378af5bddd885029bf087249019ba073cd088cf2d8884070a222cdd38d7e7fa6999d3a8464bd1f0347ec2289a472cbe2f8c64de7074d36b68b6db0a1db0f0129_0
2025-07-08 18:39:14,937 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 378af5bddd885029bf087249019ba073cd088cf2d8884070a222cdd38d7e7fa6999d3a8464bd1f0347ec2289a472cbe2f8c64de7074d36b68b6db0a1db0f0129_0
2025-07-08 18:39:14,937 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" > <script  src="https://cdn.jsdelivr.net/npm/three@0.137.0/examples/js/controls/OrbitControls.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 378af5bddd885029bf087249019ba073cd088cf2d8884070a222cdd38d7e7fa6999d3a8464bd1f0347ec2289a472cbe2f8c64de7074d36b68b6db0a1db0f0129_0
2025-07-08 18:39:14,938 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 869b99891b3552691020d944b51bf876d30b83b8a90f3e9d3373390dca84963355e8ff0a7a07b6bb3084ddfe66327ad2988aa1c771f4179fc20a2d464d08c8f0_0
2025-07-08 18:39:14,938 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" > <script  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 24fd7f4fb9ec42cb268a4e829b40c60275c9fd8aa2b63b0f1299b70daf41daca854f354f9d1700319565d2ea41a9f20f544962e7da623323478315c6db990053_0
2025-07-08 18:39:14,939 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" > <script  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 24fd7f4fb9ec42cb268a4e829b40c60275c9fd8aa2b63b0f1299b70daf41daca854f354f9d1700319565d2ea41a9f20f544962e7da623323478315c6db990053_0
2025-07-08 18:39:14,939 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" > <script  src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.5.0/math.min.js" >...</script>', PosixPath('static/qubit_ui/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 24fd7f4fb9ec42cb268a4e829b40c60275c9fd8aa2b63b0f1299b70daf41daca854f354f9d1700319565d2ea41a9f20f544962e7da623323478315c6db990053_0
2025-07-08 18:39:14,940 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 6ae7229d6c9cfe6137ebb5109b0ad4bf67dacbb131a257e0a9d7b9de9d9432305f1a3e3f514d5c759eb4c2cf6dc449d07add71b69cd3bec99a3c226bc2163b19_0
2025-07-08 18:39:14,940 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0f1c0cf417dec9a31eecbfcae6f5956862cf4dd266aa99d74d99df6882e4172d6b0574d19b02b1cc26317887af063051c776c3a0fcd22aa615af983e44b67aa4_0
2025-07-08 18:39:14,941 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0f1c0cf417dec9a31eecbfcae6f5956862cf4dd266aa99d74d99df6882e4172d6b0574d19b02b1cc26317887af063051c776c3a0fcd22aa615af983e44b67aa4_0
2025-07-08 18:39:14,942 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0f1c0cf417dec9a31eecbfcae6f5956862cf4dd266aa99d74d99df6882e4172d6b0574d19b02b1cc26317887af063051c776c3a0fcd22aa615af983e44b67aa4_0
2025-07-08 18:39:14,943 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 54f0920e8a638f2b8827d995196c1137621aa14cf737ef4d43ee6e078e12be9366c8b02aa911c4277949ca25adfef54b4fd5a259053876fbceca2a4df8241ebd_0
2025-07-08 18:39:14,944 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n elements.algorithmDescription.outerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n document.write(...) elements.algorithmDescription.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = c0d533199e32f8eccc83a3fddb267bd1b4bfa9990f58265519a0620739140f7fe687956c39a3d6fd2fbce814aaca638ae0707d61b0c6dafbde87de723b032c4a_0
2025-07-08 18:39:14,945 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n elements.algorithmDescription.outerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n document.write(...) elements.algorithmDescription.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = c0d533199e32f8eccc83a3fddb267bd1b4bfa9990f58265519a0620739140f7fe687956c39a3d6fd2fbce814aaca638ae0707d61b0c6dafbde87de723b032c4a_0
2025-07-08 18:39:14,946 - semgrep.rule_match - DEBUG - match_key = ('elements.algorithmDescription.innerHTML = "...";\n elements.algorithmDescription.innerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n elements.algorithmDescription.outerHTML = ``\n        <h3>algorithm.name</h3>\n        <p>algorithm.description</p>\n    `;\n document.write(...) elements.algorithmDescription.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = c0d533199e32f8eccc83a3fddb267bd1b4bfa9990f58265519a0620739140f7fe687956c39a3d6fd2fbce814aaca638ae0707d61b0c6dafbde87de723b032c4a_0
2025-07-08 18:39:14,947 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 6876df03f1287b95492be025e4666ae92b21f050774540b69b47338b21355805d4a2fbe38aca0b9b62011b2b375af9983e3bebb8b88d5bdc07bda6cab38cd734_0
2025-07-08 18:39:14,948 - semgrep.rule_match - DEBUG - match_key = ('</p>\n     .*</?[a-zA-Z] `</p>\n    ${algorithm.description}...`\n `...${algorithm.description}</p>\n    `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = badd125688044d2d75d7f2262a75196e7176238350e329724e657c27e28fb9d511b2ca3116320bbc2468cfb215734d4ad8db0b730de89f0db47ebf6f5373ee3e_0
2025-07-08 18:39:14,949 - semgrep.rule_match - DEBUG - match_key = ('</p>\n     .*</?[a-zA-Z] `</p>\n    ${algorithm.description}...`\n `...${algorithm.description}</p>\n    `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = badd125688044d2d75d7f2262a75196e7176238350e329724e657c27e28fb9d511b2ca3116320bbc2468cfb215734d4ad8db0b730de89f0db47ebf6f5373ee3e_0
2025-07-08 18:39:14,950 - semgrep.rule_match - DEBUG - match_key = ('</p>\n     .*</?[a-zA-Z] `</p>\n    ${algorithm.description}...`\n `...${algorithm.description}</p>\n    `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = badd125688044d2d75d7f2262a75196e7176238350e329724e657c27e28fb9d511b2ca3116320bbc2468cfb215734d4ad8db0b730de89f0db47ebf6f5373ee3e_0
2025-07-08 18:39:14,952 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 6ae7229d6c9cfe6137ebb5109b0ad4bf67dacbb131a257e0a9d7b9de9d9432305f1a3e3f514d5c759eb4c2cf6dc449d07add71b69cd3bec99a3c226bc2163b19_0
2025-07-08 18:39:14,953 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 14b66573990aa897c1bf884e53fea65f26621e4d4f1738470b38ea62b16a4af150e9fd4401466c33a6341a33514c5db3d37c590e939e7a8ea0cf7664338d608d_0
2025-07-08 18:39:14,954 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 14b66573990aa897c1bf884e53fea65f26621e4d4f1738470b38ea62b16a4af150e9fd4401466c33a6341a33514c5db3d37c590e939e7a8ea0cf7664338d608d_0
2025-07-08 18:39:14,956 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 14b66573990aa897c1bf884e53fea65f26621e4d4f1738470b38ea62b16a4af150e9fd4401466c33a6341a33514c5db3d37c590e939e7a8ea0cf7664338d608d_0
2025-07-08 18:39:14,957 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 54f0920e8a638f2b8827d995196c1137621aa14cf737ef4d43ee6e078e12be9366c8b02aa911c4277949ca25adfef54b4fd5a259053876fbceca2a4df8241ebd_0
2025-07-08 18:39:14,958 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b40213a6177c66ab78d80b499b39aa0005e62f90a4c9cd6dbde660c9971ee90cecc7b81e3084efdc8708e8c73ca1ba6c0e0c7b5f067fc0208bed51009f1e3cc4_0
2025-07-08 18:39:14,959 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b40213a6177c66ab78d80b499b39aa0005e62f90a4c9cd6dbde660c9971ee90cecc7b81e3084efdc8708e8c73ca1ba6c0e0c7b5f067fc0208bed51009f1e3cc4_0
2025-07-08 18:39:14,960 - semgrep.rule_match - DEBUG - match_key = ('qubit.innerHTML = "...";\n qubit.innerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n qubit.outerHTML = ``\n            <div class="qubit-number">Qi</div>\n            <div class="qubit-value">|0⟩</div>\n        `;\n document.write(...) qubit.outerHTML = "...";\n document.write("...")', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b40213a6177c66ab78d80b499b39aa0005e62f90a4c9cd6dbde660c9971ee90cecc7b81e3084efdc8708e8c73ca1ba6c0e0c7b5f067fc0208bed51009f1e3cc4_0
2025-07-08 18:39:14,961 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 6876df03f1287b95492be025e4666ae92b21f050774540b69b47338b21355805d4a2fbe38aca0b9b62011b2b375af9983e3bebb8b88d5bdc07bda6cab38cd734_0
2025-07-08 18:39:14,963 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8ac5125ae7c35c19927febe30d4eaa7081fefa03687dd7d0138fd0ec10225d415a09b9c3b482c7722d04113d03ed8f7bddfcd51800f2f3581147dabdb18b5546_0
2025-07-08 18:39:14,963 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8ac5125ae7c35c19927febe30d4eaa7081fefa03687dd7d0138fd0ec10225d415a09b9c3b482c7722d04113d03ed8f7bddfcd51800f2f3581147dabdb18b5546_0
2025-07-08 18:39:14,964 - semgrep.rule_match - DEBUG - match_key = ('</div>\n            <div class="qubit-value">|0⟩</div>\n         .*</?[a-zA-Z] `</div>\n            <div class="qubit-value">|0⟩</div>\n        ${i}...`\n `...${i}</div>\n            <div class="qubit-value">|0⟩</div>\n        `\n', PosixPath('static/qubit_ui/qubit-visualizer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 8ac5125ae7c35c19927febe30d4eaa7081fefa03687dd7d0138fd0ec10225d415a09b9c3b482c7722d04113d03ed8f7bddfcd51800f2f3581147dabdb18b5546_0
2025-07-08 18:39:14,968 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance-encrypt.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 646137aae5c4e8231400a7d34868a13fd34c430bbf12149666f21accc239873275f23851b37507a059c6798ef93c15b671b75ee42a1390343c4e6bace0d3cc01_0
2025-07-08 18:39:14,972 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n    </script>\n', PosixPath('static/resonance-encrypt.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2e888c24fd676a7538219888dcf865b4724075d11dffa8ab38e2af9f880ee7786fe613c4b85f6e788fa1ff09a49182ab39b09be268beb59b7d1772dad02c1e4b_0
2025-07-08 18:39:14,977 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n    </script>\n', PosixPath('static/resonance-encrypt.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2e888c24fd676a7538219888dcf865b4724075d11dffa8ab38e2af9f880ee7786fe613c4b85f6e788fa1ff09a49182ab39b09be268beb59b7d1772dad02c1e4b_0
2025-07-08 18:39:14,983 - semgrep.rule_match - DEBUG - match_key = ('\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Check if page is embedded in the OS interface\n        function checkEmbedded() {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get(\'embedded\') === \'true\') {\n                document.body.classList.add(\'embedded\');\n            }\n        }\n        \n        // Run on page load\n        window.addEventListener(\'DOMContentLoaded\', checkEmbedded);\n        \n        // DOM elements\n        const plaintextTextarea = document.getElementById(\'plaintext\');\n        const encryptKeyInput = document.getElementById(\'encrypt-key\');\n        const encryptButton = document.getElementById(\'encrypt-button\');\n        const clearEncryptButton = document.getElementById(\'clear-encrypt-button\');\n        const encryptResult = document.getElementById(\'encrypt-result\');\n        const encryptWaveCanvas = document.getElementById(\'encrypt-wave-canvas\');\n        const encryptLoading = document.getElementById(\'encrypt-loading\');\n        const encryptError = document.getElementById(\'encrypt-error\');\n        \n        const ciphertextTextarea = document.getElementById(\'ciphertext\');\n        const decryptKeyInput = document.getElementById(\'decrypt-key\');\n        const decryptButton = document.getElementById(\'decrypt-button\');\n        const clearDecryptButton = document.getElementById(\'clear-decrypt-button\');\n        const decryptResult = document.getElementById(\'decrypt-result\');\n        const decryptWaveCanvas = document.getElementById(\'decrypt-wave-canvas\');\n        const decryptLoading = document.getElementById(\'decrypt-loading\');\n        const decryptError = document.getElementById(\'decrypt-error\');\n        \n        // Canvas contexts\n        const encryptWaveCtx = encryptWaveCanvas.getContext(\'2d\');\n        const decryptWaveCtx = decryptWaveCanvas.getContext(\'2d\');\n        \n        // Get metrics elements\n        const harmonicResonanceBar = document.getElementById(\'harmonic-resonance-bar\');\n        const harmonicResonanceValue = document.getElementById(\'harmonic-resonance-value\');\n        const quantumEntropyBar = document.getElementById(\'quantum-entropy-bar\');\n        const quantumEntropyValue = document.getElementById(\'quantum-entropy-value\');\n        const symbolicVarianceBar = document.getElementById(\'symbolic-variance-bar\');\n        const symbolicVarianceValue = document.getElementById(\'symbolic-variance-value\');\n        const waveCoherenceBar = document.getElementById(\'wave-coherence-bar\');\n        const waveCoherenceValue = document.getElementById(\'wave-coherence-value\');\n        \n        // Update metrics function\n        function updateMetrics(metrics) {\n            // Default values if metrics are not provided\n            const harmonicResonance = metrics?.harmonicResonance || 0;\n            const quantumEntropy = metrics?.quantumEntropy || 0;\n            const symbolicVariance = metrics?.symbolicVariance || 0;\n            const waveCoherence = metrics?.waveCoherence || 0;\n            \n            // Update bars\n            harmonicResonanceBar.style.width = `${harmonicResonance * 100}%`;\n            quantumEntropyBar.style.width = `${quantumEntropy * 100}%`;\n            symbolicVarianceBar.style.width = `${symbolicVariance * 100}%`;\n            waveCoherenceBar.style.width = `${waveCoherence * 100}%`;\n            \n            // Update values\n            harmonicResonanceValue.textContent = harmonicResonance.toFixed(3);\n            quantumEntropyValue.textContent = quantumEntropy.toFixed(3);\n            symbolicVarianceValue.textContent = symbolicVariance.toFixed(3);\n            waveCoherenceValue.textContent = waveCoherence.toFixed(3);\n        }\n        \n        // Reset metrics function\n        function resetMetrics() {\n            updateMetrics({\n                harmonicResonance: 0,\n                quantumEntropy: 0,\n                symbolicVariance: 0,\n                waveCoherence: 0\n            });\n        }\n        \n        // Encrypt button event\n        encryptButton.addEventListener(\'click\', () => {\n            const plaintext = plaintextTextarea.value.trim();\n            const key = encryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!plaintext) {\n                showError(encryptError, \'Please enter text to encrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(encryptError, \'Please enter an encryption key\');\n                return;\n            }\n            \n            if (key.length < 4) {\n                showError(encryptError, \'Encryption key should be at least 4 characters long for security\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(encryptError);\n            \n            // Show loading state\n            encryptLoading.classList.add(\'active\');\n            \n            // Simulate encryption delay\n            setTimeout(() => {\n                try {\n                    // Encrypt the plaintext\n                    const encrypted = encryptText(plaintext, key);\n                    \n                    // Update result\n                    encryptResult.innerHTML = `<div>// Encrypted successfully</div><div>${encrypted}</div>`;\n                    \n                    // Automatically set the ciphertext for decryption\n                    ciphertextTextarea.value = encrypted;\n                    \n                    // Update waveform visualization\n                    drawEncryptWave(plaintext, key);\n                    \n                    // Update resonance metrics (ideal values for perfect encryption)\n                    updateMetrics({\n                        harmonicResonance: 0.999,\n                        quantumEntropy: 0.870,\n                        symbolicVariance: 0.301,\n                        waveCoherence: 0.951\n                    });\n                } catch (e) {\n                    showError(encryptError, `Encryption failed: ${e.message}`);\n                    encryptResult.innerHTML = `<div class="result-empty">// Encryption failed</div>`;\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                encryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Decrypt button event\n        decryptButton.addEventListener(\'click\', () => {\n            const ciphertext = ciphertextTextarea.value.trim();\n            const key = decryptKeyInput.value.trim();\n            \n            // Validate inputs\n            if (!ciphertext) {\n                showError(decryptError, \'Please enter text to decrypt\');\n                return;\n            }\n            \n            if (!key) {\n                showError(decryptError, \'Please enter a decryption key\');\n                return;\n            }\n            \n            // Clear any previous errors\n            hideError(decryptError);\n            \n            // Show loading state\n            decryptLoading.classList.add(\'active\');\n            \n            // Simulate decryption delay\n            setTimeout(() => {\n                try {\n                    // Calculate key similarity (using string comparison)\n                    const originalKey = encryptKeyInput.value.trim();\n                    const isExactMatch = key === originalKey;\n                    const isPartialMatch = originalKey.startsWith(key) || key.startsWith(originalKey);\n                    \n                    if (isExactMatch) {\n                        // Exact key match\n                        // Decrypt the ciphertext\n                        const decrypted = decryptText(ciphertext, key);\n                        \n                        // Update result\n                        decryptResult.innerHTML = `<div>// Decrypted successfully</div><div>${decrypted}</div>`;\n                        \n                        // Update waveform visualization\n                        drawDecryptWave(ciphertext, key, true);\n                        \n                        // Update resonance metrics (perfect match)\n                        updateMetrics({\n                            harmonicResonance: 0.999,\n                            quantumEntropy: 0.870,\n                            symbolicVariance: 0.301,\n                            waveCoherence: 0.951\n                        });\n                    } else if (isPartialMatch) {\n                        // Partial key match (similar but not exact)\n                        // Calculate similarity ratio\n                        const similarity = Math.min(key.length, originalKey.length) / Math.max(key.length, originalKey.length);\n                        \n                        // Attempt decryption but show partial success\n                        try {\n                            decryptText(ciphertext, key);\n                            \n                            // Show partial success\n                            decryptResult.innerHTML = `<div>// Decryption successful</div><div>// Message contained:</div><div>Decryption failed: Invalid resonance signature - waveform parameters do not match</div>`;\n                            \n                            // Update resonance metrics (partial match based on similarity)\n                            updateMetrics({\n                                harmonicResonance: 0.800 * similarity,\n                                quantumEntropy: 0.901 * similarity,\n                                symbolicVariance: 0.522 * similarity,\n                                waveCoherence: 0.060 * similarity\n                            });\n                            \n                            // Draw partially matched waveform\n                            drawDecryptWave(ciphertext, key, false);\n                        } catch (e) {\n                            throw e; // Rethrow to be caught by outer try/catch\n                        }\n                    } else {\n                        // Completely different key\n                        throw new Error("Decryption failed: key does not match");\n                    }\n                } catch (e) {\n                    showError(decryptError, `Decryption failed: ${e.message}`);\n                    decryptResult.innerHTML = `<div class="result-empty">// Decryption failed</div>`;\n                    \n                    // Draw mismatched waveform\n                    drawDecryptWave(ciphertext, key, false);\n                    \n                    // Reset metrics to zero\n                    resetMetrics();\n                }\n                \n                // Hide loading state\n                decryptLoading.classList.remove(\'active\');\n            }, 1500);\n        });\n        \n        // Clear encrypt form\n        clearEncryptButton.addEventListener(\'click\', () => {\n            plaintextTextarea.value = \'\';\n            encryptKeyInput.value = \'\';\n            encryptResult.innerHTML = \'<div class="result-empty">// Encrypted data will appear here</div>\';\n            hideError(encryptError);\n            drawEncryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Clear decrypt form\n        clearDecryptButton.addEventListener(\'click\', () => {\n            ciphertextTextarea.value = \'\';\n            decryptKeyInput.value = \'\';\n            decryptResult.innerHTML = \'<div class="result-empty">// Decrypted data will appear here</div>\';\n            hideError(decryptError);\n            drawDecryptWave(\'\', \'\');\n            resetMetrics(); // Reset metrics display\n        });\n        \n        // Show error message\n        function showError(element, message) {\n            element.textContent = message;\n            element.style.display = \'block\';\n        }\n        \n        // Hide error message\n        function hideError(element) {\n            element.textContent = \'\';\n            element.style.display = \'none\';\n        }\n        \n        // Draw encryption waveform\n        function drawEncryptWave(text, key) {\n            // Clear canvas\n            encryptWaveCtx.clearRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // Set background\n            encryptWaveCtx.fillStyle = \'#0a0a0a\';\n            encryptWaveCtx.fillRect(0, 0, encryptWaveCanvas.width, encryptWaveCanvas.height);\n            \n            // If no text or key, just show empty wave\n            if (!text || !key) {\n                drawEmptyWave(encryptWaveCtx, encryptWaveCanvas.width, encryptWaveCanvas.height);\n                return;\n            }\n            \n            // Calculate a hash from the text and key\n            const combinedHash = simpleHash(text + key);\n            \n            // Draw the waveform\n            drawWaveform(\n                encryptWaveCtx, \n                encryptWaveCanvas.width, \n                encryptWaveCanvas.height, \n                combinedHash, \n                \'#00b7ff\'\n            );\n        }\n        \n        // Draw decryption waveform\n        function drawDecryptWave(ciphertext, key, isMatch = false) {\n            // Clear canvas\n            decryptWaveCtx.clearRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // Set background\n            decryptWaveCtx.fillStyle = \'#0a0a0a\';\n            decryptWaveCtx.fillRect(0, 0, decryptWaveCanvas.width, decryptWaveCanvas.height);\n            \n            // If no ciphertext or key, just show empty wave\n            if (!ciphertext || !key) {\n                drawEmptyWave(decryptWaveCtx, decryptWaveCanvas.width, decryptWaveCanvas.height);\n                return;\n            }\n            \n            // Extract "hash" from the ciphertext (in a real system this would be done cryptographically)\n            // For this demo, we\'ll just use the first part of the ciphertext\n            const containerHash = ciphertext.substring(0, 16);\n            \n            // Draw the container waveform (original pattern)\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                simpleHash(containerHash), \n                \'#b967ff\'\n            );\n            \n            // Calculate key hash\n            const keyHash = simpleHash(key);\n            \n            // Draw the key waveform (matching pattern) with offset\n            // In a real system, these would only match if the key is correct\n            drawWaveform(\n                decryptWaveCtx, \n                decryptWaveCanvas.width, \n                decryptWaveCanvas.height, \n                isMatch ? simpleHash(containerHash) : keyHash, \n                isMatch ? \'rgba(0, 183, 255, 0.7)\' : \'rgba(255, 82, 82, 0.7)\',\n                true,\n                5\n            );\n        }\n        \n        // Draw empty waveform\n        function drawEmptyWave(ctx, width, height) {\n            // Draw center line\n            ctx.strokeStyle = \'#333\';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n        }\n        \n        // Draw waveform\n        function drawWaveform(ctx, width, height, seed, color, isDashed = false, amplitude = 0) {\n            // Get center y-position\n            const centerY = height / 2;\n            \n            // Set line style\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            \n            if (isDashed) {\n                ctx.setLineDash([5, 3]);\n            } else {\n                ctx.setLineDash([]);\n            }\n            \n            // Draw the waveform\n            ctx.beginPath();\n            \n            for (let x = 0; x < width; x++) {\n                // Calculate a y position based on the seed\n                const t = x / width * 20;\n                const factor = parseInt(seed.substring(0, 8), 16) / 0xFFFFFFFF;\n                const factor2 = parseInt(seed.substring(8, 16), 16) / 0xFFFFFFFF;\n                \n                // Combine multiple sine waves with different frequencies\n                const y1 = Math.sin(t * (1 + factor * 4)) * (20 + amplitude);\n                const y2 = Math.sin(t * (2 + factor2 * 6) + factor * Math.PI) * (10 + amplitude);\n                const y3 = Math.sin(t * (3 + factor * 2) + factor2 * Math.PI) * (5 + amplitude);\n                \n                const y = centerY + y1 + y2 + y3;\n                \n                if (x === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n            \n            // Reset line dash\n            ctx.setLineDash([]);\n        }\n        \n        // Generate a simple hash for demo purposes\n        function simpleHash(str) {\n            let hash = 0;\n            for (let i = 0; i < str.length; i++) {\n                const char = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash |= 0; // Convert to 32bit integer\n            }\n            \n            // Convert to hex string\n            const hashHex = (hash >>> 0).toString(16).padStart(8, \'0\');\n            return hashHex.repeat(4); // Pad to 32 chars\n        }\n        \n        // Encrypt text (simplified for demo)\n        function encryptText(plaintext, key) {\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            // In a real implementation, this would use proper cryptography\n            // For this demo, we\'ll use a very simple encoding\n            \n            // Generate a simple hash for the ciphertext prefix\n            const prefix = simpleHash(plaintext + key).substring(0, 16);\n            \n            // Convert plaintext to base64\n            let encoded = btoa(plaintext);\n            \n            // Add the prefix to the encoded text\n            return prefix + \'.\' + encoded;\n        }\n        \n        // Decrypt text (simplified for demo)\n        function decryptText(ciphertext, key) {\n            // Split on the first dot\n            const parts = ciphertext.split(\'.\');\n            \n            if (parts.length !== 2) {\n                throw new Error(\'Invalid ciphertext format\');\n            }\n            \n            const prefix = parts[0];\n            const encoded = parts[1];\n            \n            // In a real implementation, we would verify the hash cryptographically\n            // For this demo, we\'ll just check if the key length is valid\n            if (key.length < 4) {\n                throw new Error(\'Key must be at least 4 characters long\');\n            }\n            \n            try {\n                // Decode from base64\n                const decoded = atob(encoded);\n                return decoded;\n            } catch (e) {\n                throw new Error(\'Invalid encoding format\');\n            }\n        }\n        \n        // Initialize wave visualizations\n        window.addEventListener(\'load\', () => {\n            drawEncryptWave(\'\', \'\');\n            drawDecryptWave(\'\', \'\');\n        });\n    </script>\n', PosixPath('static/resonance-encrypt.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2e888c24fd676a7538219888dcf865b4724075d11dffa8ab38e2af9f880ee7786fe613c4b85f6e788fa1ff09a49182ab39b09be268beb59b7d1772dad02c1e4b_0
2025-07-08 18:39:14,984 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e225f3e7c3026eea1e48781c0935feac7c548fbef8afd2985f44130b6921ce3ce379b0cad6bd4a2bc900322aa6f6ae57d1591e9ba8481c61fa826638a7877e35_0
2025-07-08 18:39:14,985 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/resonance_analyzer/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b26db5a730996e5376d1693c008f4f00bf66c44098931db088fe8aaafb2f4c94c6d80003cc80fc8b1f8adaa1f25b38900169f894e2307d141c0f4322eaa93eb5_0
2025-07-08 18:39:14,985 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/resonance_analyzer/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b26db5a730996e5376d1693c008f4f00bf66c44098931db088fe8aaafb2f4c94c6d80003cc80fc8b1f8adaa1f25b38900169f894e2307d141c0f4322eaa93eb5_0
2025-07-08 18:39:14,986 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('static/resonance_analyzer/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b26db5a730996e5376d1693c008f4f00bf66c44098931db088fe8aaafb2f4c94c6d80003cc80fc8b1f8adaa1f25b38900169f894e2307d141c0f4322eaa93eb5_0
2025-07-08 18:39:14,987 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 47ce4eb2c391435e851de59eebcb2af44ef06d04567c5be42b6a493bd1b2b39db2c4772cfa30df0be8339bb836d05d52018ae10d9a3d255643c9f28d00842609_0
2025-07-08 18:39:14,987 - semgrep.rule_match - DEBUG - match_key = ('%</p>\n         .*</?[a-zA-Z] `%</p>\n        ${data.phase_coherence*100.toFixed(1)}...`\n `...${data.phase_coherence*100.toFixed(1)}%</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = e1f79da162ba8f3bb9ae84dae369d53797251eaec0f3729c304eace09effc5620daded956c8fb4be28736e64eef2cb3c0ec8db5dc10cf1b14da0cc6a3f8fdf82_0
2025-07-08 18:39:14,988 - semgrep.rule_match - DEBUG - match_key = ('%</p>\n         .*</?[a-zA-Z] `%</p>\n        ${data.phase_coherence*100.toFixed(1)}...`\n `...${data.phase_coherence*100.toFixed(1)}%</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = e1f79da162ba8f3bb9ae84dae369d53797251eaec0f3729c304eace09effc5620daded956c8fb4be28736e64eef2cb3c0ec8db5dc10cf1b14da0cc6a3f8fdf82_0
2025-07-08 18:39:14,989 - semgrep.rule_match - DEBUG - match_key = ('%</p>\n         .*</?[a-zA-Z] `%</p>\n        ${data.phase_coherence*100.toFixed(1)}...`\n `...${data.phase_coherence*100.toFixed(1)}%</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = e1f79da162ba8f3bb9ae84dae369d53797251eaec0f3729c304eace09effc5620daded956c8fb4be28736e64eef2cb3c0ec8db5dc10cf1b14da0cc6a3f8fdf82_0
2025-07-08 18:39:14,990 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 53068d6f3792a2a5b457c7a709c8e4f2c5b89508c6b880287bcac89bc0fda2b69e9c366a767a9646efcc93da0bc6441ae86d76a7b7eb3cadfe8d42c0cccd366f_0
2025-07-08 18:39:14,990 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = fad07d466524544091b64b44f7aa337b156b5266d3748cea88e70a4ae86526f6e035ae71f4d2c142c63ef8b66daa6b45498f594185a5ed33c4016ad95984438d_0
2025-07-08 18:39:14,991 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = fad07d466524544091b64b44f7aa337b156b5266d3748cea88e70a4ae86526f6e035ae71f4d2c142c63ef8b66daa6b45498f594185a5ed33c4016ad95984438d_0
2025-07-08 18:39:14,992 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = fad07d466524544091b64b44f7aa337b156b5266d3748cea88e70a4ae86526f6e035ae71f4d2c142c63ef8b66daa6b45498f594185a5ed33c4016ad95984438d_0
2025-07-08 18:39:14,992 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 0a0638820fc781d43aa5f191c0856113ce7a37e45dcf36ce609a72e72cc922af78e5c038f58b4950d6b2cf93abce233d35838df4e5b05e6622385d41d7ee67eb_0
2025-07-08 18:39:14,993 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n summaryContent.outerHTML = summary;\n document.write(...) summaryContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 24485cbfcff5416a612eaff5d21b50291908cbc8ba0162372e7a6565b3d4fba8fb266a248d591ca308408d7c3d9de3ee6ac33e223aa8914df5e6b441b0e6c5c5_0
2025-07-08 18:39:14,994 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n summaryContent.outerHTML = summary;\n document.write(...) summaryContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 24485cbfcff5416a612eaff5d21b50291908cbc8ba0162372e7a6565b3d4fba8fb266a248d591ca308408d7c3d9de3ee6ac33e223aa8914df5e6b441b0e6c5c5_0
2025-07-08 18:39:14,994 - semgrep.rule_match - DEBUG - match_key = ('summaryContent.innerHTML = "...";\n summaryContent.innerHTML = summary;\n summaryContent.outerHTML = summary;\n document.write(...) summaryContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 24485cbfcff5416a612eaff5d21b50291908cbc8ba0162372e7a6565b3d4fba8fb266a248d591ca308408d7c3d9de3ee6ac33e223aa8914df5e6b441b0e6c5c5_0
2025-07-08 18:39:14,995 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 47ce4eb2c391435e851de59eebcb2af44ef06d04567c5be42b6a493bd1b2b39db2c4772cfa30df0be8339bb836d05d52018ae10d9a3d255643c9f28d00842609_0
2025-07-08 18:39:14,996 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.interpretation.geometry}...`\n `...${data.interpretation.geometry}</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9d8c91fee220dbf6e7fb4b76f4c21045b4a5e15343030c799487aececae3b77ed14cae44e0fa6b4b336d77e0a980ab0acbfa9e4c073d742da24912e081cc89d1_0
2025-07-08 18:39:14,996 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.interpretation.geometry}...`\n `...${data.interpretation.geometry}</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9d8c91fee220dbf6e7fb4b76f4c21045b4a5e15343030c799487aececae3b77ed14cae44e0fa6b4b336d77e0a980ab0acbfa9e4c073d742da24912e081cc89d1_0
2025-07-08 18:39:14,997 - semgrep.rule_match - DEBUG - match_key = ('</p>\n         .*</?[a-zA-Z] `</p>\n        ${data.interpretation.geometry}...`\n `...${data.interpretation.geometry}</p>\n        `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 9d8c91fee220dbf6e7fb4b76f4c21045b4a5e15343030c799487aececae3b77ed14cae44e0fa6b4b336d77e0a980ab0acbfa9e4c073d742da24912e081cc89d1_0
2025-07-08 18:39:14,997 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 47ce4eb2c391435e851de59eebcb2af44ef06d04567c5be42b6a493bd1b2b39db2c4772cfa30df0be8339bb836d05d52018ae10d9a3d255643c9f28d00842609_0
2025-07-08 18:39:14,998 - semgrep.rule_match - DEBUG - match_key = ('<li> .*</?[a-zA-Z] `<li>${element}...`\n `...${element}<li>`\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 906d4bda8d71c93876ddbb72584aac43fc95276c07781aeb7ee4d5dfd7a1f7ba6a0b5c7679802eddccd20815d41101192f97402d7069851c22b24fe7b6c0dec3_0
2025-07-08 18:39:14,998 - semgrep.rule_match - DEBUG - match_key = ('<li> .*</?[a-zA-Z] `<li>${element}...`\n `...${element}<li>`\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 906d4bda8d71c93876ddbb72584aac43fc95276c07781aeb7ee4d5dfd7a1f7ba6a0b5c7679802eddccd20815d41101192f97402d7069851c22b24fe7b6c0dec3_0
2025-07-08 18:39:14,999 - semgrep.rule_match - DEBUG - match_key = ('<li> .*</?[a-zA-Z] `<li>${element}...`\n `...${element}<li>`\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 906d4bda8d71c93876ddbb72584aac43fc95276c07781aeb7ee4d5dfd7a1f7ba6a0b5c7679802eddccd20815d41101192f97402d7069851c22b24fe7b6c0dec3_0
2025-07-08 18:39:14,999 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 53068d6f3792a2a5b457c7a709c8e4f2c5b89508c6b880287bcac89bc0fda2b69e9c366a767a9646efcc93da0bc6441ae86d76a7b7eb3cadfe8d42c0cccd366f_0
2025-07-08 18:39:15,000 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 79134280be402e3ad71a27cf2c22a00562439f0d5b2ff4e2b137298172e45cb8ec241faeef8ed8a78d135807f4220206423b71551951a24f29ab59170a3081ee_0
2025-07-08 18:39:15,000 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 79134280be402e3ad71a27cf2c22a00562439f0d5b2ff4e2b137298172e45cb8ec241faeef8ed8a78d135807f4220206423b71551951a24f29ab59170a3081ee_0
2025-07-08 18:39:15,001 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 79134280be402e3ad71a27cf2c22a00562439f0d5b2ff4e2b137298172e45cb8ec241faeef8ed8a78d135807f4220206423b71551951a24f29ab59170a3081ee_0
2025-07-08 18:39:15,001 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 0a0638820fc781d43aa5f191c0856113ce7a37e45dcf36ce609a72e72cc922af78e5c038f58b4950d6b2cf93abce233d35838df4e5b05e6622385d41d7ee67eb_0
2025-07-08 18:39:15,002 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n symbolicContent.outerHTML = interpretation;\n document.write(...) symbolicContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 6d18f1f75a48cc3fe05a0f5c51f5758b14ff77d45535e0120295eae47b89f8287a7ca275838029d2dbb3523c3339ec4417df7edd1903e040efb28e506c1d8378_0
2025-07-08 18:39:15,002 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n symbolicContent.outerHTML = interpretation;\n document.write(...) symbolicContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 6d18f1f75a48cc3fe05a0f5c51f5758b14ff77d45535e0120295eae47b89f8287a7ca275838029d2dbb3523c3339ec4417df7edd1903e040efb28e506c1d8378_0
2025-07-08 18:39:15,003 - semgrep.rule_match - DEBUG - match_key = ('symbolicContent.innerHTML = "...";\n symbolicContent.innerHTML = interpretation;\n symbolicContent.outerHTML = interpretation;\n document.write(...) symbolicContent.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 6d18f1f75a48cc3fe05a0f5c51f5758b14ff77d45535e0120295eae47b89f8287a7ca275838029d2dbb3523c3339ec4417df7edd1903e040efb28e506c1d8378_0
2025-07-08 18:39:15,003 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 53068d6f3792a2a5b457c7a709c8e4f2c5b89508c6b880287bcac89bc0fda2b69e9c366a767a9646efcc93da0bc6441ae86d76a7b7eb3cadfe8d42c0cccd366f_0
2025-07-08 18:39:15,004 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0d3d11c19fc1664d3849ca1e4144624b80769ab1cd24a1c3ee2c6e6a667a353c3687176be1fd0184210a95d9f559fe875faf22dd0dcdd3488131331069d40c05_0
2025-07-08 18:39:15,004 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0d3d11c19fc1664d3849ca1e4144624b80769ab1cd24a1c3ee2c6e6a667a353c3687176be1fd0184210a95d9f559fe875faf22dd0dcdd3488131331069d40c05_0
2025-07-08 18:39:15,005 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 0d3d11c19fc1664d3849ca1e4144624b80769ab1cd24a1c3ee2c6e6a667a353c3687176be1fd0184210a95d9f559fe875faf22dd0dcdd3488131331069d40c05_0
2025-07-08 18:39:15,005 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 0a0638820fc781d43aa5f191c0856113ce7a37e45dcf36ce609a72e72cc922af78e5c038f58b4950d6b2cf93abce233d35838df4e5b05e6622385d41d7ee67eb_0
2025-07-08 18:39:15,006 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n row.outerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2bc8fac172c63d3433de310d3f80bb0a1d4edc221188ee38920b2ffde25048b71e07d6b85488ec3452e508a7945986b3eb6e6e473e7e91c01429b976355b8e61_0
2025-07-08 18:39:15,006 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n row.outerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2bc8fac172c63d3433de310d3f80bb0a1d4edc221188ee38920b2ffde25048b71e07d6b85488ec3452e508a7945986b3eb6e6e473e7e91c01429b976355b8e61_0
2025-07-08 18:39:15,007 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n row.outerHTML = ``\n                <td>pattern.frequency.toFixed(3)</td>\n                <td>pattern.amplitude.toFixed(2)</td>\n                <td>pattern.pattern_type</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 2bc8fac172c63d3433de310d3f80bb0a1d4edc221188ee38920b2ffde25048b71e07d6b85488ec3452e508a7945986b3eb6e6e473e7e91c01429b976355b8e61_0
2025-07-08 18:39:15,008 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 47ce4eb2c391435e851de59eebcb2af44ef06d04567c5be42b6a493bd1b2b39db2c4772cfa30df0be8339bb836d05d52018ae10d9a3d255643c9f28d00842609_0
2025-07-08 18:39:15,008 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${pattern.pattern_type}...`\n `...${pattern.pattern_type}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = b5ff2abac934d210161635bd4bd228f7e4f743bd882d0011ebc0b18d796fd3adf93122f4a9167fc360d5837997c1e12f88dc20a4df8ea5d3f2473a2efd9b993a_0
2025-07-08 18:39:15,009 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${pattern.pattern_type}...`\n `...${pattern.pattern_type}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = b5ff2abac934d210161635bd4bd228f7e4f743bd882d0011ebc0b18d796fd3adf93122f4a9167fc360d5837997c1e12f88dc20a4df8ea5d3f2473a2efd9b993a_0
2025-07-08 18:39:15,010 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${pattern.pattern_type}...`\n `...${pattern.pattern_type}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = b5ff2abac934d210161635bd4bd228f7e4f743bd882d0011ebc0b18d796fd3adf93122f4a9167fc360d5837997c1e12f88dc20a4df8ea5d3f2473a2efd9b993a_0
2025-07-08 18:39:15,010 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 53068d6f3792a2a5b457c7a709c8e4f2c5b89508c6b880287bcac89bc0fda2b69e9c366a767a9646efcc93da0bc6441ae86d76a7b7eb3cadfe8d42c0cccd366f_0
2025-07-08 18:39:15,011 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 9e2fbb500550c5798bd6711b619f7f6f5b1a42c2700daa8d9d4120e01df74bb36207cd3fb77c450842eb2c34ab3d9ede3f6def07c34782ac53d20ff9b4b7f0bf_0
2025-07-08 18:39:15,011 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 9e2fbb500550c5798bd6711b619f7f6f5b1a42c2700daa8d9d4120e01df74bb36207cd3fb77c450842eb2c34ab3d9ede3f6def07c34782ac53d20ff9b4b7f0bf_0
2025-07-08 18:39:15,012 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 9e2fbb500550c5798bd6711b619f7f6f5b1a42c2700daa8d9d4120e01df74bb36207cd3fb77c450842eb2c34ab3d9ede3f6def07c34782ac53d20ff9b4b7f0bf_0
2025-07-08 18:39:15,013 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 0a0638820fc781d43aa5f191c0856113ce7a37e45dcf36ce609a72e72cc922af78e5c038f58b4950d6b2cf93abce233d35838df4e5b05e6622385d41d7ee67eb_0
2025-07-08 18:39:15,013 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n row.outerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 47a3c3c102babf58ff28fa54e31c7b892919a3ebafc96d315d90afa1f146196072968d434d386aa552c0b2f667d61950f8ee9c3073caf59bf70a3a4ad8a3ac2c_0
2025-07-08 18:39:15,014 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n row.outerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 47a3c3c102babf58ff28fa54e31c7b892919a3ebafc96d315d90afa1f146196072968d434d386aa552c0b2f667d61950f8ee9c3073caf59bf70a3a4ad8a3ac2c_0
2025-07-08 18:39:15,014 - semgrep.rule_match - DEBUG - match_key = ('row.innerHTML = "...";\n row.innerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n row.outerHTML = ``\n                <td>relation.components.join(\' - \')</td>\n                <td>relation.phase_difference/Math.PI*180.toFixed(1)° (relation.phase_difference.toFixed(2) rad)</td>\n                <td>relation.significance.toFixed(2)</td>\n            `;\n document.write(...) row.outerHTML = "...";\n document.write("...")', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 47a3c3c102babf58ff28fa54e31c7b892919a3ebafc96d315d90afa1f146196072968d434d386aa552c0b2f667d61950f8ee9c3073caf59bf70a3a4ad8a3ac2c_0
2025-07-08 18:39:15,015 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 47ce4eb2c391435e851de59eebcb2af44ef06d04567c5be42b6a493bd1b2b39db2c4772cfa30df0be8339bb836d05d52018ae10d9a3d255643c9f28d00842609_0
2025-07-08 18:39:15,015 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${relation.significance.toFixed(2)}...`\n `...${relation.significance.toFixed(2)}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = ff9d99eac8d38c738352d1569f171d1355a04002b8e15393c6bd2a7bf0cc205344ced9eb4b68363443772cda332d80f9361cf15b9fe29df0a0ba1a071b3d6857_0
2025-07-08 18:39:15,016 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${relation.significance.toFixed(2)}...`\n `...${relation.significance.toFixed(2)}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = ff9d99eac8d38c738352d1569f171d1355a04002b8e15393c6bd2a7bf0cc205344ced9eb4b68363443772cda332d80f9361cf15b9fe29df0a0ba1a071b3d6857_0
2025-07-08 18:39:15,017 - semgrep.rule_match - DEBUG - match_key = ('</td>\n             .*</?[a-zA-Z] `</td>\n            ${relation.significance.toFixed(2)}...`\n `...${relation.significance.toFixed(2)}</td>\n            `\n', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = ff9d99eac8d38c738352d1569f171d1355a04002b8e15393c6bd2a7bf0cc205344ced9eb4b68363443772cda332d80f9361cf15b9fe29df0a0ba1a071b3d6857_0
2025-07-08 18:39:15,017 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d7d94001e8848c4be18077a92a01b90ad6e6b38d5221764adc51bae830fdc99cbef2a8b2404cf804e7a369408e5ee6cd693b8df2bf0cd637797f19113baa57e8_0
2025-07-08 18:39:15,018 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,019 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,019 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,020 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d7d94001e8848c4be18077a92a01b90ad6e6b38d5221764adc51bae830fdc99cbef2a8b2404cf804e7a369408e5ee6cd693b8df2bf0cd637797f19113baa57e8_0
2025-07-08 18:39:15,020 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,021 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,021 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_1
2025-07-08 18:39:15,022 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d7d94001e8848c4be18077a92a01b90ad6e6b38d5221764adc51bae830fdc99cbef2a8b2404cf804e7a369408e5ee6cd693b8df2bf0cd637797f19113baa57e8_0
2025-07-08 18:39:15,023 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,023 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_0
2025-07-08 18:39:15,024 - semgrep.rule_match - DEBUG - match_key = ("window.parent.postMessage(...,'*')", PosixPath('static/resonance_analyzer/resonance-analyzer.js'), 'config..semgrep.vendored-rules.javascript.browser.security.wildcard-postmessage-configuration') match_id = d46ca842ac5b82f046ebc124dbba02f4cd2379b7f92e73a6ead4538af76278172992be46494557e1dcbff008d785f9e86f56c46fb47c9886b0fbff73ed60eaea_2
2025-07-08 18:39:15,025 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/scripts/launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 9b4bbc4681c8cc700189a3034199f2f720d2a28eba3a8d03609f08b09193ffbf2227b7a7af392eaa8708e905ef95df3538fdab92a6f137be6d465b52968dd5f8_0
2025-07-08 18:39:15,025 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('static/scripts/launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = a0a751324f9f9ba59167f3ad9eb7d47a99ad946f86c96625c082ce13f6f6dd99b75758ebfa313b46a3827a5a4569a9dc5bc27f7da4693f4820d9fab2ad7f0107_0
2025-07-08 18:39:15,026 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('static/scripts/launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = a0a751324f9f9ba59167f3ad9eb7d47a99ad946f86c96625c082ce13f6f6dd99b75758ebfa313b46a3827a5a4569a9dc5bc27f7da4693f4820d9fab2ad7f0107_0
2025-07-08 18:39:15,026 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.Popen(*$ARR, ...) subprocess.Popen([*$ARR, ...]) subprocess.Popen("...", ...) subprocess.Popen(("...",...), ...) subprocess.Popen(...) subprocess.Popen(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.Popen("=~/(python)/","...",...) subprocess.Popen("=~/(python)/",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.Popen("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.Popen(("=~/(python)/","...",...),...) subprocess.Popen(("=~/(python)/",...),...) subprocess.Popen(["=~/(python)/",...],...) subprocess.Popen(["=~/(python)/","...",...],...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.Popen(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.Popen(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('static/scripts/launch_quantonium_os.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = a0a751324f9f9ba59167f3ad9eb7d47a99ad946f86c96625c082ce13f6f6dd99b75758ebfa313b46a3827a5a4569a9dc5bc27f7da4693f4820d9fab2ad7f0107_0
2025-07-08 18:39:15,031 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:55.921316 on 1806 files
2025-07-08 18:39:15,032 - semgrep.core_runner - DEBUG - findings summary: 56 warning, 62 error, 6 info
2025-07-08 18:39:15,043 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-07-08 18:39:15,043 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-07-08 18:39:15,274 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <SKIPPED DATA (too many entries; use --max-log-list-entries)>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • Eigen/eigen-3.4.0/Eigen/src/misc/lapacke.h
   • Eigen/eigen-3.4.0.zip
   • logs/security/security.log.2025-04-27
   • logs/security/security.log.2025-05-14
   • logs/security/security.log.2025-05-15

  Partially analyzed due to parsing or internal Opengrep errors

   • Eigen/eigen-3.4.0/bench/perf_monitoring/resources/chart_footer.html (41 lines skipped)
   • Eigen/eigen-3.4.0/bench/perf_monitoring/resources/chart_header.html (43 lines skipped)
   • Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s1.js with 3 rules (e.g. config..semgrep.vendored-
     rules.javascript.lang.security.audit.detect-non-literal-regexp)
   • Eigen/eigen-3.4.0/bench/perf_monitoring/resources/s2.js
   • static/qubit_ui/qubit-visualizer.js (2 lines skipped)

2025-07-08 18:39:15,275 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 5 files only partially analyzed due to parsing or internal Opengrep errors
  Scan skipped: 5 files larger than 1.0 MB, 318 files matching .semgrepignore patterns
  For a full list of skipped files, run opengrep with the --verbose flag.

Ran 682 rules on 1806 files: 124 findings.
2025-07-08 18:39:15,276 - semgrep.app.version - DEBUG - Version cache does not exist
2025-07-08 18:39:15,276 - semgrep.app.version - DEBUG - Version cache does not exist
2025-07-08 18:39:15,293 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
