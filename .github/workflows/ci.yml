name: QuantoniumOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libpython3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run RFT Round-trip Tests
      run: |
        python tests/test_rft_roundtrip.py
    
    - name: Run Geometric Waveform KATs
      run: |
        python tests/test_geowave_kat.py
    
    - name: Run Comprehensive Validation
      run: |
        python test_quantonium_analysis.py
    
    - name: Run Performance Benchmarks
      run: |
        python benchmark_throughput.py
        
    - name: Generate CI Artifacts
      run: |
        mkdir -p ci_artifacts
        
        # Copy all JSON reports
        cp *.json ci_artifacts/ || echo "No JSON files found"
        
        # Create CSV throughput report
        python -c "
        import json
        import csv
        from datetime import datetime
        
        # Generate CSV from benchmark results
        try:
            with open('benchmark_throughput_report.json', 'r') as f:
                data = json.load(f)
            
            # Create CSV file
            with open('ci_artifacts/throughput_results.csv', 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(['timestamp', 'python_version', 'sha256_throughput_gbps', 'test_data_mb', 'runs'])
                
                sha256_data = data['sha256_benchmark']
                writer.writerow([
                    data['timestamp'],
                    '${{ matrix.python-version }}',
                    sha256_data['throughput_gbps'],
                    sha256_data['data_size_mb'],
                    sha256_data['runs']
                ])
                
            print('CSV throughput report generated')
        except Exception as e:
            print(f'Error generating CSV: {e}')
        "
        
        # Create validation summary
        python -c "
        import json
        from datetime import datetime
        
        summary = {
            'ci_run_timestamp': datetime.now().isoformat(),
            'python_version': '${{ matrix.python-version }}',
            'github_sha': '${{ github.sha }}',
            'github_ref': '${{ github.ref }}',
            'validation_files': [
                'quantonium_analysis_report.json',
                'rft_roundtrip_test_results.json', 
                'geowave_kat_results.json',
                'benchmark_throughput_report.json'
            ],
            'patent_application': 'USPTO #19/169,399',
            'repository': 'quantonium-os'
        }
        
        with open('ci_artifacts/validation_summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        
        print('Validation summary created')
        "
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          ci_artifacts/
          quantonium_analysis_report.json
          rft_roundtrip_test_results.json
          geowave_kat_results.json
          benchmark_throughput_report.json
          
    - name: Upload throughput CSV
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: throughput-csv-python-${{ matrix.python-version }}
        path: ci_artifacts/throughput_results.csv
    
    - name: Generate coverage report
      run: |
        pytest --cov=./ --cov-report=xml
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t quantonium-os:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm quantonium-os:latest python -c "
        import sys
        sys.path.append('/app/core')
        try:
            from encryption.resonance_fourier import perform_rft
            from encryption.geometric_waveform_hash import geometric_waveform_hash
            print('Core modules imported successfully')
        except ImportError as e:
            print(f'Import error: {e}')
        "
    
    - name: Export Docker image
      run: |
        docker save quantonium-os:latest | gzip > quantonium-os-docker.tar.gz
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: quantonium-os-docker.tar.gz

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        # Correctly find and copy artifacts
        find artifacts -type f -name "*.json" -exec cp {} deployment/ \;
        find artifacts -type f -name "*.csv" -exec cp {} deployment/ \;
        find artifacts -type f -name "*.tar.gz" -exec cp {} deployment/ \;
        
        # Create deployment manifest
        cat > deployment/manifest.json << EOF
        {
          "version": "$(date +%Y%m%d-%H%M%S)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "artifacts": [
            "quantonium_analysis_report.json",
            "rft_roundtrip_test_results.json",
            "geowave_kat_results.json",
            "benchmark_throughput_report.json",
            "quantonium-os-docker.tar.gz"
          ]
        }
        EOF
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        retention-days: 30