name: QuantoniumOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.11"]

    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (lean)
      run: |
        python -m pip install --upgrade pip
        pip install -e . --no-deps
        pip install numpy pytest pytest-cov
    
    - name: Install native build prerequisites (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm build-essential

    - name: Build native kernel (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "Attempting to build native kernel on Linux..."
        set -e
        if [ -f "algorithms/rft/kernels/Makefile" ]; then
          make -C algorithms/rft/kernels all
          LIB_PATH=$(find algorithms/rft/kernels -name 'libquantum_symbolic.so' -print -quit)
          if [ -n "$LIB_PATH" ]; then
            echo "RFT_KERNEL_LIB=$LIB_PATH" >> $GITHUB_ENV
          else
            echo "::warning::libquantum_symbolic.so not found after build"
          fi
        else
          echo "::warning::Makefile not found in algorithms/rft/kernels. Native tests may be skipped."
        fi

    - name: Locate native kernel (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Attempting to locate native kernel on Windows..."
        LIB_PATH=$(find ./algorithms/rft/kernels/compiled -name 'libquantum_symbolic.dll' -print -quit)
        if [ -n "$LIB_PATH" ]; then
          echo "Found library at $LIB_PATH"
          echo "RFT_KERNEL_LIB=$LIB_PATH" >> $GITHUB_ENV
        else
          echo "::warning::Could not find libquantum_symbolic.dll. Native tests may be skipped."
        fi
        
    - name: Run tests (excluding slow)
      env:
        # RFT_KERNEL_LIB is correctly accessed from GITHUB_ENV
        RFT_KERNEL_LIB: ${{ env.RFT_KERNEL_LIB }}
        QT_QPA_PLATFORM: offscreen
      run: |
        echo "RFT_KERNEL_LIB is set to: $RFT_KERNEL_LIB"
        python -m pip install coverage pytest-cov
        python -m pytest -m "not slow" --cov=algorithms --cov=core --cov=quantonium_os_src --cov-report=xml

    - name: Upload Native Artifact (Linux)
      if: runner.os == 'Linux' && env.RFT_KERNEL_LIB
      uses: actions/upload-artifact@v4
      with:
        name: native-kernel-linux
        path: ${{ env.RFT_KERNEL_LIB }}

    - name: Upload Native Artifact (Windows)
      if: runner.os == 'Windows' && env.RFT_KERNEL_LIB
      uses: actions/upload-artifact@v4
      with:
        name: native-kernel-windows
        path: ${{ env.RFT_KERNEL_LIB }}

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml
        path: coverage.xml

  docker:
    name: Docker Quick Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t qos-ci .
      - name: Run quick tests in container
        env:
          QOS_TEST_SEED: deadbeef
        run: |
          docker run --rm \
            -e QOS_TEST_SEED=${{ env.QOS_TEST_SEED }} \
            -v "${{ github.workspace }}:/qos" \
            qos-ci \
            pytest -m "not slow" --cov=algorithms --cov=core --cov=quantonium_os_src --cov-report=xml
      - name: Upload coverage report (docker)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-docker
          path: coverage.xml

  sidechannel:
    name: Side-channel Timing/Cache Audit (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install deps and build native
        run: |
          sudo apt-get update && sudo apt-get install -y nasm build-essential valgrind
          python -m pip install --upgrade pip
          pip install -e .[dev]
          make -C algorithms/rft/kernels all
      - name: Run cache timing check
        run: |
          python tools/leak_check/cache_timing_check.py --runs 2 --threshold 0.02

  milp:
    name: Diff/Linear MILP Bounds (â‰¥8 rounds)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install MILP deps
        run: |
          python -m pip install --upgrade pip
          pip install pulp
      - name: Run MILP trail bound search
        run: |
          python tests/crypto/diff_linear/milp_search.py --rounds 8 --min-active 32
