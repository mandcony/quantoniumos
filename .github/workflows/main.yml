name: QuantoniumOS CI/CD Pipeline

###############################################################################
# Triggers
###############################################################################
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

###############################################################################
# Re-usable bits
###############################################################################
env:
  PACKAGE_ROOT: quantoniumos               # directory that holds __init__.py
  PIP_CACHE_DIR: ~/.cache/pip
  PYTHON_VERSIONS: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

defaults:
  run:
    shell: bash

###############################################################################
# 1. TEST + BENCH + COVERAGE
###############################################################################
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [$PYTHON_VERSIONS]

    steps:
    - uses: actions/checkout@v4

    - name: Set-up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system libs
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y build-essential cmake libpython3-dev

    - name: Install Python deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .                          # ← makes package import-able

    - name: Run unit-tests + coverage
      env:
        PYTHONPATH: ${{ github.workspace }}/${{ env.PACKAGE_ROOT }}:${{ github.workspace }}
      run: |
        pytest -q \
          tests/test_rft_roundtrip.py \
          tests/test_geowave_kat.py \
          tests/test_quantonium_analysis.py \
          benchmark_throughput.py \
          --cov=${{ env.PACKAGE_ROOT }} \
          --cov-report=xml --cov-report=term

    # ─────────────────────────────────────────────────────────────────────────
    #  Artifacts
    # ─────────────────────────────────────────────────────────────────────────
    - name: Bundle JSON & CSV reports
      run: |
        mkdir -p ci_artifacts
        cp *.json ci_artifacts/ 2>/dev/null || true
        # CSV from benchmark JSON (only if file exists)
        python scripts/build_csv_from_benchmark.py || true

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-artifacts-${{ matrix.python-version }}
        path: ci_artifacts/

    - uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

###############################################################################
# 2. SOURCE DISTRIBUTION / WHEEL
###############################################################################
  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Build & check package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
        python -m twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

###############################################################################
# 3. DOCKER IMAGE (local build only)
###############################################################################
  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3

    - name: Build
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: quantonium-os:test

    - name: Import smoke modules
      run: |
        docker run --rm quantonium-os:test python - <<'PY'
        import sys, importlib
        sys.path.append('/app')
        for m in (
            'encryption.resonance_fourier',
            'encryption.geometric_waveform_hash',
        ):
            importlib.import_module(m)
            print(f"{m} ✅ imported")
        PY

    - name: Save tarball
      run: |
        docker save quantonium-os:test | gzip > quantonium-os-docker.tar.gz

    - uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: quantonium-os-docker.tar.gz

###############################################################################
# 4. STATIC SECURITY SCANS
###############################################################################
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Bandit & Safety
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety scan -r requirements.txt --output json > safety-report.json || true

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

###############################################################################
# 5. DEPLOY BUNDLE (artifacts only – no prod push)
###############################################################################
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Package deployment folder
      run: |
        mkdir deployment
        cp -r artifacts/* deployment/
        cat > deployment/manifest.json <<JSON
        {
          "version": "$(date +%Y%m%d-%H%M%S)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "built_at": "$(date -u +%FT%TZ)"
        }
        JSON

    - uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/
  
  # Step 1: Code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort
      - name: Lint with flake8
        continue-on-error: true           # ← only warn; don't fail pipeline
        run: flake8 .
      - name: Check code format with black
        run: black --check .
        continue-on-error: true
      - name: Check import sorting
        run: isort --check .
        continue-on-error: true

  # Step 2: Security checks
  security-check:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit
      - name: Check for vulnerabilities
        run: |
          pip-audit -r requirements.txt || true   # never fail CI, but upload SARIF
      - name: Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pip-audit.sarif

  # Step 3: Run tests with services
  test-with-services:
    runs-on: ubuntu-latest
    needs: security-check
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: quantonium_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libpython3-dev
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install -e .               # <— editable install so "core.*" works
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantonium_test
          PYTHONPATH: ${{ github.workspace }}/quantoniumos:${{ github.workspace }}
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Step 4: Build and scan Docker image
  build-scan:
    runs-on: ubuntu-latest
    needs: test-with-services
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.build.outputs.imageid }}   # scan the local image ID
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Step 5: Smoke tests
  smoke-test:
    runs-on: ubuntu-latest
    needs: build-scan
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: quantonium_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          npm install -g @apidevtools/swagger-cli
      - name: Initialize database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantonium_test
          SESSION_SECRET: smoke_test_secret
          PYTHONPATH: ${{ github.workspace }}/quantoniumos:${{ github.workspace }}
        run: python scripts/init_db.py
      - name: Start server and run smoke tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantonium_test
          SESSION_SECRET: smoke_test_secret
          PYTHONPATH: ${{ github.workspace }}/quantoniumos:${{ github.workspace }}
        run: |
          uvicorn main:app --host 0.0.0.0 --port 5000 &
          for i in {1..30}; do nc -z localhost 5000 && break; sleep 1; done
          python scripts/smoke_test.py --url http://localhost:5000 --verbose
      - name: Validate OpenAPI spec
        run: swagger-cli validate openapi.json

  # Step 6: Deploy (only on main branch)
  container-deploy:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.3.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
      - name: Sign the images with GitHub OIDC Token
        env:
          COSIGN_EXPERIMENTAL: "1"              # req'd for key-less signing
          DIGEST: ${{ steps.build_push.outputs.digest }}
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
