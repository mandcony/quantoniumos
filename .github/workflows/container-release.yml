name: Container Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (overrides tag)'
        required: false
        default: ''

jobs:
  build-sign-push:
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
        
      - name: Set version
        id: version
        run: |
          # If manually triggered with a version
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          # If triggered by a tag
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove the 'v' prefix
          # If triggered by a push to main
          else
            # Get version from pyproject.toml
            VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d '"' -f 2)
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push container image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/quantonium/quantonium:${{ env.VERSION }}
            ghcr.io/quantonium/quantonium:latest
          build-args: |
            VERSION=${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Sign the images with GitHub OIDC
        run: |
          cosign sign --yes \
            --key env://COSIGN_PRIVATE_KEY \
            ghcr.io/quantonium/quantonium:${{ env.VERSION }}
          
          cosign sign --yes \
            --key env://COSIGN_PRIVATE_KEY \
            ghcr.io/quantonium/quantonium:latest
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          
      - name: Verify signatures
        run: |
          cosign verify \
            --key env://COSIGN_PUBLIC_KEY \
            ghcr.io/quantonium/quantonium:${{ env.VERSION }}
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Quantonium OS ${{ env.VERSION }}
          draft: true
          prerelease: contains(env.VERSION, '-rc')
          body: |
            Quantonium OS ${{ env.VERSION }}
            
            ## Container Image
            ```
            docker pull ghcr.io/quantonium/quantonium:${{ env.VERSION }}
            ```
            
            Verify with:
            ```
            cosign verify --key cosign.pub ghcr.io/quantonium/quantonium:${{ env.VERSION }}
            ```
            
            For more information, see the [release notes](docs/release_notes_${{ env.VERSION }}.md).
          files: |
            docs/release_notes_${{ env.VERSION }}.md
          
      - name: Perform smoke test
        run: |
          docker run --rm --name quantonium-smoke-test -d \
            -p 5000:5000 \
            -e QUANTONIUM_API_KEY=test_key \
            -e SESSION_SECRET=test_secret \
            ghcr.io/quantonium/quantonium:${{ env.VERSION }}
          
          # Wait for the container to start
          sleep 5
          
          # Test that the API is running
          curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/health | grep 200
          
          # Clean up
          docker stop quantonium-smoke-test